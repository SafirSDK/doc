<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Safir SDK Core: Safir::Dob::ConnectionBase Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a00029.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="a00617.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Safir::Dob::ConnectionBase Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Common base class for connections to the DOB.  
 <a href="a00029.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00201_source.xhtml">Safir/Dob/ConnectionBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Safir::Dob::ConnectionBase:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00618.svg" width="408" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1ea3315feba4e5901666b95c77b05de5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a1ea3315feba4e5901666b95c77b05de5">ConnectionBase</a> ()</td></tr>
<tr class="memdesc:a1ea3315feba4e5901666b95c77b05de5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a1ea3315feba4e5901666b95c77b05de5">More...</a><br /></td></tr>
<tr class="separator:a1ea3315feba4e5901666b95c77b05de5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e38491c4598c50cacdfa127942a8fcd"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a4e38491c4598c50cacdfa127942a8fcd">~ConnectionBase</a> ()</td></tr>
<tr class="memdesc:a4e38491c4598c50cacdfa127942a8fcd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a4e38491c4598c50cacdfa127942a8fcd">More...</a><br /></td></tr>
<tr class="separator:a4e38491c4598c50cacdfa127942a8fcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f75bb234da260aa156fa1a04b00ec0f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a3f75bb234da260aa156fa1a04b00ec0f">IsOpen</a> () const =0</td></tr>
<tr class="memdesc:a3f75bb234da260aa156fa1a04b00ec0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells if the connection is opened.  <a href="#a3f75bb234da260aa156fa1a04b00ec0f">More...</a><br /></td></tr>
<tr class="separator:a3f75bb234da260aa156fa1a04b00ec0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Non-pending (synchronous) registration of entity handler.</div></td></tr>
<tr class="memitem:a226dbf99c1a48a45716dd7ef3c169c89"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a226dbf99c1a48a45716dd7ef3c169c89">RegisterEntityHandler</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, const <a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a> instanceIdPolicy, <a class="el" href="a00054.xhtml">Dob::EntityHandler</a> *const entityHandler) const </td></tr>
<tr class="memdesc:a226dbf99c1a48a45716dd7ef3c169c89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registration of an entity handler for a given type.  <a href="#a226dbf99c1a48a45716dd7ef3c169c89">More...</a><br /></td></tr>
<tr class="separator:a226dbf99c1a48a45716dd7ef3c169c89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcb921429d22daec5b4e0972274952be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#abcb921429d22daec5b4e0972274952be">RegisterEntityHandlerInjection</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, const <a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a> instanceIdPolicy, <a class="el" href="a00055.xhtml">Dob::EntityHandlerInjection</a> *const entityHandlerInjection) const </td></tr>
<tr class="memdesc:abcb921429d22daec5b4e0972274952be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Register an entity handler that also gets informed about injected entities.  <a href="#abcb921429d22daec5b4e0972274952be">More...</a><br /></td></tr>
<tr class="separator:abcb921429d22daec5b4e0972274952be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Pending (asynchronous) registration of entity handler.</div></td></tr>
<tr class="memitem:a064b89bcd382c58554a71ed16af0260e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a064b89bcd382c58554a71ed16af0260e">RegisterEntityHandlerPending</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, const <a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a> instanceIdPolicy, <a class="el" href="a00056.xhtml">Dob::EntityHandlerPending</a> *const entityHandlerPending) const </td></tr>
<tr class="memdesc:a064b89bcd382c58554a71ed16af0260e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pending registration of a handler for a given entity type.  <a href="#a064b89bcd382c58554a71ed16af0260e">More...</a><br /></td></tr>
<tr class="separator:a064b89bcd382c58554a71ed16af0260e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Non-pending (synchronous) registration of service handler.</div></td></tr>
<tr class="memitem:a542aaf7887a8f67e8a2ac84721b65cfc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a542aaf7887a8f67e8a2ac84721b65cfc">RegisterServiceHandler</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, <a class="el" href="a00155.xhtml">Dob::ServiceHandler</a> *const serviceHandler) const </td></tr>
<tr class="memdesc:a542aaf7887a8f67e8a2ac84721b65cfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Register a service handler for a given type.  <a href="#a542aaf7887a8f67e8a2ac84721b65cfc">More...</a><br /></td></tr>
<tr class="separator:a542aaf7887a8f67e8a2ac84721b65cfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Pending (asynchronous) registration of service handler.</div></td></tr>
<tr class="memitem:a70ee8157958a05e597702ccf7ff5236f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a70ee8157958a05e597702ccf7ff5236f">RegisterServiceHandlerPending</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, <a class="el" href="a00156.xhtml">Dob::ServiceHandlerPending</a> *const serviceHandlerPending) const </td></tr>
<tr class="memdesc:a70ee8157958a05e597702ccf7ff5236f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pending registration of a handler for a given service type.  <a href="#a70ee8157958a05e597702ccf7ff5236f">More...</a><br /></td></tr>
<tr class="separator:a70ee8157958a05e597702ccf7ff5236f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Unregistration</div></td></tr>
<tr class="memitem:a6677d6f683221b9864acb2d810fa4ad0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a6677d6f683221b9864acb2d810fa4ad0">UnregisterHandler</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId) const </td></tr>
<tr class="memdesc:a6677d6f683221b9864acb2d810fa4ad0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unregister of an entity handler or a service handler.  <a href="#a6677d6f683221b9864acb2d810fa4ad0">More...</a><br /></td></tr>
<tr class="separator:a6677d6f683221b9864acb2d810fa4ad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Message subscriptions</div></td></tr>
<tr class="memitem:aa20825d84c6fc421dc4c0dbfab28d511"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#aa20825d84c6fc421dc4c0dbfab28d511">SubscribeMessage</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;channelId, <a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const messageSubscriber) const </td></tr>
<tr class="memdesc:aa20825d84c6fc421dc4c0dbfab28d511"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up subscription for messages of a certain type and its subclasses.  <a href="#aa20825d84c6fc421dc4c0dbfab28d511">More...</a><br /></td></tr>
<tr class="separator:aa20825d84c6fc421dc4c0dbfab28d511"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55c84f440d16a43c2e95b5ba21240add"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a55c84f440d16a43c2e95b5ba21240add">SubscribeMessage</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;channelId, const bool includeSubclasses, <a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const messageSubscriber) const </td></tr>
<tr class="memdesc:a55c84f440d16a43c2e95b5ba21240add"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up subscription for messages of a certain type (additional parameters).  <a href="#a55c84f440d16a43c2e95b5ba21240add">More...</a><br /></td></tr>
<tr class="separator:a55c84f440d16a43c2e95b5ba21240add"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a748cf1069826d78f1e207ad6bd0183d7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a748cf1069826d78f1e207ad6bd0183d7">UnsubscribeMessage</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;channelId, <a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const messageSubscriber) const </td></tr>
<tr class="memdesc:a748cf1069826d78f1e207ad6bd0183d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove a message subscription made by the given subscriber.  <a href="#a748cf1069826d78f1e207ad6bd0183d7">More...</a><br /></td></tr>
<tr class="separator:a748cf1069826d78f1e207ad6bd0183d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb88906c3b0a7adeef13fe8bde39fc87"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#afb88906c3b0a7adeef13fe8bde39fc87">UnsubscribeMessage</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;channelId, const bool includeSubclasses, <a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const messageSubscriber) const </td></tr>
<tr class="memdesc:afb88906c3b0a7adeef13fe8bde39fc87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove a message subscription made by the given subscriber (additional parameters).  <a href="#afb88906c3b0a7adeef13fe8bde39fc87">More...</a><br /></td></tr>
<tr class="separator:afb88906c3b0a7adeef13fe8bde39fc87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Entity subscriptions</div></td></tr>
<tr class="memitem:a462f6ef64ce8b2b4fb37e76abe6dd820"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a462f6ef64ce8b2b4fb37e76abe6dd820">SubscribeEntity</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, <a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const entitySubscriber) const </td></tr>
<tr class="memdesc:a462f6ef64ce8b2b4fb37e76abe6dd820"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up subscription for instances of an entity type and its subclasses.  <a href="#a462f6ef64ce8b2b4fb37e76abe6dd820">More...</a><br /></td></tr>
<tr class="separator:a462f6ef64ce8b2b4fb37e76abe6dd820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80622d84d0bcbdb31afba469952cfeb6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a80622d84d0bcbdb31afba469952cfeb6">SubscribeEntity</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const bool includeUpdates, const bool includeSubclasses, const bool restartSubscription, <a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const entitySubscriber) const </td></tr>
<tr class="memdesc:a80622d84d0bcbdb31afba469952cfeb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subscription for an entity type (additional parameters).  <a href="#a80622d84d0bcbdb31afba469952cfeb6">More...</a><br /></td></tr>
<tr class="separator:a80622d84d0bcbdb31afba469952cfeb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a069b17f51d0308d22175456206437867"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a069b17f51d0308d22175456206437867">SubscribeEntity</a> (const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;entityId, const bool includeUpdates, const bool restartSubscription, <a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const entitySubscriber) const </td></tr>
<tr class="memdesc:a069b17f51d0308d22175456206437867"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up subscription for a specific instance of an entity type.  <a href="#a069b17f51d0308d22175456206437867">More...</a><br /></td></tr>
<tr class="separator:a069b17f51d0308d22175456206437867"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8893dd30472347e4be8d0e8a1890c25e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a8893dd30472347e4be8d0e8a1890c25e">UnsubscribeEntity</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, <a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const entitySubscriber) const </td></tr>
<tr class="memdesc:a8893dd30472347e4be8d0e8a1890c25e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove an entity subscription made by the given subscriber.  <a href="#a8893dd30472347e4be8d0e8a1890c25e">More...</a><br /></td></tr>
<tr class="separator:a8893dd30472347e4be8d0e8a1890c25e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b38492e63cab36c1668d65e194ac8d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a97b38492e63cab36c1668d65e194ac8d">UnsubscribeEntity</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const bool includeSubclasses, <a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const entitySubscriber) const </td></tr>
<tr class="memdesc:a97b38492e63cab36c1668d65e194ac8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove an entity subscription made by the given subscriber (additional parameters).  <a href="#a97b38492e63cab36c1668d65e194ac8d">More...</a><br /></td></tr>
<tr class="separator:a97b38492e63cab36c1668d65e194ac8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc52830ef581191ed5f8b9a073ca1b2b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#acc52830ef581191ed5f8b9a073ca1b2b">UnsubscribeEntity</a> (const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;entityId, <a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const entitySubscriber) const </td></tr>
<tr class="memdesc:acc52830ef581191ed5f8b9a073ca1b2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove an entity instance subscription made by the given subscriber.  <a href="#acc52830ef581191ed5f8b9a073ca1b2b">More...</a><br /></td></tr>
<tr class="separator:acc52830ef581191ed5f8b9a073ca1b2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Registration subscriptions</div></td></tr>
<tr class="memitem:aa70096b5bc078fc061dd73298dc8e6b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#aa70096b5bc078fc061dd73298dc8e6b6">SubscribeRegistration</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, const bool includeSubclasses, const bool restartSubscription, <a class="el" href="a00138.xhtml">Dob::RegistrationSubscriber</a> *const registrationSubscriber) const </td></tr>
<tr class="memdesc:aa70096b5bc078fc061dd73298dc8e6b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set up subscription for notifications about when a specific handler for an entity type or a service type is registered and unregistered.  <a href="#aa70096b5bc078fc061dd73298dc8e6b6">More...</a><br /></td></tr>
<tr class="separator:aa70096b5bc078fc061dd73298dc8e6b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52b5d9a13cba2ed9a1d32752dea8d9b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a52b5d9a13cba2ed9a1d32752dea8d9b9">UnsubscribeRegistration</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, const bool includeSubclasses, <a class="el" href="a00138.xhtml">Dob::RegistrationSubscriber</a> *const registrationSubscriber) const </td></tr>
<tr class="memdesc:a52b5d9a13cba2ed9a1d32752dea8d9b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a registration subscription.  <a href="#a52b5d9a13cba2ed9a1d32752dea8d9b9">More...</a><br /></td></tr>
<tr class="separator:a52b5d9a13cba2ed9a1d32752dea8d9b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Send messages</div></td></tr>
<tr class="memitem:aa0330ffbebcf68c1cc92fcbee9c50cc4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#aa0330ffbebcf68c1cc92fcbee9c50cc4">Send</a> (const <a class="el" href="a00322.xhtml#a1533a0e21d4871452b98112f9df219e2">Dob::MessagePtr</a> &amp;message, const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;channelId, <a class="el" href="a00102.xhtml">Dob::MessageSender</a> *const messageSender) const </td></tr>
<tr class="memdesc:aa0330ffbebcf68c1cc92fcbee9c50cc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a message on the specified channel.  <a href="#aa0330ffbebcf68c1cc92fcbee9c50cc4">More...</a><br /></td></tr>
<tr class="separator:aa0330ffbebcf68c1cc92fcbee9c50cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Requests</div></td></tr>
<tr class="memitem:a42975a43297f334877d5a6f48c3b5769"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a42975a43297f334877d5a6f48c3b5769">CreateRequest</a> (const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;request, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, <a class="el" href="a00139.xhtml">Dob::Requestor</a> *const requestor) const </td></tr>
<tr class="memdesc:a42975a43297f334877d5a6f48c3b5769"><td class="mdescLeft">&#160;</td><td class="mdescRight">Request to a handler to create an entity instance without specifying the instanceId.  <a href="#a42975a43297f334877d5a6f48c3b5769">More...</a><br /></td></tr>
<tr class="separator:a42975a43297f334877d5a6f48c3b5769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e3daeb3fc2589a36411176d5b65d01b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a6e3daeb3fc2589a36411176d5b65d01b">CreateRequest</a> (const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;request, const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;instanceId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, <a class="el" href="a00139.xhtml">Dob::Requestor</a> *const requestor) const </td></tr>
<tr class="memdesc:a6e3daeb3fc2589a36411176d5b65d01b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Request to a handler to create a specific entity instance.  <a href="#a6e3daeb3fc2589a36411176d5b65d01b">More...</a><br /></td></tr>
<tr class="separator:a6e3daeb3fc2589a36411176d5b65d01b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23d228c1801eda79159687d5a9685963"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a23d228c1801eda79159687d5a9685963">UpdateRequest</a> (const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;request, const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;instanceId, <a class="el" href="a00139.xhtml">Dob::Requestor</a> *const requestor) const </td></tr>
<tr class="memdesc:a23d228c1801eda79159687d5a9685963"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send an update request on an existing entity instance.  <a href="#a23d228c1801eda79159687d5a9685963">More...</a><br /></td></tr>
<tr class="separator:a23d228c1801eda79159687d5a9685963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca191e4e933b3c20a2e303f340a255c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#aca191e4e933b3c20a2e303f340a255c8">DeleteRequest</a> (const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;entityId, <a class="el" href="a00139.xhtml">Dob::Requestor</a> *const requestor) const </td></tr>
<tr class="memdesc:aca191e4e933b3c20a2e303f340a255c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a delete request on an existing entity instance.  <a href="#aca191e4e933b3c20a2e303f340a255c8">More...</a><br /></td></tr>
<tr class="separator:aca191e4e933b3c20a2e303f340a255c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669b5f791ef9b3aec8772fef7438cc89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a669b5f791ef9b3aec8772fef7438cc89">ServiceRequest</a> (const <a class="el" href="a00322.xhtml#aa2ef0209c77f52caf77d0a1252c3500a">Dob::ServicePtr</a> &amp;request, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, <a class="el" href="a00139.xhtml">Dob::Requestor</a> *const requestor) const </td></tr>
<tr class="memdesc:a669b5f791ef9b3aec8772fef7438cc89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a request to the given service handler.  <a href="#a669b5f791ef9b3aec8772fef7438cc89">More...</a><br /></td></tr>
<tr class="separator:a669b5f791ef9b3aec8772fef7438cc89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Entity Owners</div></td></tr>
<tr class="memitem:a6ae7aafd9b118cb67d7c2902472e0b38"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a6ae7aafd9b118cb67d7c2902472e0b38">SetChanges</a> (const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;entity, const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;instanceId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId) const </td></tr>
<tr class="memdesc:a6ae7aafd9b118cb67d7c2902472e0b38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Merge the changed members of an entity straight into the pool (the given handler must be the owner).  <a href="#a6ae7aafd9b118cb67d7c2902472e0b38">More...</a><br /></td></tr>
<tr class="separator:a6ae7aafd9b118cb67d7c2902472e0b38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13d42f58c4bfdcb7948888511d38a684"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a13d42f58c4bfdcb7948888511d38a684">SetAll</a> (const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;entity, const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;instanceId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId) const </td></tr>
<tr class="memdesc:a13d42f58c4bfdcb7948888511d38a684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows an entity handler to create or update an entity.  <a href="#a13d42f58c4bfdcb7948888511d38a684">More...</a><br /></td></tr>
<tr class="separator:a13d42f58c4bfdcb7948888511d38a684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae350be8d40a3d312ea727decfae37f32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#ae350be8d40a3d312ea727decfae37f32">Delete</a> (const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;entityId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId) const </td></tr>
<tr class="memdesc:ae350be8d40a3d312ea727decfae37f32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows an entity handler to delete a specific owned entity instance.  <a href="#ae350be8d40a3d312ea727decfae37f32">More...</a><br /></td></tr>
<tr class="separator:ae350be8d40a3d312ea727decfae37f32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2020dc98de6c647a4eff86123794f13e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a2020dc98de6c647a4eff86123794f13e">DeleteAllInstances</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId) const </td></tr>
<tr class="memdesc:a2020dc98de6c647a4eff86123794f13e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows an entity handler to delete all owned instances.  <a href="#a2020dc98de6c647a4eff86123794f13e">More...</a><br /></td></tr>
<tr class="separator:a2020dc98de6c647a4eff86123794f13e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Get iterators</div></td></tr>
<tr class="memitem:a2cb4a094727a4090b111ee5ab0976f95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00060.xhtml">Dob::EntityIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a2cb4a094727a4090b111ee5ab0976f95">GetEntityIterator</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const bool includeSubclasses) const </td></tr>
<tr class="memdesc:a2cb4a094727a4090b111ee5ab0976f95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retreives an STL compliant iterator to iterate over created instances.  <a href="#a2cb4a094727a4090b111ee5ab0976f95">More...</a><br /></td></tr>
<tr class="separator:a2cb4a094727a4090b111ee5ab0976f95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Read operations</div></td></tr>
<tr class="memitem:ac6324804f12ec65f3bf10a08dc3ac906"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a00061.xhtml">Dob::EntityProxy</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#ac6324804f12ec65f3bf10a08dc3ac906">Read</a> (const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;entityId) const </td></tr>
<tr class="memdesc:ac6324804f12ec65f3bf10a08dc3ac906"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read an entity from the distributed object pool.  <a href="#ac6324804f12ec65f3bf10a08dc3ac906">More...</a><br /></td></tr>
<tr class="separator:ac6324804f12ec65f3bf10a08dc3ac906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7223140c5503aa801013ee734a8b1564"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a7223140c5503aa801013ee734a8b1564">IsCreated</a> (const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;entityId) const </td></tr>
<tr class="memdesc:a7223140c5503aa801013ee734a8b1564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an instance of an entity is created or not.  <a href="#a7223140c5503aa801013ee734a8b1564">More...</a><br /></td></tr>
<tr class="separator:a7223140c5503aa801013ee734a8b1564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d079f15892425be9bba1b90602d9417"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00324.xhtml#a82357c789f9fee9d69beaf1993e4f20c">Dob::Typesystem::Int64</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a7d079f15892425be9bba1b90602d9417">GetNumberOfInstances</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId, const bool includeSubclasses) const </td></tr>
<tr class="memdesc:a7d079f15892425be9bba1b90602d9417"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is used to get the number of instances of an entity that exists.  <a href="#a7d079f15892425be9bba1b90602d9417">More...</a><br /></td></tr>
<tr class="separator:a7d079f15892425be9bba1b90602d9417"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fe8b9a9604408d1180c33eb2b3b1b92"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a0fe8b9a9604408d1180c33eb2b3b1b92">GetInstanceIdPolicy</a> (const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a> typeId, const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;handlerId) const </td></tr>
<tr class="memdesc:a0fe8b9a9604408d1180c33eb2b3b1b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is used to get the instanceIdPolicy for a specific class and handler.  <a href="#a0fe8b9a9604408d1180c33eb2b3b1b92">More...</a><br /></td></tr>
<tr class="separator:a0fe8b9a9604408d1180c33eb2b3b1b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Exit dispatch</div></td></tr>
<tr class="memitem:aaa3d36d36de10aa929e45555a0e1c369"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#aaa3d36d36de10aa929e45555a0e1c369">ExitDispatch</a> () const </td></tr>
<tr class="memdesc:aaa3d36d36de10aa929e45555a0e1c369"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interrupt the ongoing Dispatch even if all data to the application have not been distpatched.  <a href="#aaa3d36d36de10aa929e45555a0e1c369">More...</a><br /></td></tr>
<tr class="separator:aaa3d36d36de10aa929e45555a0e1c369"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a986eb6556b3408bd10382555c243af1b"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.xhtml#a986eb6556b3408bd10382555c243af1b">ConnectionAspectBase</a></td></tr>
<tr class="separator:a986eb6556b3408bd10382555c243af1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Common base class for connections to the DOB. </p>
<p>There are methods for setting up subscription, register handlers, set and delete entities etc. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1ea3315feba4e5901666b95c77b05de5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Safir::Dob::ConnectionBase::ConnectionBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a class="anchor" id="a4e38491c4598c50cacdfa127942a8fcd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Safir::Dob::ConnectionBase::~ConnectionBase </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a42975a43297f334877d5a6f48c3b5769"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a> Safir::Dob::ConnectionBase::CreateRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.xhtml">Dob::Requestor</a> *const&#160;</td>
          <td class="paramname"><em>requestor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Request to a handler to create an entity instance without specifying the instanceId. </p>
<p>If the handler is registered as "HandlerDecidesInstanceId" the InstanceId of the entity to be created is determined by the application, and the requestor is told which InstanceId will be used by the <a class="el" href="a00058.xhtml" title="Standard response for handlers registered as HandlerDecidesInstanceId, containing the instance that t...">EntityIdResponse</a>. If the handler is registered as "RequestorDecidesInstanceId" an InstanceId will be randomly generated and included in the request. This InstanceId <em>must</em> be used by the handler as the new instance number.</p>
<p>The application must be prepared to handle the situation that the outgoing send queue is full (<a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">OverflowException</a> is thrown). In this case the application is responsible for resending of the create request. When the overflow situation is dissolved, the application is notified by the <a class="el" href="a00139.xhtml#a2ff58866f39cf6ee44a5e80b8fb2feff" title="Called to indicate that it is meningful to make a retry after an overflow situation. ">Requestor::OnNotRequestOverflow</a> callback, which should trig the resending.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">request</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> requested to be created. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requestor</td><td><a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> for response and notification about overflow status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Request id that can be used to match sent request with the response.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">Safir::Dob::OverflowException</a></td><td>There was an overflow when sending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6e3daeb3fc2589a36411176d5b65d01b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a> Safir::Dob::ConnectionBase::CreateRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;&#160;</td>
          <td class="paramname"><em>instanceId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.xhtml">Dob::Requestor</a> *const&#160;</td>
          <td class="paramname"><em>requestor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Request to a handler to create a specific entity instance. </p>
<p>If the handler is registered as "RequestorDecidesInstanceId" the <a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> must specify which instance is to be created. (If it doesnt care it can use the method above that will generate one randomly.) If the <a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> wants a random instance, but needs to know which instance will get created it can use Dob:Typesystem:InstanceId::GenerateRandom() to generate an InstanceId to pass to this method</p>
<p>Note that it is illegal to call this method if the handler is registered as "HandlerDecidesInstanceId".</p>
<p>The application must be prepared to handle the situation that the outgoing send queue is full (<a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">OverflowException</a> is thrown). In this case the application is responsible for resending of the entity create request. When the overflow situation is dissolved, the application is notified by the <a class="el" href="a00139.xhtml#a2ff58866f39cf6ee44a5e80b8fb2feff" title="Called to indicate that it is meningful to make a retry after an overflow situation. ">Requestor::OnNotRequestOverflow</a> callback, which should trig the resending.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">request</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> requested to be created. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceId</td><td>Instance id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requestor</td><td><a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> for response and notification about overflow status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Request id that can be used to match sent request with the response.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">Safir::Dob::OverflowException</a></td><td>There was an overflow when sending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae350be8d40a3d312ea727decfae37f32"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::Delete </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;&#160;</td>
          <td class="paramname"><em>entityId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows an entity handler to delete a specific owned entity instance. </p>
<p>Used to delete a specific owned instance. Does nothing if the instance does not exist.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entityId</td><td>Id of the entity to delete. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id.</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00003.xhtml" title="Thrown when not owner tries to set/delete an entity. ">Safir::Dob::AccessDeniedException</a></td><td>The instance is owned by another handler. </td></tr>
    <tr><td class="paramname"><a class="el" href="a00084.xhtml" title="Thrown when an injection handler tries to set/delete an entity for which there is a ghost instance th...">Safir::Dob::GhostExistsException</a></td><td>There is a ghost instance that hasn't been injected. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2020dc98de6c647a4eff86123794f13e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::DeleteAllInstances </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows an entity handler to delete all owned instances. </p>
<p>Used to delete all instances owned by the caller.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aca191e4e933b3c20a2e303f340a255c8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a> Safir::Dob::ConnectionBase::DeleteRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;&#160;</td>
          <td class="paramname"><em>entityId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.xhtml">Dob::Requestor</a> *const&#160;</td>
          <td class="paramname"><em>requestor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a delete request on an existing entity instance. </p>
<p>A delete request will be sent to the handler that owns (has created) the entity.</p>
<p>The application must be prepared to handle the situation that the outgoing send queue is full (<a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">OverflowException</a> is thrown). In this case the application is responsible for resending of the entity delete request. When the overflow situation is dissolved, the application is notified by the <a class="el" href="a00139.xhtml#a2ff58866f39cf6ee44a5e80b8fb2feff" title="Called to indicate that it is meningful to make a retry after an overflow situation. ">Requestor::OnNotRequestOverflow</a> callback, which should trig the resending.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entityId</td><td>EntityId of the entity to be deleted. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requestor</td><td><a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> for response and notification about overflow status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Request id that can be used to match sent request with the response.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">Safir::Dob::OverflowException</a></td><td>There was an overflow when sending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aaa3d36d36de10aa929e45555a0e1c369"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::ExitDispatch </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interrupt the ongoing Dispatch even if all data to the application have not been distpatched. </p>
<p>The dispatch-event will be automatically set to trigger a new Dispatch again. This can be used to ensure that too much time is not spent dispatching in a time-critical app. </p>

</div>
</div>
<a class="anchor" id="a2cb4a094727a4090b111ee5ab0976f95"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00060.xhtml">Dob::EntityIterator</a> Safir::Dob::ConnectionBase::GetEntityIterator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retreives an STL compliant iterator to iterate over created instances. </p>
<p>The iterator addresses the first created entity instance of the given type. If there are no created instances an iterator representing "end" will be returned.</p>
<p>Example use: for (<a class="el" href="a00060.xhtml" title="A STL conformant forward iterator used to traverse entity instances. ">EntityIterator</a> it = m_connection.GetEntityIterator(Entity::ClassTypeId,true); it != <a class="el" href="a00060.xhtml" title="A STL conformant forward iterator used to traverse entity instances. ">Safir::Dob::EntityIterator()</a>; ++it) { do something with it. }</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> type. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Iterate over subclass instances False =&gt; No subclasses will be included. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0fe8b9a9604408d1180c33eb2b3b1b92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a> Safir::Dob::ConnectionBase::GetInstanceIdPolicy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This method is used to get the instanceIdPolicy for a specific class and handler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>The type of the class the handler is registered for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Get instanceIdPolicy for this handler. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>instanceIdPolicy Specifies if the handler expects instance ids in create requests to be assigned by the requestor or if the handler assigns them by itself.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00107.xhtml" title="Thrown when eg GetFreeInstance can not find a free instance. ">Safir::Dob::NotFoundException</a></td><td>The given handlerId has not registered the given class. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7d079f15892425be9bba1b90602d9417"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00324.xhtml#a82357c789f9fee9d69beaf1993e4f20c">Dob::Typesystem::Int64</a> Safir::Dob::ConnectionBase::GetNumberOfInstances </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This method is used to get the number of instances of an entity that exists. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>The type of the class whose instances we're counting. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Count only instances owned by this handler (use HandlerId::ALL_HANDLERS to get all handlers). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>Include subclasses when counting instances. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7223140c5503aa801013ee734a8b1564"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Safir::Dob::ConnectionBase::IsCreated </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;&#160;</td>
          <td class="paramname"><em>entityId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an instance of an entity is created or not. </p>
<p>This method will return true if the given entity instance is created.</p>
<p>Note that the only time that you can really trust this information is if you're the one that has created the entity instance and no one is overregistering a handler with the same id as yours. Otherwise there is no guarantee that the instance still is created immediately after this call. The owner may be deleting it right after you asked, or your handler may have been revoked but you have not yet received a Revoke status. Use with care!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entityId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> instance to check existence of. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the entity instance is created, otherwise false. </dd></dl>

</div>
</div>
<a class="anchor" id="a3f75bb234da260aa156fa1a04b00ec0f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Safir::Dob::ConnectionBase::IsOpen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tells if the connection is opened. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the connection is open, otherwise false. </dd></dl>

<p>Implemented in <a class="el" href="a00024.xhtml#a3271fe5ffd1973cf9b143317c6ae0236">Safir::Dob::Connection</a>, and <a class="el" href="a00151.xhtml#af46624bc26a9b345928c169f79114904">Safir::Dob::SecondaryConnection</a>.</p>

</div>
</div>
<a class="anchor" id="ac6324804f12ec65f3bf10a08dc3ac906"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a00061.xhtml">Dob::EntityProxy</a> Safir::Dob::ConnectionBase::Read </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;&#160;</td>
          <td class="paramname"><em>entityId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read an entity from the distributed object pool. </p>
<p>Gets the current version of the entity that matches the given entity id.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entityId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> id of the entity to read.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> read from the distributed object pool.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00107.xhtml" title="Thrown when eg GetFreeInstance can not find a free instance. ">Safir::Dob::NotFoundException</a></td><td>The specified instance of the entity does not exist. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a226dbf99c1a48a45716dd7ef3c169c89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::RegisterEntityHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a>&#160;</td>
          <td class="paramname"><em>instanceIdPolicy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00054.xhtml">Dob::EntityHandler</a> *const&#160;</td>
          <td class="paramname"><em>entityHandler</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Registration of an entity handler for a given type. </p>
<p>Used to make a non-pending registration for a handler for a given type. Upon return from this method the given handler is guaranteed to be registered. (Any existing handler with the same id will be revoked.)</p>
<p>This is the preferred registration method to be used for a handler that has no need to get external entity injections (for example when there is no redundancy).</p>
<p>There can be any number of registered handlers for a type as long as each handler has a unique id.</p>
<p>Note that if you have a configuration where more than one application (connection) is registering the same type/handler, your own registration can still be revoked by another application.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> type to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceIdPolicy</td><td>Specifies if the handler expects instance ids in create requests to be assigned by the requestor (normal case) or if the handler assigns them by itself. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entityHandler</td><td>Callback consumer object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abcb921429d22daec5b4e0972274952be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::RegisterEntityHandlerInjection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a>&#160;</td>
          <td class="paramname"><em>instanceIdPolicy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00055.xhtml">Dob::EntityHandlerInjection</a> *const&#160;</td>
          <td class="paramname"><em>entityHandlerInjection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Register an entity handler that also gets informed about injected entities. </p>
<p>Used to make a non-pending registration for a handler for a given type when the handler also needs to be informed when an entity instance is about to be injected in the system. Upon return from this method the given handler is guaranteed to be registered.</p>
<p>There are two typical cases when entities are injected outside the control of a registered handler:</p>
<ul>
<li>Reception of persistent entity instances. </li>
<li>Reception of entity instances from an external system installation (multi-owned entities).</li>
</ul>
<p>After registration, any persistent data will be transfered to the handler via <a class="el" href="a00059.xhtml#a4ef8e79e21ea2322aa2aff86b1ca3c03" title="Called when a new entity is about to be injected in the system. ">EntityInjectionBase::OnInjectedNewEntity</a> callbacks. When all persistent data have been transfered the handler is notified by the callback <a class="el" href="a00059.xhtml#a6f3e0b332aa8e02666f7e7e80d4ada77" title="Indicates that all initial injection data has been transfered to the handler. ">EntityInjectionBase::OnInitialInjectionsDone</a>. This callback is guaranteed to be invoked even when there is no persistent data at all.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> type to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceIdPolicy</td><td>Specifies if the handler expects instance ids in create requests to be assigned by the requestor (normal case) or if the handler assigns them by itself. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entityHandlerInjection</td><td>Callback consumer object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a064b89bcd382c58554a71ed16af0260e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::RegisterEntityHandlerPending </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00093.xhtml#af41ceb16c75d8f5caebb4962f66423cf">Dob::InstanceIdPolicy::Enumeration</a>&#160;</td>
          <td class="paramname"><em>instanceIdPolicy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00056.xhtml">Dob::EntityHandlerPending</a> *const&#160;</td>
          <td class="paramname"><em>entityHandlerPending</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pending registration of a handler for a given entity type. </p>
<p>Used to make a pending registration of a handler for a given type. Upon return from this method the given handler is registered as pending. In case an existing handler with the same handler id isn't already registered the <a class="el" href="a00322.xhtml" title="This namespace contains all functionality of the DOB (Components DOSE and DOTS). ">Dob</a> will immediately promote this handler to be the registered one.</p>
<p>The consumer is informed via callbacks of any change of the registration status (Completed or Revoked).</p>
<p>This method is to be used by applications that handles redundancy. The typical scenario is that two or more application instances make a pending registration with the same handler id. The <a class="el" href="a00322.xhtml" title="This namespace contains all functionality of the DOB (Components DOSE and DOTS). ">Dob</a> will assure that one of the handlers is promoted to registered and all others are pending. If there are several types involved in the redundancy switch it is often the case that you want just one application (the active one) to have all types registered. To achieve this, all applications make a pending registration for one of the types. The application that receives the Completed status then makes a non-pending registration for the remaining types using method <a class="el" href="a00029.xhtml#a226dbf99c1a48a45716dd7ef3c169c89" title="Registration of an entity handler for a given type. ">RegisterEntityHandler()</a> (or <a class="el" href="a00029.xhtml#abcb921429d22daec5b4e0972274952be" title="Register an entity handler that also gets informed about injected entities. ">RegisterEntityHandlerInjection()</a>).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> type to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceIdPolicy</td><td>Specifies if the handler expects instance ids in create requests to be assigned by the requestor (normal case) or if the handler assigns them by itself. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entityHandlerPending</td><td>Callback consumer object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a542aaf7887a8f67e8a2ac84721b65cfc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::RegisterServiceHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00155.xhtml">Dob::ServiceHandler</a> *const&#160;</td>
          <td class="paramname"><em>serviceHandler</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Register a service handler for a given type. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="a00029.xhtml#a226dbf99c1a48a45716dd7ef3c169c89" title="Registration of an entity handler for a given type. ">RegisterEntityHandler</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00154.xhtml" title="The baseclass for all services. ">Service</a> type to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">serviceHandler</td><td>Callback consumer object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a70ee8157958a05e597702ccf7ff5236f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::RegisterServiceHandlerPending </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00156.xhtml">Dob::ServiceHandlerPending</a> *const&#160;</td>
          <td class="paramname"><em>serviceHandlerPending</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pending registration of a handler for a given service type. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="a00029.xhtml#a064b89bcd382c58554a71ed16af0260e" title="Pending registration of a handler for a given entity type. ">RegisterEntityHandlerPending</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td><a class="el" href="a00154.xhtml" title="The baseclass for all services. ">Service</a> type to register. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">serviceHandlerPending</td><td>Callback consumer object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa0330ffbebcf68c1cc92fcbee9c50cc4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::Send </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#a1533a0e21d4871452b98112f9df219e2">Dob::MessagePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;&#160;</td>
          <td class="paramname"><em>channelId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00102.xhtml">Dob::MessageSender</a> *const&#160;</td>
          <td class="paramname"><em>messageSender</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a message on the specified channel. </p>
<p>The application must be prepared to handle the situation that the outgoing send queue is full (<a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">OverflowException</a> is thrown). In this case the application is responsible for resending the message. When the overflow situation is dissolved, the application is notified by the <a class="el" href="a00102.xhtml#a2be41efa51f7027d4f505085bc4a1137" title="Called to indicate that it is meningful to make a retry after an overflow situation. ">MessageSender::OnNotMessageOverflow</a> callback, which should trig the resending.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">message</td><td><a class="el" href="a00100.xhtml" title="The baseclass for all messages. ">Message</a> to send. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channelId</td><td>Channel id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">messageSender</td><td><a class="el" href="a00102.xhtml" title="Interface to be implemented by senders of messages. ">MessageSender</a> for notification about overflow status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">Safir::Dob::OverflowException</a></td><td>There was an overflow when sending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a669b5f791ef9b3aec8772fef7438cc89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a> Safir::Dob::ConnectionBase::ServiceRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#aa2ef0209c77f52caf77d0a1252c3500a">Dob::ServicePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.xhtml">Dob::Requestor</a> *const&#160;</td>
          <td class="paramname"><em>requestor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a request to the given service handler. </p>
<p>The application must be prepared to handle the situation that the outgoing send queue is full (<a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">OverflowException</a> is thrown). In this case the application is responsible for resending of the service request. When the overflow situation is dissolved, the application is notified by the <a class="el" href="a00139.xhtml#a2ff58866f39cf6ee44a5e80b8fb2feff" title="Called to indicate that it is meningful to make a retry after an overflow situation. ">Requestor::OnNotRequestOverflow</a> callback, which should trig the resending.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">request</td><td>The service request. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td><a class="el" href="a00154.xhtml" title="The baseclass for all services. ">Service</a> handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requestor</td><td><a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> for service response and notification about overflow status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Request id that can be used to match sent request with the response.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">Safir::Dob::OverflowException</a></td><td>There was an overflow when sending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a13d42f58c4bfdcb7948888511d38a684"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SetAll </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>entity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;&#160;</td>
          <td class="paramname"><em>instanceId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows an entity handler to create or update an entity. </p>
<p>A call to SetAll will replace all members of any existing entity with the given entity. I.e. the DOB will not merge the changes with any existing data, but will instead completely replace the old data. Use the <a class="el" href="a00029.xhtml#a6ae7aafd9b118cb67d7c2902472e0b38" title="Merge the changed members of an entity straight into the pool (the given handler must be the owner)...">SetChanges()</a> method to make the DOB merge the data into the pool.</p>
<p>Special care must be taken when the owner sets an entity that contains pointers (<a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> ids) to other entity instances, and the lifetime of the pointed-to instance is completly connected to the lifetime of the referer. In this case the owner must traverse the object-graph and any unreferenced instance must be deleted.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entity</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> to create or update. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceId</td><td>Instance id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id.</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00003.xhtml" title="Thrown when not owner tries to set/delete an entity. ">Safir::Dob::AccessDeniedException</a></td><td>The instance is owned by another handler. </td></tr>
    <tr><td class="paramname"><a class="el" href="a00084.xhtml" title="Thrown when an injection handler tries to set/delete an entity for which there is a ghost instance th...">Safir::Dob::GhostExistsException</a></td><td>There is a ghost instance that hasn't been injected. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6ae7aafd9b118cb67d7c2902472e0b38"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SetChanges </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>entity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;&#160;</td>
          <td class="paramname"><em>instanceId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Merge the changed members of an entity straight into the pool (the given handler must be the owner). </p>
<p>All members of the given entity that are marked as changed will be merged into the current object in the pool. If the object is not already set in the pool the entity will be set without any merging.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entity</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> to create or update. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceId</td><td>Instance id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id.</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00003.xhtml" title="Thrown when not owner tries to set/delete an entity. ">Safir::Dob::AccessDeniedException</a></td><td>The instance is owned by another handler. </td></tr>
    <tr><td class="paramname"><a class="el" href="a00084.xhtml" title="Thrown when an injection handler tries to set/delete an entity for which there is a ghost instance th...">Safir::Dob::GhostExistsException</a></td><td>There is a ghost instance that hasn't been injected. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a462f6ef64ce8b2b4fb37e76abe6dd820"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SubscribeEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const&#160;</td>
          <td class="paramname"><em>entitySubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up subscription for instances of an entity type and its subclasses. </p>
<p>The subscriber will receive information about creations, updates and deletes of instances of the given entity type and its subclasses.</p>
<p>When setting up a subscription the user will get initial data for existing entity instances in the form of OnNewEntity callbacks. This is true even when setting up a subscription for an already subscribed entity.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the entity to subscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entitySubscriber</td><td><a class="el" href="a00064.xhtml" title="Interface to be implemented by subscribers of entities. ">EntitySubscriber</a> that will receive the entities. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a80622d84d0bcbdb31afba469952cfeb6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SubscribeEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeUpdates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>restartSubscription</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const&#160;</td>
          <td class="paramname"><em>entitySubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Subscription for an entity type (additional parameters). </p>
<p>Overloaded method that gives the user the ability to a determine more details conscerning the subscription.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the entity to subscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeUpdates</td><td>True =&gt; Subscription includes update, as well as create and delete. False =&gt; Subscription includes no updates, only create and deletion. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Subscription for this entity type and all its subclasses. False =&gt; No subclasses will be included. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">restartSubscription</td><td>True=&gt; OnNewEntity callbacks are generated even if the subscription already exists. False=&gt; OnNewEntity callbacks are generated only for instances that are not previously subscribed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entitySubscriber</td><td><a class="el" href="a00064.xhtml" title="Interface to be implemented by subscribers of entities. ">EntitySubscriber</a> that will receive the entities. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a069b17f51d0308d22175456206437867"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SubscribeEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;&#160;</td>
          <td class="paramname"><em>entityId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeUpdates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>restartSubscription</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const&#160;</td>
          <td class="paramname"><em>entitySubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up subscription for a specific instance of an entity type. </p>
<p>When setting up a subscription the user will get initial data in the form of a OnNewEntity callback with the current state for the subscribed entity (if created).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entityId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> id of the entity to subscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeUpdates</td><td>True =&gt; Subscription includes update, as well as create and delete. False =&gt; Subscription includes no updates, only create and deletion. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">restartSubscription</td><td>True=&gt; An OnNewEntity callback will be generated even if the subscription already exists. False=&gt; An OnNewEntity callback is generated only if the instance is not previously subscribed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entitySubscriber</td><td><a class="el" href="a00064.xhtml" title="Interface to be implemented by subscribers of entities. ">EntitySubscriber</a> that will receive the entities. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa20825d84c6fc421dc4c0dbfab28d511"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SubscribeMessage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;&#160;</td>
          <td class="paramname"><em>channelId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const&#160;</td>
          <td class="paramname"><em>messageSubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up subscription for messages of a certain type and its subclasses. </p>
<p>The subscriber can subscribe for messages sent on a specific cannel, or by using the constant <a class="el" href="a00017.xhtml#a041bc531067838f924960cd6c0df2ca4" title="Constant representing all channels. ">Dob::Typesystem::ChannelId::ALL_CHANNELS</a>, subscribe for all messages of the given type regardless of the channel id set by the sender.</p>
<p>Calling this method is identical to calling the SubscribeMessage below with includeSubclasses = true.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the message to subscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channelId</td><td>Channel id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">messageSubscriber</td><td><a class="el" href="a00103.xhtml" title="Interface to be implemented by subscribers of messages. ">MessageSubscriber</a> that will receive the messages. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55c84f440d16a43c2e95b5ba21240add"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SubscribeMessage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;&#160;</td>
          <td class="paramname"><em>channelId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const&#160;</td>
          <td class="paramname"><em>messageSubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up subscription for messages of a certain type (additional parameters). </p>
<p>Overloaded method that gives the user the ability to determine if the subscription also will include subsclasses.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the message or to subscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channelId</td><td>Channel id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Subscription for this message type and all its subclasses. False =&gt; No subclasses will be included. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">messageSubscriber</td><td><a class="el" href="a00103.xhtml" title="Interface to be implemented by subscribers of messages. ">MessageSubscriber</a> that will receive the messages. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa70096b5bc078fc061dd73298dc8e6b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::SubscribeRegistration </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>restartSubscription</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00138.xhtml">Dob::RegistrationSubscriber</a> *const&#160;</td>
          <td class="paramname"><em>registrationSubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set up subscription for notifications about when a specific handler for an entity type or a service type is registered and unregistered. </p>
<p>Using the constant <a class="el" href="a00085.xhtml#a5cb0b3ed70968d28eeb6a9b4d752b4a8" title="Constant representing all handlers. ">Dob::Typesystem::HandlerId::ALL_HANDLERS</a> means that the subscriber will receive registrations/unregistrations of any handler for the given type.</p>
<p>Using a specific handler id means that the subscriber will receive only the registrations/unregistrations of the specified handler.</p>
<p>When setting up a subscription the user will get initial information about existing handlers via OnRegistered callbacks.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of entity or service. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Subscription for this entity type or service type and all its subclasses. False =&gt; No subclasses will be included. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">restartSubscription</td><td>True=&gt; OnRegistered callbacks are generated even if the subscription already exists. False=&gt; OnRegistered callbacks are generated only for handlers that are not previously subscribed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">registrationSubscriber</td><td><a class="el" href="a00138.xhtml" title="Interface to be implemented by subscribers of handler registrations. ">RegistrationSubscriber</a> that will receive the subscription response. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6677d6f683221b9864acb2d810fa4ad0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnregisterHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unregister of an entity handler or a service handler. </p>
<p>Any created entity instance owned by the given handler will be deleted.</p>
<p>This method can also be used to unregister a pending handler.</p>
<p>Using the constant <a class="el" href="a00085.xhtml#a5cb0b3ed70968d28eeb6a9b4d752b4a8" title="Constant representing all handlers. ">Dob::Typesystem::HandlerId::ALL_HANDLERS</a> means that all handlers for the given type, registered by this connection, will be unregistered.</p>
<p>If the given handler isn't registered the call will be ignored.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the entity or service to unregister. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8893dd30472347e4be8d0e8a1890c25e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnsubscribeEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const&#160;</td>
          <td class="paramname"><em>entitySubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove an entity subscription made by the given subscriber. </p>
<p>Removes the subscription for the given type and its subclasses.</p>
<p>If no subscription exists the call will be ignored.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the entity to unsubscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entitySubscriber</td><td>The <a class="el" href="a00064.xhtml" title="Interface to be implemented by subscribers of entities. ">EntitySubscriber</a> consumer that was used when the subscription was initiated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a97b38492e63cab36c1668d65e194ac8d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnsubscribeEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const&#160;</td>
          <td class="paramname"><em>entitySubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove an entity subscription made by the given subscriber (additional parameters). </p>
<p>Overloaded method that gives the user the ability to determine if unsubscription also will include subsclasses..</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the entity to unsubscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Unsubscribe for this entity type and all its subclasses. False =&gt; Unsubscribe for just this type (no subclasses). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entitySubscriber</td><td>The <a class="el" href="a00064.xhtml" title="Interface to be implemented by subscribers of entities. ">EntitySubscriber</a> consumer that was used when the subscription was initiated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acc52830ef581191ed5f8b9a073ca1b2b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnsubscribeEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00057.xhtml">Dob::Typesystem::EntityId</a> &amp;&#160;</td>
          <td class="paramname"><em>entityId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00064.xhtml">Dob::EntitySubscriber</a> *const&#160;</td>
          <td class="paramname"><em>entitySubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove an entity instance subscription made by the given subscriber. </p>
<p>If no subscription exists the call will be ignored.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">entityId</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> id of the entity instance. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">entitySubscriber</td><td>The <a class="el" href="a00064.xhtml" title="Interface to be implemented by subscribers of entities. ">EntitySubscriber</a> consumer that was used when the subscription was initiated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a748cf1069826d78f1e207ad6bd0183d7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnsubscribeMessage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;&#160;</td>
          <td class="paramname"><em>channelId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const&#160;</td>
          <td class="paramname"><em>messageSubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove a message subscription made by the given subscriber. </p>
<p>Removes the subscription for the given type and its subclasses.</p>
<p>Using the constant <a class="el" href="a00017.xhtml#a041bc531067838f924960cd6c0df2ca4" title="Constant representing all channels. ">Dob::Typesystem::ChannelId::ALL_CHANNELS</a> means that all subscriptions for the given type and its subclasses will be removed.</p>
<p>If no subscription exists the call will be ignored.</p>
<p>Calling this method is identical to calling the UnsubscribeMessage below with includeSubclasses = true.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the message to unsubscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channelId</td><td>Channel id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">messageSubscriber</td><td>The <a class="el" href="a00103.xhtml" title="Interface to be implemented by subscribers of messages. ">MessageSubscriber</a> consumer that was used when the subscription was initiated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afb88906c3b0a7adeef13fe8bde39fc87"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnsubscribeMessage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00017.xhtml">Dob::Typesystem::ChannelId</a> &amp;&#160;</td>
          <td class="paramname"><em>channelId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00103.xhtml">Dob::MessageSubscriber</a> *const&#160;</td>
          <td class="paramname"><em>messageSubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove a message subscription made by the given subscriber (additional parameters). </p>
<p>Overloaded method that gives the user the ability to determine if unsubscription also will include subsclasses.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of the message to unsubscribe for. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">channelId</td><td>Channel id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Unsubscribe for this message type and all its subclasses. False =&gt; No subclasses will be included. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">messageSubscriber</td><td>The <a class="el" href="a00103.xhtml" title="Interface to be implemented by subscribers of messages. ">MessageSubscriber</a> consumer that was used when the subscription was initiated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a52b5d9a13cba2ed9a1d32752dea8d9b9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::ConnectionBase::UnsubscribeRegistration </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00324.xhtml#add598341f70c143ad35a701a65884214">Dob::Typesystem::TypeId</a>&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00085.xhtml">Dob::Typesystem::HandlerId</a> &amp;&#160;</td>
          <td class="paramname"><em>handlerId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>includeSubclasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00138.xhtml">Dob::RegistrationSubscriber</a> *const&#160;</td>
          <td class="paramname"><em>registrationSubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes a registration subscription. </p>
<p>Using the constant <a class="el" href="a00085.xhtml#a5cb0b3ed70968d28eeb6a9b4d752b4a8" title="Constant representing all handlers. ">Dob::Typesystem::HandlerId::ALL_HANDLERS</a> means that all registration subscriptions, for the given type id and consumer, are removed.</p>
<p>If no subscription exists the call will be ignored.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">typeId</td><td>Type id of entity or service. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">handlerId</td><td>Handler id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeSubclasses</td><td>True =&gt; Unsubscribe for this entity type or service type and all its subclasses. False =&gt; No subclasses will be included. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">registrationSubscriber</td><td>The registrationSubscriber consumer that was used when the subscription was initiated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a23d228c1801eda79159687d5a9685963"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00322.xhtml#a3c6701b1b178238cbd35e1d4e1729cd1">Dob::RequestId</a> Safir::Dob::ConnectionBase::UpdateRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00322.xhtml#af2adbc0b4897bb1cdecc8951e68b0c55">Dob::EntityPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a00092.xhtml">Dob::Typesystem::InstanceId</a> &amp;&#160;</td>
          <td class="paramname"><em>instanceId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00139.xhtml">Dob::Requestor</a> *const&#160;</td>
          <td class="paramname"><em>requestor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send an update request on an existing entity instance. </p>
<p>An update request will be sent to the handler that owns (has created) the entity.</p>
<p>The application must be prepared to handle the situation that the outgoing send queue is full (<a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">OverflowException</a> is thrown). In this case the application is responsible for resending of the entity update request. When the overflow situation is dissolved, the application is notified by the <a class="el" href="a00139.xhtml#a2ff58866f39cf6ee44a5e80b8fb2feff" title="Called to indicate that it is meningful to make a retry after an overflow situation. ">Requestor::OnNotRequestOverflow</a> callback, which should trig the resending.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">request</td><td><a class="el" href="a00053.xhtml" title="The baseclass for all entities. ">Entity</a> requested to be updated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">instanceId</td><td>Instance id. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">requestor</td><td><a class="el" href="a00139.xhtml" title="Interface to be implemented by an application that sends requests (Request on entities or service req...">Requestor</a> for response and notification about overflow status.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Request id that can be used to match sent request with the response.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a00116.xhtml" title="Thrown when data could not be sent due to overflowing queues. ">Safir::Dob::OverflowException</a></td><td>There was an overflow when sending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a986eb6556b3408bd10382555c243af1b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="a00025.xhtml">ConnectionAspectBase</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00317.xhtml">Safir</a></li><li class="navelem"><a class="el" href="a00322.xhtml">Dob</a></li><li class="navelem"><a class="el" href="a00029.xhtml">ConnectionBase</a></li>
    <li class="footer">Generated on Sat Apr 30 2016 20:20:03 for Safir SDK Core by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
