<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Safir SDK Core: Safir::Utilities::DynamicLibraryLoader Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a00052.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="a00920.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Safir::Utilities::DynamicLibraryLoader Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class provides a simple wrapper around dynamic loading functionality of the operating system.  
 <a href="a00052.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00252_source.xhtml">Safir/Utilities/DynamicLibraryLoader.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac4ff94ea3e5611af7dc248a25fa2413c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00052.xhtml#ac4ff94ea3e5611af7dc248a25fa2413c">DynamicLibraryLoader</a> ()</td></tr>
<tr class="memdesc:ac4ff94ea3e5611af7dc248a25fa2413c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#ac4ff94ea3e5611af7dc248a25fa2413c">More...</a><br /></td></tr>
<tr class="separator:ac4ff94ea3e5611af7dc248a25fa2413c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca523980447b548e4820851a8ea23542"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00052.xhtml#aca523980447b548e4820851a8ea23542">~DynamicLibraryLoader</a> ()</td></tr>
<tr class="memdesc:aca523980447b548e4820851a8ea23542"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#aca523980447b548e4820851a8ea23542">More...</a><br /></td></tr>
<tr class="separator:aca523980447b548e4820851a8ea23542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1986472743552aa630a2351bb457b95e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00052.xhtml#a1986472743552aa630a2351bb457b95e">Load</a> (const std::string &amp;libraryName, const bool unloadOnDestruction, const bool global=false)</td></tr>
<tr class="memdesc:a1986472743552aa630a2351bb457b95e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a library.  <a href="#a1986472743552aa630a2351bb457b95e">More...</a><br /></td></tr>
<tr class="separator:a1986472743552aa630a2351bb457b95e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27f64207394cc2d69da2e3decdfe7c59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00052.xhtml#a27f64207394cc2d69da2e3decdfe7c59">Load</a> (const std::string &amp;libraryName, const std::string &amp;path, const bool unloadOnDestruction, const bool global=false)</td></tr>
<tr class="memdesc:a27f64207394cc2d69da2e3decdfe7c59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a library from a given location.  <a href="#a27f64207394cc2d69da2e3decdfe7c59">More...</a><br /></td></tr>
<tr class="separator:a27f64207394cc2d69da2e3decdfe7c59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552f19cde513516ca2bbb528acdc2d7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00052.xhtml#a552f19cde513516ca2bbb528acdc2d7e">Unload</a> ()</td></tr>
<tr class="memdesc:a552f19cde513516ca2bbb528acdc2d7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unload the library.  <a href="#a552f19cde513516ca2bbb528acdc2d7e">More...</a><br /></td></tr>
<tr class="separator:a552f19cde513516ca2bbb528acdc2d7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772cfd63d1d75fdc2bb6cae8941af738"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a772cfd63d1d75fdc2bb6cae8941af738"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00052.xhtml#a772cfd63d1d75fdc2bb6cae8941af738">GetFunction</a> (const std::string &amp;functionName)</td></tr>
<tr class="memdesc:a772cfd63d1d75fdc2bb6cae8941af738"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find a function in the library.  <a href="#a772cfd63d1d75fdc2bb6cae8941af738">More...</a><br /></td></tr>
<tr class="separator:a772cfd63d1d75fdc2bb6cae8941af738"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class provides a simple wrapper around dynamic loading functionality of the operating system. </p>
<p>E.g. dlopen/dlsym of *nix and LoadLibrary/GetProcAddress of Win32. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac4ff94ea3e5611af7dc248a25fa2413c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Safir::Utilities::DynamicLibraryLoader::DynamicLibraryLoader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a class="anchor" id="aca523980447b548e4820851a8ea23542"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Safir::Utilities::DynamicLibraryLoader::~DynamicLibraryLoader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a772cfd63d1d75fdc2bb6cae8941af738"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* Safir::Utilities::DynamicLibraryLoader::GetFunction </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>functionName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find a function in the library. </p>
<p>Attempt to load the specified function and return it as a function pointer with the specified signature. The return type is a raw function pointer rather than a boost::function object since otherwise things get very messy if you have to specify calling convention. But it easy to put the result into a boost function object. For example: boost::function&lt;double(int,int)&gt; func = lib.GetFunction&lt;double(int,int)&gt;("myfunc") And with specified calling convention on ms visual c++: boost::function&lt;double(int,int)&gt; func = lib.GetFunction&lt;double __stdcall (int,int)&gt;("myfunc") And with specified calling convention on gcc: boost::function&lt;double(int,int)&gt; func = lib.GetFunction&lt;double __attribute__(stdcall) (int,int)&gt;("myfunc")</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">functionName</td><td>Name of the function to load </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::logic_error</td><td>If function cannot be found. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1986472743552aa630a2351bb457b95e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Utilities::DynamicLibraryLoader::Load </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>libraryName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>unloadOnDestruction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>global</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load a library. </p>
<p>Attempt to load the specified library dynamically.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">libraryName</td><td>The name of the library to load. On linux "lib" and ".so" are added to the beginning and end of the name, and on windows ".dll" is appended. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">unloadOnDestruction</td><td>If this is true the library will be unloaded when the object is destroyed. This will invalidate any function pointers. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global</td><td>Use RTLD_GLOBAL flag when loading on *nix. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::logic_error</td><td>If library cannot be found or cannot be not loaded. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a27f64207394cc2d69da2e3decdfe7c59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Utilities::DynamicLibraryLoader::Load </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>libraryName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>unloadOnDestruction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>global</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load a library from a given location. </p>
<p>Attempt to load the specified library dynamically.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">libraryName</td><td>The name of the library to load. On linux "lib" and ".so" are added to the beginning and end of the name, and on windows ".dll" is appended. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">path</td><td>Location to load the library from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">unloadOnDestruction</td><td>If this is true the library will be unloaded when the object is destroyed. This will invalidate any function pointers. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global</td><td>Use RTLD_GLOBAL flag when loading on *nix. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::logic_error</td><td>If library cannot be found or cannot be not loaded. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a552f19cde513516ca2bbb528acdc2d7e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Utilities::DynamicLibraryLoader::Unload </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unload the library. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00317.xhtml">Safir</a></li><li class="navelem"><a class="el" href="a00336.xhtml">Utilities</a></li><li class="navelem"><a class="el" href="a00052.xhtml">DynamicLibraryLoader</a></li>
    <li class="footer">Generated on Sat Apr 30 2016 20:20:05 for Safir SDK Core by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
