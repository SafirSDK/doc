<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Safir SDK Core: Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a01500.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="a01497.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Template class for all containers of automatically generated DOB objects.  
 <a href="a01500.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00113_source.xhtml">Safir/Dob/Typesystem/ObjectContainer.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01499.svg" width="995" height="303"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01498.svg" width="191" height="227"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:af1684f33ee44bbb999b1b8e78bf1fb3a"><td class="memItemLeft" align="right" valign="top">typedef std::shared_ptr&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a></td></tr>
<tr class="memdesc:af1684f33ee44bbb999b1b8e78bf1fb3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef for the contained smart pointer.  <br /></td></tr>
<tr class="separator:af1684f33ee44bbb999b1b8e78bf1fb3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81f1c0c27592786b855ce876c318a4d2"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a81f1c0c27592786b855ce876c318a4d2">ContainedType</a></td></tr>
<tr class="separator:a81f1c0c27592786b855ce876c318a4d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adf0067e984e8f0a89d046ef9031ffcea"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#adf0067e984e8f0a89d046ef9031ffcea">ObjectContainerImpl</a> ()</td></tr>
<tr class="memdesc:adf0067e984e8f0a89d046ef9031ffcea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <br /></td></tr>
<tr class="separator:adf0067e984e8f0a89d046ef9031ffcea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5261580ea8999538af6f7beb1678970"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#ab5261580ea8999538af6f7beb1678970">ObjectContainerImpl</a> (const <a class="el" href="a01500.xhtml">ObjectContainerImpl</a> &amp;other)</td></tr>
<tr class="memdesc:ab5261580ea8999538af6f7beb1678970"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <br /></td></tr>
<tr class="separator:ab5261580ea8999538af6f7beb1678970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa05a3e9e763dacdfd8ea28d8b07df49c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01500.xhtml">ObjectContainerImpl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#aa05a3e9e763dacdfd8ea28d8b07df49c">operator=</a> (const <a class="el" href="a01500.xhtml">ObjectContainerImpl</a> &amp;other)</td></tr>
<tr class="memdesc:aa05a3e9e763dacdfd8ea28d8b07df49c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <br /></td></tr>
<tr class="separator:aa05a3e9e763dacdfd8ea28d8b07df49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd45c79b07275d5f5dab8508de967692"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#afd45c79b07275d5f5dab8508de967692">SetPtr</a> (const <a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> &amp;ptr)</td></tr>
<tr class="memdesc:afd45c79b07275d5f5dab8508de967692"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the smart pointer in the container.  <br /></td></tr>
<tr class="separator:afd45c79b07275d5f5dab8508de967692"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b3e2431e2f82326edc62c692c562719"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a1b3e2431e2f82326edc62c692c562719">SetPtr</a> (const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> &amp;ptr) override</td></tr>
<tr class="memdesc:a1b3e2431e2f82326edc62c692c562719"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the smart pointer in the container.  <br /></td></tr>
<tr class="separator:a1b3e2431e2f82326edc62c692c562719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa124d8919bfe8beec076c3a284298e96"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#aa124d8919bfe8beec076c3a284298e96">GetPtr</a> () const</td></tr>
<tr class="memdesc:aa124d8919bfe8beec076c3a284298e96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the smart pointer from the container.  <br /></td></tr>
<tr class="separator:aa124d8919bfe8beec076c3a284298e96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0fef9741dc912277dbf4f992cb0c0a1"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#ab0fef9741dc912277dbf4f992cb0c0a1">operator-&gt;</a> () const</td></tr>
<tr class="memdesc:ab0fef9741dc912277dbf4f992cb0c0a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereference the smart pointer in the container.  <br /></td></tr>
<tr class="separator:ab0fef9741dc912277dbf4f992cb0c0a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2743b197b4d6f7cbae2f8850a66a8fb4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a2743b197b4d6f7cbae2f8850a66a8fb4">SetChanged</a> (const bool changed) override</td></tr>
<tr class="memdesc:a2743b197b4d6f7cbae2f8850a66a8fb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the containers change flag.  <br /></td></tr>
<tr class="separator:a2743b197b4d6f7cbae2f8850a66a8fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc54c705e8c4449d0a1f6939e1a8c8e5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#abc54c705e8c4449d0a1f6939e1a8c8e5">IsChanged</a> () const override</td></tr>
<tr class="memdesc:abc54c705e8c4449d0a1f6939e1a8c8e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the change flag set on the container?  <br /></td></tr>
<tr class="separator:abc54c705e8c4449d0a1f6939e1a8c8e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8609e7b321e7da3bac1a41cbfbbdb30c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a> () const override</td></tr>
<tr class="memdesc:a8609e7b321e7da3bac1a41cbfbbdb30c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the container set to null?  <br /></td></tr>
<tr class="separator:a8609e7b321e7da3bac1a41cbfbbdb30c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad33ca18b67ea15ab60197f6bc72bc929"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#ad33ca18b67ea15ab60197f6bc72bc929">SetNull</a> () override</td></tr>
<tr class="memdesc:ad33ca18b67ea15ab60197f6bc72bc929"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the container to null.  <br /></td></tr>
<tr class="separator:ad33ca18b67ea15ab60197f6bc72bc929"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba6743de949e6d546bb922c4ae85efea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#aba6743de949e6d546bb922c4ae85efea">Copy</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;that) override</td></tr>
<tr class="memdesc:aba6743de949e6d546bb922c4ae85efea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual assignment.  <br /></td></tr>
<tr class="separator:aba6743de949e6d546bb922c4ae85efea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a621578889f3c975db72bbb1a61554261"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01392.xhtml">ContainerBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a621578889f3c975db72bbb1a61554261">GetMember</a> (const int member, const int index) override</td></tr>
<tr class="memdesc:a621578889f3c975db72bbb1a61554261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a reference to a member container from an object.  <br /></td></tr>
<tr class="separator:a621578889f3c975db72bbb1a61554261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1a41513c8e6025dea48344ad6fcfefa"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#aa1a41513c8e6025dea48344ad6fcfefa">GetMember</a> (const int member, const int index) const override</td></tr>
<tr class="memdesc:aa1a41513c8e6025dea48344ad6fcfefa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a const reference to a member container from an object.  <br /></td></tr>
<tr class="separator:aa1a41513c8e6025dea48344ad6fcfefa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a986be1bfb24cc8b4cfbaf5b0453dd238"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a986be1bfb24cc8b4cfbaf5b0453dd238">GetObjectPointer</a> () const override</td></tr>
<tr class="memdesc:a986be1bfb24cc8b4cfbaf5b0453dd238"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a smart pointer to the contained object.  <br /></td></tr>
<tr class="separator:a986be1bfb24cc8b4cfbaf5b0453dd238"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a093ee933cac0a5042d0adc68162d64f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">SetObjectPointer</a> (const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> ptr) override</td></tr>
<tr class="memdesc:a093ee933cac0a5042d0adc68162d64f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the smart pointer in the container.  <br /></td></tr>
<tr class="separator:a093ee933cac0a5042d0adc68162d64f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11a79e8b12da7a894a132a6aaa0c1ecf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a11a79e8b12da7a894a132a6aaa0c1ecf">ResetObjectPointer</a> () override</td></tr>
<tr class="memdesc:a11a79e8b12da7a894a132a6aaa0c1ecf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset (ie set to null) the contained pointer.  <br /></td></tr>
<tr class="separator:a11a79e8b12da7a894a132a6aaa0c1ecf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Blob serialization/deserialization part.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>These functions are for internal use only! Their names and functionality are likely to change in the near future! </p>
</div></td></tr>
<tr class="memitem:a09fac7392e38a41792cca8dcbbc30c7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00389.xhtml#a77c8a9fabe66e72ccbc66c729540b9b6">Int32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01500.xhtml#a09fac7392e38a41792cca8dcbbc30c7b">CalculateBlobSize</a> () const</td></tr>
<tr class="memdesc:a09fac7392e38a41792cca8dcbbc30c7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the size of the blob-serialized form of the contained object.  <br /></td></tr>
<tr class="separator:a09fac7392e38a41792cca8dcbbc30c7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_a01496"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_a01496')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="a01496.xhtml">Safir::Dob::Typesystem::ObjectContainerBase</a></td></tr>
<tr class="memitem:abc5fe23aedb525d8f000252ea5d0509d inherit pub_methods_a01496"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01496.xhtml#abc5fe23aedb525d8f000252ea5d0509d">ObjectContainerBase</a> ()</td></tr>
<tr class="memdesc:abc5fe23aedb525d8f000252ea5d0509d inherit pub_methods_a01496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <br /></td></tr>
<tr class="separator:abc5fe23aedb525d8f000252ea5d0509d inherit pub_methods_a01496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2e1dc72ec0380bbb458cf0f2da3880d inherit pub_methods_a01496"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01496.xhtml#af2e1dc72ec0380bbb458cf0f2da3880d">ObjectContainerBase</a> (const <a class="el" href="a01496.xhtml">ObjectContainerBase</a> &amp;)=default</td></tr>
<tr class="memdesc:af2e1dc72ec0380bbb458cf0f2da3880d inherit pub_methods_a01496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <br /></td></tr>
<tr class="separator:af2e1dc72ec0380bbb458cf0f2da3880d inherit pub_methods_a01496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaf4f8923a5b2ed23b84ddfd5109b487 inherit pub_methods_a01496"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01496.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">SetPtr</a> (const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> &amp;ptr)=0</td></tr>
<tr class="memdesc:adaf4f8923a5b2ed23b84ddfd5109b487 inherit pub_methods_a01496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the smart pointer in the container.  <br /></td></tr>
<tr class="separator:adaf4f8923a5b2ed23b84ddfd5109b487 inherit pub_methods_a01496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5f9fb5ad7450f32ee51b70115bce80a inherit pub_methods_a01496"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01496.xhtml#aa5f9fb5ad7450f32ee51b70115bce80a">IsChangedHere</a> () const</td></tr>
<tr class="memdesc:aa5f9fb5ad7450f32ee51b70115bce80a inherit pub_methods_a01496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the change flag in the container set?  <br /></td></tr>
<tr class="separator:aa5f9fb5ad7450f32ee51b70115bce80a inherit pub_methods_a01496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0074de7f0f6b89d6f8806d33a9792b4b inherit pub_methods_a01496"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01496.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">SetChangedHere</a> (const bool changed)</td></tr>
<tr class="memdesc:a0074de7f0f6b89d6f8806d33a9792b4b inherit pub_methods_a01496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the change flag in the container.  <br /></td></tr>
<tr class="separator:a0074de7f0f6b89d6f8806d33a9792b4b inherit pub_methods_a01496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_a01392"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_a01392')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></td></tr>
<tr class="memitem:a90a65efa4915d9a6b2930a90b0189fdd inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a90a65efa4915d9a6b2930a90b0189fdd">ContainerBase</a> ()</td></tr>
<tr class="memdesc:a90a65efa4915d9a6b2930a90b0189fdd inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <br /></td></tr>
<tr class="separator:a90a65efa4915d9a6b2930a90b0189fdd inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28969327fe3474b640dc8ddbb5ef2782 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a28969327fe3474b640dc8ddbb5ef2782">ContainerBase</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;)=default</td></tr>
<tr class="memdesc:a28969327fe3474b640dc8ddbb5ef2782 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <br /></td></tr>
<tr class="separator:a28969327fe3474b640dc8ddbb5ef2782 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcc120535ba864a170f3f2b3cb7f03b5 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#adcc120535ba864a170f3f2b3cb7f03b5">~ContainerBase</a> ()</td></tr>
<tr class="memdesc:adcc120535ba864a170f3f2b3cb7f03b5 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <br /></td></tr>
<tr class="separator:adcc120535ba864a170f3f2b3cb7f03b5 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad263469929db9104b47aab4eb19ecacd inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">IsNull</a> () const =0</td></tr>
<tr class="memdesc:ad263469929db9104b47aab4eb19ecacd inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the container set to null?  <br /></td></tr>
<tr class="separator:ad263469929db9104b47aab4eb19ecacd inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12b07a1d91572b107f8a51c5a82ffa38 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a12b07a1d91572b107f8a51c5a82ffa38">SetNull</a> ()=0</td></tr>
<tr class="memdesc:a12b07a1d91572b107f8a51c5a82ffa38 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the container to null.  <br /></td></tr>
<tr class="separator:a12b07a1d91572b107f8a51c5a82ffa38 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1b52624a8f2a163c5ecec102253059 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a9a1b52624a8f2a163c5ecec102253059">IsChanged</a> () const</td></tr>
<tr class="memdesc:a9a1b52624a8f2a163c5ecec102253059 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the change flag set on the container?  <br /></td></tr>
<tr class="separator:a9a1b52624a8f2a163c5ecec102253059 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5024cbf12afcd9670026e4ec5eb693f6 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a5024cbf12afcd9670026e4ec5eb693f6">SetChanged</a> (const bool changed)</td></tr>
<tr class="memdesc:a5024cbf12afcd9670026e4ec5eb693f6 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the containers change flag.  <br /></td></tr>
<tr class="separator:a5024cbf12afcd9670026e4ec5eb693f6 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73ae69ffda7fa99f78eb73a85df8defa inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a73ae69ffda7fa99f78eb73a85df8defa">Copy</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;that)=0</td></tr>
<tr class="memdesc:a73ae69ffda7fa99f78eb73a85df8defa inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual assignment.  <br /></td></tr>
<tr class="separator:a73ae69ffda7fa99f78eb73a85df8defa inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_a01496"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_a01496')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="a01496.xhtml">Safir::Dob::Typesystem::ObjectContainerBase</a></td></tr>
<tr class="memitem:af81baea5284e6f89aa57b5472becb461 inherit pro_methods_a01496"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01496.xhtml">ObjectContainerBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">operator=</a> (const <a class="el" href="a01496.xhtml">ObjectContainerBase</a> &amp;other)</td></tr>
<tr class="memdesc:af81baea5284e6f89aa57b5472becb461 inherit pro_methods_a01496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <br /></td></tr>
<tr class="separator:af81baea5284e6f89aa57b5472becb461 inherit pro_methods_a01496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_a01392"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_a01392')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></td></tr>
<tr class="memitem:ae61be338f36196155b670e05ce175aee inherit pro_methods_a01392"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01392.xhtml">ContainerBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#ae61be338f36196155b670e05ce175aee">operator=</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;other)</td></tr>
<tr class="memdesc:ae61be338f36196155b670e05ce175aee inherit pro_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <br /></td></tr>
<tr class="separator:ae61be338f36196155b670e05ce175aee inherit pro_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_a01392"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_a01392')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></td></tr>
<tr class="memitem:a4257d6efb8b17e914896bf4ee9b1d7b8 inherit pro_attribs_a01392"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a></td></tr>
<tr class="memdesc:a4257d6efb8b17e914896bf4ee9b1d7b8 inherit pro_attribs_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">The variable containing the change flag.  <br /></td></tr>
<tr class="separator:a4257d6efb8b17e914896bf4ee9b1d7b8 inherit pro_attribs_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;class T&gt;<br />
class Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;</div><p>Template class for all containers of automatically generated DOB objects. </p>
<p>This class holds a smart pointer to an object, and has operations to get information from it and modify it. The -&gt; operator is overloaded to make this class more transparent to use.</p>
<p>It is called <a class="el" href="a01500.xhtml" title="Template class for all containers of automatically generated DOB objects.">ObjectContainerImpl</a> because the name ObjectContainer is "taken" by the container that contains a <a class="el" href="a01492.xhtml" title="The base class for all DOB objects.">Dob::Typesystem::Object</a> object.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">T</td><td>The type to contain. Must inherit from <a class="el" href="a01492.xhtml" title="The base class for all DOB objects.">Dob::Typesystem::Object</a>. </td></tr>
  </table>
  </dd>
</dl>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a81f1c0c27592786b855ce876c318a4d2" name="a81f1c0c27592786b855ce876c318a4d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81f1c0c27592786b855ce876c318a4d2">&#9670;&#160;</a></span>ContainedType</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::ContainedType</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1684f33ee44bbb999b1b8e78bf1fb3a" name="af1684f33ee44bbb999b1b8e78bf1fb3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1684f33ee44bbb999b1b8e78bf1fb3a">&#9670;&#160;</a></span>T_Ptr</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef std::shared_ptr&lt;T&gt; <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::T_Ptr</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Typedef for the contained smart pointer. </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adf0067e984e8f0a89d046ef9031ffcea" name="adf0067e984e8f0a89d046ef9031ffcea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf0067e984e8f0a89d046ef9031ffcea">&#9670;&#160;</a></span>ObjectContainerImpl() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::ObjectContainerImpl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>Creates a null and not changed container. </p>

</div>
</div>
<a id="ab5261580ea8999538af6f7beb1678970" name="ab5261580ea8999538af6f7beb1678970"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5261580ea8999538af6f7beb1678970">&#9670;&#160;</a></span>ObjectContainerImpl() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::ObjectContainerImpl </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a01500.xhtml">ObjectContainerImpl</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<p>Copy an object container. The contained object will be cloned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>[in] - The object to copy. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01456.xhtml" title="This exception is thrown if a class cannot be cast to the expected type.">IncompatibleTypesException</a></td><td>Something has gone horribly wrong with your copying! </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_ab5261580ea8999538af6f7beb1678970_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a09fac7392e38a41792cca8dcbbc30c7b" name="a09fac7392e38a41792cca8dcbbc30c7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09fac7392e38a41792cca8dcbbc30c7b">&#9670;&#160;</a></span>CalculateBlobSize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00389.xhtml#a77c8a9fabe66e72ccbc66c729540b9b6">Int32</a> <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::CalculateBlobSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the size of the blob-serialized form of the contained object. </p>
<dl class="section return"><dt>Returns</dt><dd>The needed size in bytes. 0 if the container is null. </dd></dl>

<p class="reference">References <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_a09fac7392e38a41792cca8dcbbc30c7b_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aba6743de949e6d546bb922c4ae85efea" name="aba6743de949e6d546bb922c4ae85efea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba6743de949e6d546bb922c4ae85efea">&#9670;&#160;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::Copy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;&#160;</td>
          <td class="paramname"><em>that</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Virtual assignment. </p>
<p>Copy all the members from "that" into "this". Types must be the same for this to work!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">that</td><td>[in] - The object to copy into this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01464.xhtml" title="Meant to be used when something goes very wrong.">SoftwareViolationException</a></td><td>If the types are not of the same kind. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="a01392.xhtml#a73ae69ffda7fa99f78eb73a85df8defa">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, <a class="el" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">Safir::Dob::Typesystem::ContainerBase::IsNull()</a>, <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>, and <a class="el" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::SetObjectPointer()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_aba6743de949e6d546bb922c4ae85efea_cgraph.svg" width="407" height="131"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa1a41513c8e6025dea48344ad6fcfefa" name="aa1a41513c8e6025dea48344ad6fcfefa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1a41513c8e6025dea48344ad6fcfefa">&#9670;&#160;</a></span>GetMember() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp; <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::GetMember </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>member</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a const reference to a member container from an object. </p>
<p>Use the methods in <a class="el" href="a00393.xhtml" title="Functions for getting member information from types.">Members</a> to get member indices and array sizes for use with this method.</p>
<p>Note: Do not use this method unless you're very sure it is the one you need!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">member</td><td>[in] - The index of the member to get. </td></tr>
    <tr><td class="paramname">index</td><td>[in] - The array index of the member to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A const reference to the member container. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01452.xhtml" title="A parameter in the call was invalid.">IllegalValueException</a></td><td>If the index is not in the range of the array. </td></tr>
    <tr><td class="paramname"><a class="el" href="a01464.xhtml" title="Meant to be used when something goes very wrong.">SoftwareViolationException</a></td><td>If the element is not an array and the index is not 0. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="a01496.xhtml#ab44170487b12303855be13050b99e36b">Safir::Dob::Typesystem::ObjectContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_aa1a41513c8e6025dea48344ad6fcfefa_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a621578889f3c975db72bbb1a61554261" name="a621578889f3c975db72bbb1a61554261"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a621578889f3c975db72bbb1a61554261">&#9670;&#160;</a></span>GetMember() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01392.xhtml">ContainerBase</a> &amp; <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::GetMember </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>member</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a reference to a member container from an object. </p>
<p>Use the methods in <a class="el" href="a00393.xhtml" title="Functions for getting member information from types.">Members</a> to get member indices and array sizes for use with this method.</p>
<p>Note: Do not use this method unless you're very sure it is the one you need!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">member</td><td>[in] - The index of the member to get. </td></tr>
    <tr><td class="paramname">index</td><td>[in] - The array index of the member to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A reference to the member container. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01452.xhtml" title="A parameter in the call was invalid.">IllegalValueException</a></td><td>If the index is not in the range of the array. </td></tr>
    <tr><td class="paramname"><a class="el" href="a01464.xhtml" title="Meant to be used when something goes very wrong.">SoftwareViolationException</a></td><td>If the element is not an array and the index is not 0. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="a01496.xhtml#a442510fb4ad39c9b831bcc1485efe5af">Safir::Dob::Typesystem::ObjectContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_a621578889f3c975db72bbb1a61554261_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a986be1bfb24cc8b4cfbaf5b0453dd238" name="a986be1bfb24cc8b4cfbaf5b0453dd238"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a986be1bfb24cc8b4cfbaf5b0453dd238">&#9670;&#160;</a></span>GetObjectPointer()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::GetObjectPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a smart pointer to the contained object. </p>
<p>This method will cast the smart object pointer to the derived type contained by the container to a smart pointer to an <a class="el" href="a01492.xhtml" title="The base class for all DOB objects.">Object</a> (the DOB object base class.</p>
<p>This method does not check if the container is null!</p>
<p>Note: Do not use this method unless you're very sure it is the one you need!</p>
<dl class="section return"><dt>Returns</dt><dd>A smart pointer to the contained object. </dd></dl>

<p>Implements <a class="el" href="a01496.xhtml#aa5ad8977290cb7057106eead21a27ea6">Safir::Dob::Typesystem::ObjectContainerBase</a>.</p>

</div>
</div>
<a id="aa124d8919bfe8beec076c3a284298e96" name="aa124d8919bfe8beec076c3a284298e96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa124d8919bfe8beec076c3a284298e96">&#9670;&#160;</a></span>GetPtr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> &amp; <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::GetPtr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the smart pointer from the container. </p>
<p>This method will return the contained smart pointer unless the container is null, then an exception will be thrown.</p>
<dl class="section return"><dt>Returns</dt><dd>A smart pointer to the contained object. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01468.xhtml" title="Thrown when an application attempts to get the value of a member that is null.">NullException</a></td><td>The container is null. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_aa124d8919bfe8beec076c3a284298e96_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="abc54c705e8c4449d0a1f6939e1a8c8e5" name="abc54c705e8c4449d0a1f6939e1a8c8e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc54c705e8c4449d0a1f6939e1a8c8e5">&#9670;&#160;</a></span>IsChanged()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::IsChanged </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is the change flag set on the container? </p>
<p>The change flag gets updated every time the contained value changes.</p>
<p>Note: If this is a container containing objects this call will recursively check change flags in the contained objects.</p>
<dl class="section return"><dt>Returns</dt><dd>True if the containers change flag is set. </dd></dl>

<p>Reimplemented from <a class="el" href="a01392.xhtml#a9a1b52624a8f2a163c5ecec102253059">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>, and <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_abc54c705e8c4449d0a1f6939e1a8c8e5_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a8609e7b321e7da3bac1a41cbfbbdb30c" name="a8609e7b321e7da3bac1a41cbfbbdb30c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8609e7b321e7da3bac1a41cbfbbdb30c">&#9670;&#160;</a></span>IsNull()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::IsNull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is the container set to null? </p>
<dl class="section return"><dt>Returns</dt><dd>True if the container is set to null. </dd></dl>

<p>Implements <a class="el" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="a01500.xhtml#ab5261580ea8999538af6f7beb1678970">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::ObjectContainerImpl()</a>, <a class="el" href="a01504.xhtml#ad81005d58a3035d1b569f7942b05cf2d">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ObjectContainerImpl()</a>, <a class="el" href="a01500.xhtml#a09fac7392e38a41792cca8dcbbc30c7b">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::CalculateBlobSize()</a>, <a class="el" href="a01500.xhtml#a621578889f3c975db72bbb1a61554261">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::GetMember()</a>, <a class="el" href="a01504.xhtml#a395e1983612a0cc79403e9b3f9d88953">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetMember()</a>, <a class="el" href="a01500.xhtml#aa124d8919bfe8beec076c3a284298e96">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::GetPtr()</a>, <a class="el" href="a01504.xhtml#a168e26b6b3bc8c0d17ab184ca5bd301c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetPtr()</a>, <a class="el" href="a01500.xhtml#abc54c705e8c4449d0a1f6939e1a8c8e5">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsChanged()</a>, <a class="el" href="a01504.xhtml#aa333803662ae43e8e5f9f79eb4e1254c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::IsChanged()</a>, <a class="el" href="a01500.xhtml#ab0fef9741dc912277dbf4f992cb0c0a1">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::operator-&gt;()</a>, <a class="el" href="a01504.xhtml#a2656ffba20c135bced33949412e68f6e">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::operator-&gt;()</a>, <a class="el" href="a01500.xhtml#aa05a3e9e763dacdfd8ea28d8b07df49c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::operator=()</a>, <a class="el" href="a01504.xhtml#a1654c48a9ef1dd8afab0f4a371ca43cd">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::operator=()</a>, <a class="el" href="a01500.xhtml#a2743b197b4d6f7cbae2f8850a66a8fb4">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::SetChanged()</a>, and <a class="el" href="a01504.xhtml#a366a64ce88ea6ded162194371d9d6c02">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetChanged()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_a8609e7b321e7da3bac1a41cbfbbdb30c_icgraph.svg" width="430" height="1167"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab0fef9741dc912277dbf4f992cb0c0a1" name="ab0fef9741dc912277dbf4f992cb0c0a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0fef9741dc912277dbf4f992cb0c0a1">&#9670;&#160;</a></span>operator-&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T * <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Dereference the smart pointer in the container. </p>
<p>This method will call the -&gt; operator on the smart pointer in the container to allow users to directly access members in the object.</p>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the contained object. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01468.xhtml" title="Thrown when an application attempts to get the value of a member that is null.">NullException</a></td><td>The container is null. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_ab0fef9741dc912277dbf4f992cb0c0a1_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa05a3e9e763dacdfd8ea28d8b07df49c" name="aa05a3e9e763dacdfd8ea28d8b07df49c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa05a3e9e763dacdfd8ea28d8b07df49c">&#9670;&#160;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01500.xhtml">ObjectContainerImpl</a> &amp; <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a01500.xhtml">ObjectContainerImpl</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy assignment operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>[in] - The object to copy. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A reference to this. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01456.xhtml" title="This exception is thrown if a class cannot be cast to the expected type.">IncompatibleTypesException</a></td><td>The contained types are not compatible! </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>, and <a class="el" href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">Safir::Dob::Typesystem::ObjectContainerBase::operator=()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_aa05a3e9e763dacdfd8ea28d8b07df49c_cgraph.svg" width="606" height="144"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a11a79e8b12da7a894a132a6aaa0c1ecf" name="a11a79e8b12da7a894a132a6aaa0c1ecf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11a79e8b12da7a894a132a6aaa0c1ecf">&#9670;&#160;</a></span>ResetObjectPointer()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::ResetObjectPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reset (ie set to null) the contained pointer. </p>
<p>Warning: This method does not update the change flag!</p>
<p>Note: Do not use this method unless you're very sure it is the one you need! </p>

<p>Implements <a class="el" href="a01496.xhtml#a6d83f3e64d6e7e4ab5bc95ce25ed677a">Safir::Dob::Typesystem::ObjectContainerBase</a>.</p>

</div>
</div>
<a id="a2743b197b4d6f7cbae2f8850a66a8fb4" name="a2743b197b4d6f7cbae2f8850a66a8fb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2743b197b4d6f7cbae2f8850a66a8fb4">&#9670;&#160;</a></span>SetChanged()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::SetChanged </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>changed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the containers change flag. </p>
<p>It should be fairly unusual for an application to have to use this operation. There is nothing dangerous about it, but are you sure this is the operation you were after?</p>
<p>The change flag is how receivers of objects can work out what the sender really wanted done on the object.</p>
<p>Note: If this is a container containing one or more objects this call will recursively set all the change flags in the contained objects. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">changed</td><td>[in] - The value to set the change flag(s) to. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="a01392.xhtml#a5024cbf12afcd9670026e4ec5eb693f6">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::IsNull()</a>, and <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_a2743b197b4d6f7cbae2f8850a66a8fb4_cgraph.svg" width="379" height="66"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad33ca18b67ea15ab60197f6bc72bc929" name="ad33ca18b67ea15ab60197f6bc72bc929"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad33ca18b67ea15ab60197f6bc72bc929">&#9670;&#160;</a></span>SetNull()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::SetNull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the container to null. </p>

<p>Implements <a class="el" href="a01392.xhtml#a12b07a1d91572b107f8a51c5a82ffa38">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="a093ee933cac0a5042d0adc68162d64f4" name="a093ee933cac0a5042d0adc68162d64f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a093ee933cac0a5042d0adc68162d64f4">&#9670;&#160;</a></span>SetObjectPointer()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::SetObjectPointer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a>&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the smart pointer in the container. </p>
<p>This method will set the contained pointer to point to another object. Checks are NOT always made to see that it is of the correct type.</p>
<p>Warning: This method does not update the change flag!</p>
<p>Note: Do not use this method unless you're very sure it is the one you need!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>[in] A pointer to the new object to point to. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="a01496.xhtml#aff8609b609d6b921d80468886cb641c0">Safir::Dob::Typesystem::ObjectContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>.</p>

<p class="reference">Referenced by <a class="el" href="a01500.xhtml#aba6743de949e6d546bb922c4ae85efea">Safir::Dob::Typesystem::ObjectContainerImpl&lt; T &gt;::Copy()</a>, and <a class="el" href="a01504.xhtml#ac782e96a6ab6c6b98b8cbee654ac7e23">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::Copy()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01500_a093ee933cac0a5042d0adc68162d64f4_icgraph.svg" width="407" height="131"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a1b3e2431e2f82326edc62c692c562719" name="a1b3e2431e2f82326edc62c692c562719"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b3e2431e2f82326edc62c692c562719">&#9670;&#160;</a></span>SetPtr() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::SetPtr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the smart pointer in the container. </p>
<p>This method will set the contained pointer to point to another object. Checks are always made to see that it is of the correct type. The change flag of the container will be updated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>[in] A pointer to the new object to point to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01456.xhtml" title="This exception is thrown if a class cannot be cast to the expected type.">IncompatibleTypesException</a></td><td>If the ptr is not of the type contained by the container. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="a01496.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">Safir::Dob::Typesystem::ObjectContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="afd45c79b07275d5f5dab8508de967692" name="afd45c79b07275d5f5dab8508de967692"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd45c79b07275d5f5dab8508de967692">&#9670;&#160;</a></span>SetPtr() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a>&lt; T &gt;::SetPtr </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the smart pointer in the container. </p>
<p>This method will set the contained pointer to point to another object. The change flag of the container will be updated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>[in] A pointer to the new object to point to. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00385.xhtml">Safir</a></li><li class="navelem"><a class="el" href="a00387.xhtml">Dob</a></li><li class="navelem"><a class="el" href="a00389.xhtml">Typesystem</a></li><li class="navelem"><a class="el" href="a01500.xhtml">ObjectContainerImpl</a></li>
    <li class="footer">Generated on Fri Mar 3 2023 14:01:20 for Safir SDK Core by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
  </ul>
</div>
</body>
</html>
