<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Safir SDK Core: Safir::Dob::Typesystem::SequenceContainer&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a01520.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="a01517.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">Safir::Dob::Typesystem::SequenceContainer&lt; T &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Container class for sequences of values.  
 <a href="a01520.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00122_source.xhtml">Safir/Dob/Typesystem/SequenceContainer.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01519.svg" width="1418" height="507"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01518.svg" width="186" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aff2ef2ba76264c37f8bacb618cbd6928"><td class="memItemLeft" align="right" valign="top">typedef T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a></td></tr>
<tr class="separator:aff2ef2ba76264c37f8bacb618cbd6928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad07a0d62c851ab77955ea7a92fa294c8"><td class="memItemLeft" align="right" valign="top">typedef std::deque&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#ad07a0d62c851ab77955ea7a92fa294c8">StorageType</a></td></tr>
<tr class="separator:ad07a0d62c851ab77955ea7a92fa294c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62c1858032dd7617c329662939a96c93"><td class="memItemLeft" align="right" valign="top">typedef StorageType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a62c1858032dd7617c329662939a96c93">const_iterator</a></td></tr>
<tr class="separator:a62c1858032dd7617c329662939a96c93"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a12b93f6d8d6e30c53550255c88ca3f74"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a12b93f6d8d6e30c53550255c88ca3f74">SequenceContainer</a> ()</td></tr>
<tr class="memdesc:a12b93f6d8d6e30c53550255c88ca3f74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <br /></td></tr>
<tr class="separator:a12b93f6d8d6e30c53550255c88ca3f74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79144fd1665b31ce639134765d686b04"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a79144fd1665b31ce639134765d686b04">IsNull</a> () const override</td></tr>
<tr class="memdesc:a79144fd1665b31ce639134765d686b04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the container set to null?  <br /></td></tr>
<tr class="separator:a79144fd1665b31ce639134765d686b04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a034ce1753bdceb9a9385197f130440a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a034ce1753bdceb9a9385197f130440a4">SetNull</a> () override</td></tr>
<tr class="memdesc:a034ce1753bdceb9a9385197f130440a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the container to null.  <br /></td></tr>
<tr class="separator:a034ce1753bdceb9a9385197f130440a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26cf4843564574b0b3dee04a2171b3df"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a26cf4843564574b0b3dee04a2171b3df">size</a> () const</td></tr>
<tr class="memdesc:a26cf4843564574b0b3dee04a2171b3df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the sequence, i.e number of contained values.  <br /></td></tr>
<tr class="separator:a26cf4843564574b0b3dee04a2171b3df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8571eddd43de46700fc27a60573546a0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a8571eddd43de46700fc27a60573546a0">empty</a> () const</td></tr>
<tr class="memdesc:a8571eddd43de46700fc27a60573546a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if sequence is empty.  <br /></td></tr>
<tr class="separator:a8571eddd43de46700fc27a60573546a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b01eaac61d8b1d43e543a732f1ba77e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a8b01eaac61d8b1d43e543a732f1ba77e">front</a> () const</td></tr>
<tr class="memdesc:a8b01eaac61d8b1d43e543a732f1ba77e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a const reference to the first value in the sequence.  <br /></td></tr>
<tr class="separator:a8b01eaac61d8b1d43e543a732f1ba77e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74bbeb61a35152ebfc00e03a594c4ad7"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a74bbeb61a35152ebfc00e03a594c4ad7">back</a> () const</td></tr>
<tr class="memdesc:a74bbeb61a35152ebfc00e03a594c4ad7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a const reference to the last value in the sequence.  <br /></td></tr>
<tr class="separator:a74bbeb61a35152ebfc00e03a594c4ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a751c954141e0f6cede7a18ed2ac3b6f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01520.xhtml#a62c1858032dd7617c329662939a96c93">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a751c954141e0f6cede7a18ed2ac3b6f6">begin</a> () const</td></tr>
<tr class="memdesc:a751c954141e0f6cede7a18ed2ac3b6f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get const_iterator pointing to the first element in the sequence.  <br /></td></tr>
<tr class="separator:a751c954141e0f6cede7a18ed2ac3b6f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fb1631407f8d25e0d8fce7d37d0ae22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01520.xhtml#a62c1858032dd7617c329662939a96c93">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a3fb1631407f8d25e0d8fce7d37d0ae22">end</a> () const</td></tr>
<tr class="memdesc:a3fb1631407f8d25e0d8fce7d37d0ae22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get const_iterator pointing past the last element in the sequence.  <br /></td></tr>
<tr class="separator:a3fb1631407f8d25e0d8fce7d37d0ae22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af11011e24d3c8dfa25ae0fe7779e068b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#af11011e24d3c8dfa25ae0fe7779e068b">clear</a> ()</td></tr>
<tr class="memdesc:af11011e24d3c8dfa25ae0fe7779e068b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the sequence, i.e remove all values.  <br /></td></tr>
<tr class="separator:af11011e24d3c8dfa25ae0fe7779e068b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1892dfbc2e0d03d73ad85c96c3bfae8f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a1892dfbc2e0d03d73ad85c96c3bfae8f">operator[]</a> (const size_t index) const</td></tr>
<tr class="memdesc:a1892dfbc2e0d03d73ad85c96c3bfae8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get const reference to the value with specified index.  <br /></td></tr>
<tr class="separator:a1892dfbc2e0d03d73ad85c96c3bfae8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01412f954f058caca524c2d06a472185"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a01412f954f058caca524c2d06a472185">at</a> (const size_t index) const</td></tr>
<tr class="memdesc:a01412f954f058caca524c2d06a472185"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get const reference to the value with specified index.  <br /></td></tr>
<tr class="separator:a01412f954f058caca524c2d06a472185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afee79994a29fdbbbb8cead84a6cad909"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#afee79994a29fdbbbb8cead84a6cad909">push_back</a> (const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;val)</td></tr>
<tr class="memdesc:afee79994a29fdbbbb8cead84a6cad909"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert a new value last in the sequence.  <br /></td></tr>
<tr class="separator:afee79994a29fdbbbb8cead84a6cad909"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7203f98e8b3aa5f973d09336ef0d5ecf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a7203f98e8b3aa5f973d09336ef0d5ecf">SetVal</a> (const size_t index, const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;val)</td></tr>
<tr class="memdesc:a7203f98e8b3aa5f973d09336ef0d5ecf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update a specific value.  <br /></td></tr>
<tr class="separator:a7203f98e8b3aa5f973d09336ef0d5ecf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a64d0f3da257b938b14fab2b593c2b7"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a7a64d0f3da257b938b14fab2b593c2b7">GetVal</a> (const size_t index) const</td></tr>
<tr class="memdesc:a7a64d0f3da257b938b14fab2b593c2b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get const reference to the value with specified index.  <br /></td></tr>
<tr class="separator:a7a64d0f3da257b938b14fab2b593c2b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30a12c063008edbee5c34c9981a342fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#a30a12c063008edbee5c34c9981a342fd">InsertAt</a> (const size_t index, const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;value)</td></tr>
<tr class="memdesc:a30a12c063008edbee5c34c9981a342fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert a new value at specified index.  <br /></td></tr>
<tr class="separator:a30a12c063008edbee5c34c9981a342fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1c4e9149fd5690d6c3f965394dbb6f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#ac1c4e9149fd5690d6c3f965394dbb6f3">EraseAt</a> (const size_t index)</td></tr>
<tr class="memdesc:ac1c4e9149fd5690d6c3f965394dbb6f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase a value at specified index.  <br /></td></tr>
<tr class="separator:ac1c4e9149fd5690d6c3f965394dbb6f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff3f1e34c6737fd54d3c4dbd81dd92a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01520.xhtml#aff3f1e34c6737fd54d3c4dbd81dd92a9">Copy</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;that) override</td></tr>
<tr class="memdesc:aff3f1e34c6737fd54d3c4dbd81dd92a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy all the members from "that" into "this".  <br /></td></tr>
<tr class="separator:aff3f1e34c6737fd54d3c4dbd81dd92a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_a01392"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_a01392')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></td></tr>
<tr class="memitem:a90a65efa4915d9a6b2930a90b0189fdd inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a90a65efa4915d9a6b2930a90b0189fdd">ContainerBase</a> ()</td></tr>
<tr class="memdesc:a90a65efa4915d9a6b2930a90b0189fdd inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <br /></td></tr>
<tr class="separator:a90a65efa4915d9a6b2930a90b0189fdd inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28969327fe3474b640dc8ddbb5ef2782 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a28969327fe3474b640dc8ddbb5ef2782">ContainerBase</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;)=default</td></tr>
<tr class="memdesc:a28969327fe3474b640dc8ddbb5ef2782 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <br /></td></tr>
<tr class="separator:a28969327fe3474b640dc8ddbb5ef2782 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcc120535ba864a170f3f2b3cb7f03b5 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#adcc120535ba864a170f3f2b3cb7f03b5">~ContainerBase</a> ()</td></tr>
<tr class="memdesc:adcc120535ba864a170f3f2b3cb7f03b5 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <br /></td></tr>
<tr class="separator:adcc120535ba864a170f3f2b3cb7f03b5 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad263469929db9104b47aab4eb19ecacd inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">IsNull</a> () const =0</td></tr>
<tr class="memdesc:ad263469929db9104b47aab4eb19ecacd inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the container set to null?  <br /></td></tr>
<tr class="separator:ad263469929db9104b47aab4eb19ecacd inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12b07a1d91572b107f8a51c5a82ffa38 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a12b07a1d91572b107f8a51c5a82ffa38">SetNull</a> ()=0</td></tr>
<tr class="memdesc:a12b07a1d91572b107f8a51c5a82ffa38 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the container to null.  <br /></td></tr>
<tr class="separator:a12b07a1d91572b107f8a51c5a82ffa38 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1b52624a8f2a163c5ecec102253059 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a9a1b52624a8f2a163c5ecec102253059">IsChanged</a> () const</td></tr>
<tr class="memdesc:a9a1b52624a8f2a163c5ecec102253059 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the change flag set on the container?  <br /></td></tr>
<tr class="separator:a9a1b52624a8f2a163c5ecec102253059 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5024cbf12afcd9670026e4ec5eb693f6 inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a5024cbf12afcd9670026e4ec5eb693f6">SetChanged</a> (const bool changed)</td></tr>
<tr class="memdesc:a5024cbf12afcd9670026e4ec5eb693f6 inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the containers change flag.  <br /></td></tr>
<tr class="separator:a5024cbf12afcd9670026e4ec5eb693f6 inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73ae69ffda7fa99f78eb73a85df8defa inherit pub_methods_a01392"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a73ae69ffda7fa99f78eb73a85df8defa">Copy</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;that)=0</td></tr>
<tr class="memdesc:a73ae69ffda7fa99f78eb73a85df8defa inherit pub_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual assignment.  <br /></td></tr>
<tr class="separator:a73ae69ffda7fa99f78eb73a85df8defa inherit pub_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_a01392"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_a01392')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></td></tr>
<tr class="memitem:ae61be338f36196155b670e05ce175aee inherit pro_methods_a01392"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a01392.xhtml">ContainerBase</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#ae61be338f36196155b670e05ce175aee">operator=</a> (const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;other)</td></tr>
<tr class="memdesc:ae61be338f36196155b670e05ce175aee inherit pro_methods_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <br /></td></tr>
<tr class="separator:ae61be338f36196155b670e05ce175aee inherit pro_methods_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_a01392"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_a01392')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></td></tr>
<tr class="memitem:a4257d6efb8b17e914896bf4ee9b1d7b8 inherit pro_attribs_a01392"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a></td></tr>
<tr class="memdesc:a4257d6efb8b17e914896bf4ee9b1d7b8 inherit pro_attribs_a01392"><td class="mdescLeft">&#160;</td><td class="mdescRight">The variable containing the change flag.  <br /></td></tr>
<tr class="separator:a4257d6efb8b17e914896bf4ee9b1d7b8 inherit pro_attribs_a01392"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;class T&gt;<br />
class Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;</div><p>Container class for sequences of values. </p>
<p>A sequence is a collection of values that can dynamically grow or shrink in size. The whole container has a change flag that will automatically be set when values are added, removed or changed. Values in a sequence cannot be null and does not have individual change flags. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a62c1858032dd7617c329662939a96c93" name="a62c1858032dd7617c329662939a96c93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62c1858032dd7617c329662939a96c93">&#9670;&#160;</a></span>const_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef StorageType::const_iterator <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::const_iterator</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aff2ef2ba76264c37f8bacb618cbd6928" name="aff2ef2ba76264c37f8bacb618cbd6928"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff2ef2ba76264c37f8bacb618cbd6928">&#9670;&#160;</a></span>ContainedType</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef T <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::ContainedType</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad07a0d62c851ab77955ea7a92fa294c8" name="ad07a0d62c851ab77955ea7a92fa294c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad07a0d62c851ab77955ea7a92fa294c8">&#9670;&#160;</a></span>StorageType</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef std::deque&lt;T&gt; <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::StorageType</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a12b93f6d8d6e30c53550255c88ca3f74" name="a12b93f6d8d6e30c53550255c88ca3f74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12b93f6d8d6e30c53550255c88ca3f74">&#9670;&#160;</a></span>SequenceContainer()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::SequenceContainer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default Constructor. </p>
<p>Construct a container that is not changed and not null. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a01412f954f058caca524c2d06a472185" name="a01412f954f058caca524c2d06a472185"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01412f954f058caca524c2d06a472185">&#9670;&#160;</a></span>at()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp; <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get const reference to the value with specified index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[in] - Index of the value to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Const reference to a value. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>exception if index is not in range </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a74bbeb61a35152ebfc00e03a594c4ad7" name="a74bbeb61a35152ebfc00e03a594c4ad7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74bbeb61a35152ebfc00e03a594c4ad7">&#9670;&#160;</a></span>back()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp; <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::back </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a const reference to the last value in the sequence. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to last value. </dd></dl>

</div>
</div>
<a id="a751c954141e0f6cede7a18ed2ac3b6f6" name="a751c954141e0f6cede7a18ed2ac3b6f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a751c954141e0f6cede7a18ed2ac3b6f6">&#9670;&#160;</a></span>begin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01520.xhtml#a62c1858032dd7617c329662939a96c93">const_iterator</a> <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get const_iterator pointing to the first element in the sequence. </p>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to first element. </dd></dl>

</div>
</div>
<a id="af11011e24d3c8dfa25ae0fe7779e068b" name="af11011e24d3c8dfa25ae0fe7779e068b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af11011e24d3c8dfa25ae0fe7779e068b">&#9670;&#160;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the sequence, i.e remove all values. </p>
<p>After a call to clear the sequence will be empty which is implicitly the same as being null. </p>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

<p class="reference">Referenced by <a class="el" href="a01520.xhtml#a034ce1753bdceb9a9385197f130440a4">Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;::SetNull()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01520_af11011e24d3c8dfa25ae0fe7779e068b_icgraph.svg" width="434" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aff3f1e34c6737fd54d3c4dbd81dd92a9" name="aff3f1e34c6737fd54d3c4dbd81dd92a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff3f1e34c6737fd54d3c4dbd81dd92a9">&#9670;&#160;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::Copy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a01392.xhtml">ContainerBase</a> &amp;&#160;</td>
          <td class="paramname"><em>that</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy all the members from "that" into "this". </p>
<p>Types must be the same for this to work!</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">that</td><td>[in] - The object to copy into this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="a01464.xhtml" title="Meant to be used when something goes very wrong.">SoftwareViolationException</a></td><td>If the types are not of the same kind. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="a01392.xhtml#a73ae69ffda7fa99f78eb73a85df8defa">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>, and <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="a8571eddd43de46700fc27a60573546a0" name="a8571eddd43de46700fc27a60573546a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8571eddd43de46700fc27a60573546a0">&#9670;&#160;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if sequence is empty. </p>
<dl class="section return"><dt>Returns</dt><dd>True if sequence is empty, else false. </dd></dl>

<p class="reference">Referenced by <a class="el" href="a01520.xhtml#a79144fd1665b31ce639134765d686b04">Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;::IsNull()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01520_a8571eddd43de46700fc27a60573546a0_icgraph.svg" width="434" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a3fb1631407f8d25e0d8fce7d37d0ae22" name="a3fb1631407f8d25e0d8fce7d37d0ae22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fb1631407f8d25e0d8fce7d37d0ae22">&#9670;&#160;</a></span>end()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a01520.xhtml#a62c1858032dd7617c329662939a96c93">const_iterator</a> <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get const_iterator pointing past the last element in the sequence. </p>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to the end of the sequence. </dd></dl>

</div>
</div>
<a id="ac1c4e9149fd5690d6c3f965394dbb6f3" name="ac1c4e9149fd5690d6c3f965394dbb6f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1c4e9149fd5690d6c3f965394dbb6f3">&#9670;&#160;</a></span>EraseAt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::EraseAt </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Erase a value at specified index. </p>
<p>The sequence will shrink.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[in] - Index of the value to be removed. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="a8b01eaac61d8b1d43e543a732f1ba77e" name="a8b01eaac61d8b1d43e543a732f1ba77e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b01eaac61d8b1d43e543a732f1ba77e">&#9670;&#160;</a></span>front()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp; <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::front </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a const reference to the first value in the sequence. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to first value. </dd></dl>

</div>
</div>
<a id="a7a64d0f3da257b938b14fab2b593c2b7" name="a7a64d0f3da257b938b14fab2b593c2b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a64d0f3da257b938b14fab2b593c2b7">&#9670;&#160;</a></span>GetVal()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp; <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::GetVal </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get const reference to the value with specified index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[in] - Index of the value to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Const reference to a value. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>exception if index is not in range </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a30a12c063008edbee5c34c9981a342fd" name="a30a12c063008edbee5c34c9981a342fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30a12c063008edbee5c34c9981a342fd">&#9670;&#160;</a></span>InsertAt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::InsertAt </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert a new value at specified index. </p>
<p>The sequence size will grow.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[in] - Index of the new value. </td></tr>
    <tr><td class="paramname">value</td><td>[in] - Value to insert. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="a79144fd1665b31ce639134765d686b04" name="a79144fd1665b31ce639134765d686b04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79144fd1665b31ce639134765d686b04">&#9670;&#160;</a></span>IsNull()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::IsNull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is the container set to null? </p>
<dl class="section return"><dt>Returns</dt><dd>True if the container is set to null. </dd></dl>

<p>Implements <a class="el" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a01520.xhtml#a8571eddd43de46700fc27a60573546a0">Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;::empty()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01520_a79144fd1665b31ce639134765d686b04_cgraph.svg" width="434" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a1892dfbc2e0d03d73ad85c96c3bfae8f" name="a1892dfbc2e0d03d73ad85c96c3bfae8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1892dfbc2e0d03d73ad85c96c3bfae8f">&#9670;&#160;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp; <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get const reference to the value with specified index. </p>
<p>Note that no checks are made to see whether index is inside range.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[in] - Index of the value to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Const reference to a value. </dd></dl>

</div>
</div>
<a id="afee79994a29fdbbbb8cead84a6cad909" name="afee79994a29fdbbbb8cead84a6cad909"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afee79994a29fdbbbb8cead84a6cad909">&#9670;&#160;</a></span>push_back()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert a new value last in the sequence. </p>
<p>If the sequence was null before it will no longer be null after a call to push_back. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>[in] - Value to be inserted. </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="a034ce1753bdceb9a9385197f130440a4" name="a034ce1753bdceb9a9385197f130440a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a034ce1753bdceb9a9385197f130440a4">&#9670;&#160;</a></span>SetNull()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::SetNull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the container to null. </p>

<p>Implements <a class="el" href="a01392.xhtml#a12b07a1d91572b107f8a51c5a82ffa38">Safir::Dob::Typesystem::ContainerBase</a>.</p>

<p class="reference">References <a class="el" href="a01520.xhtml#af11011e24d3c8dfa25ae0fe7779e068b">Safir::Dob::Typesystem::SequenceContainer&lt; T &gt;::clear()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a01520_a034ce1753bdceb9a9385197f130440a4_cgraph.svg" width="434" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a7203f98e8b3aa5f973d09336ef0d5ecf" name="a7203f98e8b3aa5f973d09336ef0d5ecf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7203f98e8b3aa5f973d09336ef0d5ecf">&#9670;&#160;</a></span>SetVal()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::SetVal </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="a01520.xhtml#aff2ef2ba76264c37f8bacb618cbd6928">ContainedType</a> &amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update a specific value. </p>
<p>Will not add new values. And indexing outside the sequence will generate an exception.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[in] - Index of the value to set. </td></tr>
    <tr><td class="paramname">val</td><td>[in] - Value to set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>exception if index is not in range </td></tr>
  </table>
  </dd>
</dl>

<p class="reference">References <a class="el" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a>.</p>

</div>
</div>
<a id="a26cf4843564574b0b3dee04a2171b3df" name="a26cf4843564574b0b3dee04a2171b3df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26cf4843564574b0b3dee04a2171b3df">&#9670;&#160;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="a01520.xhtml">Safir::Dob::Typesystem::SequenceContainer</a>&lt; T &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the size of the sequence, i.e number of contained values. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of values in the sequence. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00385.xhtml">Safir</a></li><li class="navelem"><a class="el" href="a00387.xhtml">Dob</a></li><li class="navelem"><a class="el" href="a00389.xhtml">Typesystem</a></li><li class="navelem"><a class="el" href="a01520.xhtml">SequenceContainer</a></li>
    <li class="footer">Generated on Fri Mar 3 2023 14:01:20 for Safir SDK Core by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
  </ul>
</div>
</body>
</html>
