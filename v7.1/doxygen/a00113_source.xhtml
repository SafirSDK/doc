<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Safir SDK Core: /home/lars/safir/safir-sdk-core/include/Safir/Dob/Typesystem/ObjectContainer.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a00113_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">ObjectContainer.h</div></div>
</div><!--header-->
<div class="contents">
<a href="a00113.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/******************************************************************************</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">*</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">* Copyright Saab AB, 2006-2013 (http://safirsdkcore.com)</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">*</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">* Created by: Lars Hagstr√∂m / stlrha</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">*</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment">*******************************************************************************</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">*</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">* This file is part of Safir SDK Core.</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">*</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">* Safir SDK Core is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">* it under the terms of version 3 of the GNU General Public License as</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment">* published by the Free Software Foundation.</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">*</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment">* Safir SDK Core is distributed in the hope that it will be useful,</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">* GNU General Public License for more details.</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">*</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment">* You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">* along with Safir SDK Core.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">*</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">******************************************************************************/</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="preprocessor">#ifndef __DOTS_OBJECT_CONTAINER_H__</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="preprocessor">#define __DOTS_OBJECT_CONTAINER_H__</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="preprocessor">#include &lt;<a class="code" href="a02586.xhtml">Safir/Dob/Typesystem/Defs.h</a>&gt;</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="preprocessor">#include &lt;<a class="code" href="a00077.xhtml">Safir/Dob/Typesystem/ContainerBase.h</a>&gt;</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="preprocessor">#include &lt;<a class="code" href="a00110.xhtml">Safir/Dob/Typesystem/Object.h</a>&gt;</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="preprocessor">#include &lt;<a class="code" href="a00095.xhtml">Safir/Dob/Typesystem/Exceptions.h</a>&gt;</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="preprocessor">#include &lt;typeinfo&gt;</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="keyword">namespace </span><a class="code hl_namespace" href="a00385.xhtml">Safir</a></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>{</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="keyword">namespace </span>Dob</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>{</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="keyword">namespace </span>Typesystem</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>{</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno"><a class="line" href="a01496.xhtml">   44</a></span>    <span class="keyword">class </span><a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a>: <span class="keyword">public</span> <a class="code hl_class" href="a01392.xhtml">ContainerBase</a></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>    <span class="keyword">public</span>:</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="a01496.xhtml#abc5fe23aedb525d8f000252ea5d0509d">   48</a></span>        <a class="code hl_function" href="a01496.xhtml#abc5fe23aedb525d8f000252ea5d0509d">ObjectContainerBase</a>():<a class="code hl_class" href="a01392.xhtml">ContainerBase</a>() {}</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="a01496.xhtml#af2e1dc72ec0380bbb458cf0f2da3880d">   52</a></span>        <a class="code hl_function" href="a01496.xhtml#af2e1dc72ec0380bbb458cf0f2da3880d">ObjectContainerBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a>&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno"><a class="line" href="a01496.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">   64</a></span>        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a01496.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">SetPtr</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> &amp; ptr) = 0;</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="a01496.xhtml#aa5f9fb5ad7450f32ee51b70115bce80a">   73</a></span>        <span class="keywordtype">bool</span> <a class="code hl_function" href="a01496.xhtml#aa5f9fb5ad7450f32ee51b70115bce80a">IsChangedHere</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a>;}</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="a01496.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">   82</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01496.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">SetChangedHere</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> changed) {<a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = changed;}</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="a01496.xhtml#a442510fb4ad39c9b831bcc1485efe5af">  106</a></span>        <span class="keyword">virtual</span>       <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; <a class="code hl_function" href="a01496.xhtml#a442510fb4ad39c9b831bcc1485efe5af">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)       = 0;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="a01496.xhtml#ab44170487b12303855be13050b99e36b">  122</a></span>        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; <a class="code hl_function" href="a01496.xhtml#ab44170487b12303855be13050b99e36b">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno"><a class="line" href="a01496.xhtml#aa5ad8977290cb7057106eead21a27ea6">  137</a></span>        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> <a class="code hl_function" href="a01496.xhtml#aa5ad8977290cb7057106eead21a27ea6">GetObjectPointer</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno"><a class="line" href="a01496.xhtml#aff8609b609d6b921d80468886cb641c0">  151</a></span>        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a01496.xhtml#aff8609b609d6b921d80468886cb641c0">SetObjectPointer</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> ptr) = 0;</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno"><a class="line" href="a01496.xhtml#a6d83f3e64d6e7e4ab5bc95ce25ed677a">  159</a></span>        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a01496.xhtml#a6d83f3e64d6e7e4ab5bc95ce25ed677a">ResetObjectPointer</a>() = 0;</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    <span class="keyword">protected</span>:</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno"><a class="line" href="a01496.xhtml#a822ad29b4a74d37a0127679ff6cd550c">  164</a></span>        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_friend" href="a01496.xhtml#a822ad29b4a74d37a0127679ff6cd550c">Safir::Dob::Typesystem::Internal::BlobOperations</a>;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">  172</a></span>        <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a> &amp; <a class="code hl_function" href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a> &amp; other)</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>        {<a class="code hl_function" href="a01392.xhtml#ae61be338f36196155b670e05ce175aee">ContainerBase::operator =</a>(other); <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    };</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno"><a class="line" href="a01500.xhtml">  189</a></span>    <span class="keyword">class </span><a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> : <span class="keyword">public</span> <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    {</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>    <span class="keyword">public</span>:</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">  193</a></span>        <span class="keyword">typedef</span> std::shared_ptr&lt;T&gt; <a class="code hl_typedef" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a>;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno"><a class="line" href="a01500.xhtml#a81f1c0c27592786b855ce876c318a4d2">  194</a></span>        <span class="keyword">typedef</span> <a class="code hl_typedef" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> <a class="code hl_typedef" href="a01500.xhtml#a81f1c0c27592786b855ce876c318a4d2">ContainedType</a>;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno"><a class="line" href="a01500.xhtml#adf0067e984e8f0a89d046ef9031ffcea">  201</a></span>        <a class="code hl_function" href="a01500.xhtml#adf0067e984e8f0a89d046ef9031ffcea">ObjectContainerImpl</a>():<a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a>() {}</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno"><a class="line" href="a01500.xhtml#ab5261580ea8999538af6f7beb1678970">  211</a></span>        <a class="code hl_function" href="a01500.xhtml#ab5261580ea8999538af6f7beb1678970">ObjectContainerImpl</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> &amp; other):</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>            <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a>(other) <span class="comment">//make sure we use copy constructor of parent</span></div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>        {</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>            <span class="keywordflow">if</span> (!other.<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>            {</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>                m_pObject = std::dynamic_pointer_cast&lt;T&gt;(other.m_pObject-&gt;Clone());</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>                <span class="keywordflow">if</span> (m_pObject == NULL)</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>                {</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>                    <span class="keywordflow">throw</span> <a class="code hl_class" href="a01456.xhtml">IncompatibleTypesException</a>(L<span class="stringliteral">&quot;The types are not compatible!&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>                }</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>            }</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>        }</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno"><a class="line" href="a01500.xhtml#aa05a3e9e763dacdfd8ea28d8b07df49c">  231</a></span>        <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> &amp; <a class="code hl_function" href="a01500.xhtml#aa05a3e9e763dacdfd8ea28d8b07df49c">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> &amp; other)</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>        {</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>            <a class="code hl_function" href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">ObjectContainerBase::operator=</a>(other);<span class="comment">//make sure we use copy assignment of parent</span></div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>            <span class="keywordflow">if</span> (other.<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>            {</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>                m_pObject.reset();</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>            }</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>            {</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>                m_pObject = std::dynamic_pointer_cast&lt;T&gt;(other.m_pObject-&gt;Clone());</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>                <span class="keywordflow">if</span> (m_pObject == NULL)</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>                {</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>                    <span class="keywordflow">throw</span> <a class="code hl_class" href="a01456.xhtml">IncompatibleTypesException</a>(L<span class="stringliteral">&quot;The types are not compatible!&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>                }</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>            }</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>        }</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno"><a class="line" href="a01500.xhtml#afd45c79b07275d5f5dab8508de967692">  258</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#afd45c79b07275d5f5dab8508de967692">SetPtr</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> &amp; ptr)</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>        {</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>            <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>            m_pObject = ptr;</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>        }</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno"><a class="line" href="a01500.xhtml#a1b3e2431e2f82326edc62c692c562719">  264</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#a1b3e2431e2f82326edc62c692c562719">SetPtr</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> &amp; ptr)<span class="keyword"> override</span></div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>            <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>            m_pObject = std::dynamic_pointer_cast&lt;T&gt;(ptr);</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>            <span class="keywordflow">if</span> (m_pObject == NULL)</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>            {</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>                <span class="keywordflow">throw</span> <a class="code hl_class" href="a01456.xhtml">IncompatibleTypesException</a>(L<span class="stringliteral">&quot;The types are not compatible!&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>            }</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>        }</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span> </div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno"><a class="line" href="a01500.xhtml#aa124d8919bfe8beec076c3a284298e96">  283</a></span>        <span class="keyword">const</span> <a class="code hl_typedef" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> &amp; <a class="code hl_function" href="a01500.xhtml#aa124d8919bfe8beec076c3a284298e96">GetPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span><span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject;}</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno"><a class="line" href="a01500.xhtml#ab0fef9741dc912277dbf4f992cb0c0a1">  295</a></span>        T * <a class="code hl_function" href="a01500.xhtml#ab0fef9741dc912277dbf4f992cb0c0a1">operator-&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span><span class="keyword">        </span>{ <span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject.operator-&gt;(); }</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno"><a class="line" href="a01500.xhtml#a2743b197b4d6f7cbae2f8850a66a8fb4">  299</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#a2743b197b4d6f7cbae2f8850a66a8fb4">SetChanged</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> changed)<span class="keyword"> override </span>{<a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = changed; <span class="keywordflow">if</span> (!<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) m_pObject-&gt;SetChanged(changed);}</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno"><a class="line" href="a01500.xhtml#abc54c705e8c4449d0a1f6939e1a8c8e5">  301</a></span>        <span class="keywordtype">bool</span> <a class="code hl_function" href="a01500.xhtml#abc54c705e8c4449d0a1f6939e1a8c8e5">IsChanged</a>()<span class="keyword"> const override </span>{<span class="keywordflow">return</span> <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> || (!<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>() &amp;&amp; m_pObject-&gt;IsChanged());}</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno"><a class="line" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">  303</a></span>        <span class="keywordtype">bool</span> <a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()<span class="keyword"> const override </span>{<span class="keywordflow">return</span> m_pObject == NULL;}</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span> </div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno"><a class="line" href="a01500.xhtml#ad33ca18b67ea15ab60197f6bc72bc929">  305</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#ad33ca18b67ea15ab60197f6bc72bc929">SetNull</a>()<span class="keyword"> override</span></div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>            <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>            m_pObject.reset();</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>        }</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno"><a class="line" href="a01500.xhtml#aba6743de949e6d546bb922c4ae85efea">  311</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#aba6743de949e6d546bb922c4ae85efea">Copy</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; that)<span class="keyword"> override</span></div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>            <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;that)</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>            {</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>                <span class="keywordflow">if</span> (<span class="keyword">typeid</span>(*<span class="keyword">this</span>) != <span class="keyword">typeid</span>(that))</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>                {</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>                    <span class="keywordflow">throw</span> <a class="code hl_class" href="a01464.xhtml">SoftwareViolationException</a>(L<span class="stringliteral">&quot;Invalid call to Copy, containers are not of same type&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>                }</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>                <span class="keyword">const</span> <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl&lt;T&gt;</a> &amp; castedThat = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl&lt;T&gt;</a> &amp;<span class="keyword">&gt;</span>(that);</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>                <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = castedThat.<a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a>;</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>                <span class="keywordflow">if</span> (that.<a class="code hl_function" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">IsNull</a>())</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>                {</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>                    m_pObject.reset();</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>                }</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>                <span class="keywordflow">else</span></div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>                {</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>                    <a class="code hl_function" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">SetObjectPointer</a>(castedThat.m_pObject-&gt;Clone());</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>                }</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>            }</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>        }</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span> </div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>        <span class="comment">//Reflection part (Don&#39;t use unless you really know what you&#39;re doing!!)</span></div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno"><a class="line" href="a01500.xhtml#a621578889f3c975db72bbb1a61554261">  333</a></span>        <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; <a class="code hl_function" href="a01500.xhtml#a621578889f3c975db72bbb1a61554261">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)<span class="keyword"> override</span></div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno"><a class="line" href="a01500.xhtml#aa1a41513c8e6025dea48344ad6fcfefa">  335</a></span>        <span class="keyword">const</span> <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; <a class="code hl_function" href="a01500.xhtml#aa1a41513c8e6025dea48344ad6fcfefa">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span><span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno"><a class="line" href="a01500.xhtml#a09fac7392e38a41792cca8dcbbc30c7b">  351</a></span>        <a class="code hl_typedef" href="a00389.xhtml#a77c8a9fabe66e72ccbc66c729540b9b6">Int32</a> <a class="code hl_function" href="a01500.xhtml#a09fac7392e38a41792cca8dcbbc30c7b">CalculateBlobSize</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">return</span> 0; <span class="keywordflow">else</span> <span class="keywordflow">return</span> m_pObject-&gt;CalculateBlobSize();}</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span> </div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno"><a class="line" href="a01500.xhtml#a986be1bfb24cc8b4cfbaf5b0453dd238">  355</a></span>        <span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> <a class="code hl_function" href="a01500.xhtml#a986be1bfb24cc8b4cfbaf5b0453dd238">GetObjectPointer</a>()<span class="keyword"> const override </span>{<span class="keywordflow">return</span> std::static_pointer_cast&lt;Object&gt;(m_pObject);}</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno"><a class="line" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">  356</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">SetObjectPointer</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> ptr)<span class="keyword"> override</span></div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span><span class="preprocessor">#ifndef NDEBUG</span></div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>            m_pObject = std::dynamic_pointer_cast&lt;T&gt;(ptr);</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>            <span class="keywordflow">if</span>(m_pObject == NULL)</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>            {</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>                <span class="keywordflow">throw</span> <a class="code hl_class" href="a01464.xhtml">SoftwareViolationException</a>(L<span class="stringliteral">&quot;Failed to cast object pointer to expected type&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>            }</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>            m_pObject = std::static_pointer_cast&lt;T&gt;(ptr);</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>        }</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno"><a class="line" href="a01500.xhtml#a11a79e8b12da7a894a132a6aaa0c1ecf">  368</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#a11a79e8b12da7a894a132a6aaa0c1ecf">ResetObjectPointer</a>()<span class="keyword"> override </span>{m_pObject.reset();}</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>    <span class="keyword">private</span>:</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>        <a class="code hl_typedef" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> m_pObject;</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>    };</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno"><a class="line" href="a01504.xhtml">  380</a></span>    <span class="keyword">class </span><a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a>&lt;<a class="code hl_class" href="a01492.xhtml">Object</a>&gt; : <span class="keyword">public</span> <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a></div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>    {</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>    <span class="keyword">public</span>:</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno"><a class="line" href="a01504.xhtml#ace171a14f310a1b399b585a34ec5b0a1">  384</a></span>        <span class="keyword">typedef</span> std::shared_ptr&lt;Object&gt; <a class="code hl_typedef" href="a01504.xhtml#ace171a14f310a1b399b585a34ec5b0a1">T_Ptr</a>;</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno"><a class="line" href="a01504.xhtml#a997523b99ee184c06c792a2ce4dd5be6">  385</a></span>        <span class="keyword">typedef</span> <a class="code hl_typedef" href="a01504.xhtml#ace171a14f310a1b399b585a34ec5b0a1">T_Ptr</a> <a class="code hl_typedef" href="a01504.xhtml#a997523b99ee184c06c792a2ce4dd5be6">ContainedType</a>;</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span> </div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno"><a class="line" href="a01504.xhtml#a5d3589e562ccc500fd90f8982a7dd66b">  392</a></span>        <a class="code hl_function" href="a01504.xhtml#a5d3589e562ccc500fd90f8982a7dd66b">ObjectContainerImpl</a>():<a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a>() {}</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span> </div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno"><a class="line" href="a01504.xhtml#ad81005d58a3035d1b569f7942b05cf2d">  402</a></span>        <a class="code hl_function" href="a01504.xhtml#ad81005d58a3035d1b569f7942b05cf2d">ObjectContainerImpl</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> &amp; other):</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>            <a class="code hl_class" href="a01496.xhtml">ObjectContainerBase</a>(other) <span class="comment">//make sure we use copy constructor of parent</span></div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>        {</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>            <span class="keywordflow">if</span> (!other.<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>            {</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>                m_pObject = other.m_pObject-&gt;Clone();</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>            }</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>        }</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span> </div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno"><a class="line" href="a01504.xhtml#a1654c48a9ef1dd8afab0f4a371ca43cd">  417</a></span>        <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> &amp; <a class="code hl_function" href="a01504.xhtml#a1654c48a9ef1dd8afab0f4a371ca43cd">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl</a> &amp; other)</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>        {</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>            <a class="code hl_function" href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">ObjectContainerBase::operator =</a>(other);<span class="comment">//make sure we use copy assignment of parent</span></div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span>            <span class="keywordflow">if</span> (other.<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>            {</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>                m_pObject.reset();</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>            }</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>            {</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>                m_pObject = other.m_pObject-&gt;Clone();</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>            }</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>        }</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span> </div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span> </div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno"><a class="line" href="a01504.xhtml#a3ca4fdf1173e0743e19bdcd8ff31d939">  432</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01504.xhtml#a3ca4fdf1173e0743e19bdcd8ff31d939">SetPtr</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> &amp; ptr)<span class="keyword"> override</span></div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>            <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>            m_pObject = ptr;</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>        }</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span> </div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno"><a class="line" href="a01504.xhtml#a168e26b6b3bc8c0d17ab184ca5bd301c">  447</a></span>        <span class="keyword">const</span> <a class="code hl_typedef" href="a01504.xhtml#ace171a14f310a1b399b585a34ec5b0a1">T_Ptr</a> &amp; <a class="code hl_function" href="a01504.xhtml#a168e26b6b3bc8c0d17ab184ca5bd301c">GetPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>            <span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>            {</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>                <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>            }</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>            <span class="keywordflow">return</span> m_pObject;</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>        }</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span> </div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno"><a class="line" href="a01504.xhtml#a2656ffba20c135bced33949412e68f6e">  465</a></span>        <a class="code hl_class" href="a01492.xhtml">Object</a> * <a class="code hl_function" href="a01504.xhtml#a2656ffba20c135bced33949412e68f6e">operator-&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>            <span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span>            {</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>                <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>            }</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>            <span class="keywordflow">return</span> m_pObject.operator-&gt;();</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span>        }</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span> </div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno"><a class="line" href="a01504.xhtml#a366a64ce88ea6ded162194371d9d6c02">  474</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01504.xhtml#a366a64ce88ea6ded162194371d9d6c02">SetChanged</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> changed)<span class="keyword"> override</span></div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>            <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = changed;</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>            <span class="keywordflow">if</span> (!<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>())</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>            {</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>                m_pObject-&gt;SetChanged(changed);</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>            }</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>        }</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span> </div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno"><a class="line" href="a01504.xhtml#aa333803662ae43e8e5f9f79eb4e1254c">  483</a></span>        <span class="keywordtype">bool</span> <a class="code hl_function" href="a01504.xhtml#aa333803662ae43e8e5f9f79eb4e1254c">IsChanged</a>()<span class="keyword"> const override </span>{<span class="keywordflow">return</span> <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> || (!<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>() &amp;&amp; m_pObject-&gt;IsChanged());}</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span> </div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno"><a class="line" href="a01504.xhtml#aab5e12a7d597d9440b0ee4a3bb1ce95c">  485</a></span>        <span class="keywordtype">bool</span> <a class="code hl_function" href="a01504.xhtml#aab5e12a7d597d9440b0ee4a3bb1ce95c">IsNull</a>()<span class="keyword"> const override </span>{<span class="keywordflow">return</span> m_pObject == NULL;}</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span> </div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno"><a class="line" href="a01504.xhtml#af0d98aa70f8eae274bc44f001d5d86db">  487</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01504.xhtml#af0d98aa70f8eae274bc44f001d5d86db">SetNull</a>()<span class="keyword"> override</span></div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>            <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>            m_pObject.reset();</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>        }</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span> </div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno"><a class="line" href="a01504.xhtml#ac782e96a6ab6c6b98b8cbee654ac7e23">  493</a></span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01504.xhtml#ac782e96a6ab6c6b98b8cbee654ac7e23">Copy</a>(<span class="keyword">const</span> <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; that)<span class="keyword"> override</span></div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>            <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;that)</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span>            {</div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span>                <span class="keywordflow">if</span> (<span class="keyword">typeid</span>(*<span class="keyword">this</span>) != <span class="keyword">typeid</span>(that))</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span>                {</div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span>                    <span class="keywordflow">throw</span> <a class="code hl_class" href="a01464.xhtml">SoftwareViolationException</a>(L<span class="stringliteral">&quot;Invalid call to Copy, containers are not of same type&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span>                }</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span>                <span class="keyword">const</span> <a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl&lt;Object&gt;</a> &amp; castedThat = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code hl_class" href="a01500.xhtml">ObjectContainerImpl&lt;Object&gt;</a> &amp;<span class="keyword">&gt;</span>(that);</div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span>                <a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = castedThat.<a class="code hl_variable" href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a>;</div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span>                <span class="keywordflow">if</span> (that.<a class="code hl_function" href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">IsNull</a>())</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>                {</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>                    m_pObject.reset();</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>                }</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>                <span class="keywordflow">else</span></div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span>                {</div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span>                    <a class="code hl_function" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">SetObjectPointer</a>(castedThat.m_pObject-&gt;Clone());</div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span>                }</div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span>            }</div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span>        }</div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span> </div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>        <span class="comment">//Reflection part (Don&#39;t use unless you really know what you&#39;re doing!!)</span></div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno"><a class="line" href="a01504.xhtml#a395e1983612a0cc79403e9b3f9d88953">  515</a></span>        <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; <a class="code hl_function" href="a01504.xhtml#a395e1983612a0cc79403e9b3f9d88953">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)<span class="keyword"> override</span></div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span><span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno"><a class="line" href="a01504.xhtml#afbb0dd70185b969a2fbc61096fbca361">  517</a></span>        <span class="keyword">const</span> <a class="code hl_class" href="a01392.xhtml">ContainerBase</a> &amp; <a class="code hl_function" href="a01504.xhtml#afbb0dd70185b969a2fbc61096fbca361">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span><span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code hl_function" href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code hl_class" href="a01468.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code hl_define" href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span> </div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>    <span class="keyword">private</span>:</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span>        <span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> <a class="code hl_function" href="a01500.xhtml#a986be1bfb24cc8b4cfbaf5b0453dd238">GetObjectPointer</a>()<span class="keyword"> const override </span>{<span class="keywordflow">return</span> std::static_pointer_cast&lt;Object&gt;(m_pObject);}</div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">SetObjectPointer</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">ObjectPtr</a> ptr)<span class="keyword"> override</span></div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span><span class="keyword">        </span>{</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span>            m_pObject = ptr;</div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span>        }</div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span>        <span class="keywordtype">void</span> <a class="code hl_function" href="a01500.xhtml#a11a79e8b12da7a894a132a6aaa0c1ecf">ResetObjectPointer</a>()<span class="keyword"> override </span>{m_pObject.reset();}</div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span> </div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span> </div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>        <a class="code hl_typedef" href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">T_Ptr</a> m_pObject;</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>    };</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span> </div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno"><a class="line" href="a00389.xhtml#a803dfc314ceb691cd835264e2ae1b943">  540</a></span>    <span class="keyword">typedef</span> <a class="code hl_class" href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl&lt;Object&gt;</a> <a class="code hl_typedef" href="a00389.xhtml#a803dfc314ceb691cd835264e2ae1b943">ObjectContainer</a>;</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>}</div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span>}</div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span>}</div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span> </div>
<div class="ttc" id="aa00077_xhtml"><div class="ttname"><a href="a00077.xhtml">ContainerBase.h</a></div></div>
<div class="ttc" id="aa00095_xhtml"><div class="ttname"><a href="a00095.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="aa00095_xhtml_aa50218d805518247edfff3d9328be684"><div class="ttname"><a href="a00095.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a></div><div class="ttdeci">#define __WFILE__</div><div class="ttdef"><b>Definition:</b> Exceptions.h:31</div></div>
<div class="ttc" id="aa00110_xhtml"><div class="ttname"><a href="a00110.xhtml">Object.h</a></div></div>
<div class="ttc" id="aa00385_xhtml"><div class="ttname"><a href="a00385.xhtml">Safir</a></div><div class="ttdoc">This namespace contains all the functionality and definitions of the SAFIR SDK.</div><div class="ttdef"><b>Definition:</b> Backdoor.h:31</div></div>
<div class="ttc" id="aa00389_xhtml_a77c8a9fabe66e72ccbc66c729540b9b6"><div class="ttname"><a href="a00389.xhtml#a77c8a9fabe66e72ccbc66c729540b9b6">Safir::Dob::Typesystem::Int32</a></div><div class="ttdeci">DotsC_Int32 Int32</div><div class="ttdoc">32 bit integer type.</div><div class="ttdef"><b>Definition:</b> Defs.h:66</div></div>
<div class="ttc" id="aa00389_xhtml_a803dfc314ceb691cd835264e2ae1b943"><div class="ttname"><a href="a00389.xhtml#a803dfc314ceb691cd835264e2ae1b943">Safir::Dob::Typesystem::ObjectContainer</a></div><div class="ttdeci">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt; ObjectContainer</div><div class="ttdoc">Container for DOB Objects.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:540</div></div>
<div class="ttc" id="aa00389_xhtml_aa76c34ade73d7e4537e0725ffe7b5d95"><div class="ttname"><a href="a00389.xhtml#aa76c34ade73d7e4537e0725ffe7b5d95">Safir::Dob::Typesystem::ObjectPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Object &gt; ObjectPtr</div><div class="ttdoc">A smart pointer to an Object.</div><div class="ttdef"><b>Definition:</b> Object.h:44</div></div>
<div class="ttc" id="aa01392_xhtml"><div class="ttname"><a href="a01392.xhtml">Safir::Dob::Typesystem::ContainerBase</a></div><div class="ttdoc">Base class for all Containers.</div><div class="ttdef"><b>Definition:</b> ContainerBase.h:44</div></div>
<div class="ttc" id="aa01392_xhtml_a4257d6efb8b17e914896bf4ee9b1d7b8"><div class="ttname"><a href="a01392.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a></div><div class="ttdeci">bool m_bIsChanged</div><div class="ttdoc">The variable containing the change flag.</div><div class="ttdef"><b>Definition:</b> ContainerBase.h:127</div></div>
<div class="ttc" id="aa01392_xhtml_ad263469929db9104b47aab4eb19ecacd"><div class="ttname"><a href="a01392.xhtml#ad263469929db9104b47aab4eb19ecacd">Safir::Dob::Typesystem::ContainerBase::IsNull</a></div><div class="ttdeci">virtual bool IsNull() const =0</div><div class="ttdoc">Is the container set to null?</div></div>
<div class="ttc" id="aa01392_xhtml_ae61be338f36196155b670e05ce175aee"><div class="ttname"><a href="a01392.xhtml#ae61be338f36196155b670e05ce175aee">Safir::Dob::Typesystem::ContainerBase::operator=</a></div><div class="ttdeci">ContainerBase &amp; operator=(const ContainerBase &amp;other)</div><div class="ttdoc">Copy assignment operator.</div><div class="ttdef"><b>Definition:</b> ContainerBase.h:121</div></div>
<div class="ttc" id="aa01456_xhtml"><div class="ttname"><a href="a01456.xhtml">Safir::Dob::Typesystem::IncompatibleTypesException</a></div><div class="ttdoc">This exception is thrown if a class cannot be cast to the expected type.</div><div class="ttdef"><b>Definition:</b> Exceptions.h:290</div></div>
<div class="ttc" id="aa01464_xhtml"><div class="ttname"><a href="a01464.xhtml">Safir::Dob::Typesystem::SoftwareViolationException</a></div><div class="ttdoc">Meant to be used when something goes very wrong.</div><div class="ttdef"><b>Definition:</b> Exceptions.h:357</div></div>
<div class="ttc" id="aa01468_xhtml"><div class="ttname"><a href="a01468.xhtml">Safir::Dob::Typesystem::NullException</a></div><div class="ttdoc">Thrown when an application attempts to get the value of a member that is null.</div><div class="ttdef"><b>Definition:</b> Exceptions.h:389</div></div>
<div class="ttc" id="aa01492_xhtml"><div class="ttname"><a href="a01492.xhtml">Safir::Dob::Typesystem::Object</a></div><div class="ttdoc">The base class for all DOB objects.</div><div class="ttdef"><b>Definition:</b> Object.h:55</div></div>
<div class="ttc" id="aa01496_xhtml"><div class="ttname"><a href="a01496.xhtml">Safir::Dob::Typesystem::ObjectContainerBase</a></div><div class="ttdoc">Base class for all object containers.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:45</div></div>
<div class="ttc" id="aa01496_xhtml_a0074de7f0f6b89d6f8806d33a9792b4b"><div class="ttname"><a href="a01496.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">Safir::Dob::Typesystem::ObjectContainerBase::SetChangedHere</a></div><div class="ttdeci">void SetChangedHere(const bool changed)</div><div class="ttdoc">Set the change flag in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:82</div></div>
<div class="ttc" id="aa01496_xhtml_a442510fb4ad39c9b831bcc1485efe5af"><div class="ttname"><a href="a01496.xhtml#a442510fb4ad39c9b831bcc1485efe5af">Safir::Dob::Typesystem::ObjectContainerBase::GetMember</a></div><div class="ttdeci">virtual ContainerBase &amp; GetMember(const int member, const int index)=0</div><div class="ttdoc">Get a reference to a member container from an object.</div></div>
<div class="ttc" id="aa01496_xhtml_a6d83f3e64d6e7e4ab5bc95ce25ed677a"><div class="ttname"><a href="a01496.xhtml#a6d83f3e64d6e7e4ab5bc95ce25ed677a">Safir::Dob::Typesystem::ObjectContainerBase::ResetObjectPointer</a></div><div class="ttdeci">virtual void ResetObjectPointer()=0</div><div class="ttdoc">Reset (ie set to null) the contained pointer.</div></div>
<div class="ttc" id="aa01496_xhtml_a822ad29b4a74d37a0127679ff6cd550c"><div class="ttname"><a href="a01496.xhtml#a822ad29b4a74d37a0127679ff6cd550c">Safir::Dob::Typesystem::ObjectContainerBase::BlobOperations</a></div><div class="ttdeci">friend class Safir::Dob::Typesystem::Internal::BlobOperations</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:164</div></div>
<div class="ttc" id="aa01496_xhtml_aa5ad8977290cb7057106eead21a27ea6"><div class="ttname"><a href="a01496.xhtml#aa5ad8977290cb7057106eead21a27ea6">Safir::Dob::Typesystem::ObjectContainerBase::GetObjectPointer</a></div><div class="ttdeci">virtual const ObjectPtr GetObjectPointer() const =0</div><div class="ttdoc">Get a smart pointer to the contained object.</div></div>
<div class="ttc" id="aa01496_xhtml_aa5f9fb5ad7450f32ee51b70115bce80a"><div class="ttname"><a href="a01496.xhtml#aa5f9fb5ad7450f32ee51b70115bce80a">Safir::Dob::Typesystem::ObjectContainerBase::IsChangedHere</a></div><div class="ttdeci">bool IsChangedHere() const</div><div class="ttdoc">Is the change flag in the container set?</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:73</div></div>
<div class="ttc" id="aa01496_xhtml_ab44170487b12303855be13050b99e36b"><div class="ttname"><a href="a01496.xhtml#ab44170487b12303855be13050b99e36b">Safir::Dob::Typesystem::ObjectContainerBase::GetMember</a></div><div class="ttdeci">virtual const ContainerBase &amp; GetMember(const int member, const int index) const =0</div><div class="ttdoc">Get a const reference to a member container from an object.</div></div>
<div class="ttc" id="aa01496_xhtml_abc5fe23aedb525d8f000252ea5d0509d"><div class="ttname"><a href="a01496.xhtml#abc5fe23aedb525d8f000252ea5d0509d">Safir::Dob::Typesystem::ObjectContainerBase::ObjectContainerBase</a></div><div class="ttdeci">ObjectContainerBase()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:48</div></div>
<div class="ttc" id="aa01496_xhtml_adaf4f8923a5b2ed23b84ddfd5109b487"><div class="ttname"><a href="a01496.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">Safir::Dob::Typesystem::ObjectContainerBase::SetPtr</a></div><div class="ttdeci">virtual void SetPtr(const ObjectPtr &amp;ptr)=0</div><div class="ttdoc">Set the smart pointer in the container.</div></div>
<div class="ttc" id="aa01496_xhtml_af2e1dc72ec0380bbb458cf0f2da3880d"><div class="ttname"><a href="a01496.xhtml#af2e1dc72ec0380bbb458cf0f2da3880d">Safir::Dob::Typesystem::ObjectContainerBase::ObjectContainerBase</a></div><div class="ttdeci">ObjectContainerBase(const ObjectContainerBase &amp;)=default</div><div class="ttdoc">Copy constructor.</div></div>
<div class="ttc" id="aa01496_xhtml_af81baea5284e6f89aa57b5472becb461"><div class="ttname"><a href="a01496.xhtml#af81baea5284e6f89aa57b5472becb461">Safir::Dob::Typesystem::ObjectContainerBase::operator=</a></div><div class="ttdeci">ObjectContainerBase &amp; operator=(const ObjectContainerBase &amp;other)</div><div class="ttdoc">Copy assignment operator.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:172</div></div>
<div class="ttc" id="aa01496_xhtml_aff8609b609d6b921d80468886cb641c0"><div class="ttname"><a href="a01496.xhtml#aff8609b609d6b921d80468886cb641c0">Safir::Dob::Typesystem::ObjectContainerBase::SetObjectPointer</a></div><div class="ttdeci">virtual void SetObjectPointer(const ObjectPtr ptr)=0</div><div class="ttdoc">Set the smart pointer in the container.</div></div>
<div class="ttc" id="aa01500_xhtml"><div class="ttname"><a href="a01500.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a></div><div class="ttdoc">Template class for all containers of automatically generated DOB objects.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:190</div></div>
<div class="ttc" id="aa01500_xhtml_a093ee933cac0a5042d0adc68162d64f4"><div class="ttname"><a href="a01500.xhtml#a093ee933cac0a5042d0adc68162d64f4">Safir::Dob::Typesystem::ObjectContainerImpl::SetObjectPointer</a></div><div class="ttdeci">void SetObjectPointer(const ObjectPtr ptr) override</div><div class="ttdoc">Set the smart pointer in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:356</div></div>
<div class="ttc" id="aa01500_xhtml_a09fac7392e38a41792cca8dcbbc30c7b"><div class="ttname"><a href="a01500.xhtml#a09fac7392e38a41792cca8dcbbc30c7b">Safir::Dob::Typesystem::ObjectContainerImpl::CalculateBlobSize</a></div><div class="ttdeci">Int32 CalculateBlobSize() const</div><div class="ttdoc">Calculate the size of the blob-serialized form of the contained object.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:351</div></div>
<div class="ttc" id="aa01500_xhtml_a11a79e8b12da7a894a132a6aaa0c1ecf"><div class="ttname"><a href="a01500.xhtml#a11a79e8b12da7a894a132a6aaa0c1ecf">Safir::Dob::Typesystem::ObjectContainerImpl::ResetObjectPointer</a></div><div class="ttdeci">void ResetObjectPointer() override</div><div class="ttdoc">Reset (ie set to null) the contained pointer.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:368</div></div>
<div class="ttc" id="aa01500_xhtml_a1b3e2431e2f82326edc62c692c562719"><div class="ttname"><a href="a01500.xhtml#a1b3e2431e2f82326edc62c692c562719">Safir::Dob::Typesystem::ObjectContainerImpl::SetPtr</a></div><div class="ttdeci">void SetPtr(const ObjectPtr &amp;ptr) override</div><div class="ttdoc">Set the smart pointer in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:264</div></div>
<div class="ttc" id="aa01500_xhtml_a2743b197b4d6f7cbae2f8850a66a8fb4"><div class="ttname"><a href="a01500.xhtml#a2743b197b4d6f7cbae2f8850a66a8fb4">Safir::Dob::Typesystem::ObjectContainerImpl::SetChanged</a></div><div class="ttdeci">void SetChanged(const bool changed) override</div><div class="ttdoc">Set the containers change flag.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:299</div></div>
<div class="ttc" id="aa01500_xhtml_a621578889f3c975db72bbb1a61554261"><div class="ttname"><a href="a01500.xhtml#a621578889f3c975db72bbb1a61554261">Safir::Dob::Typesystem::ObjectContainerImpl::GetMember</a></div><div class="ttdeci">ContainerBase &amp; GetMember(const int member, const int index) override</div><div class="ttdoc">Get a reference to a member container from an object.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:333</div></div>
<div class="ttc" id="aa01500_xhtml_a81f1c0c27592786b855ce876c318a4d2"><div class="ttname"><a href="a01500.xhtml#a81f1c0c27592786b855ce876c318a4d2">Safir::Dob::Typesystem::ObjectContainerImpl::ContainedType</a></div><div class="ttdeci">T_Ptr ContainedType</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:194</div></div>
<div class="ttc" id="aa01500_xhtml_a8609e7b321e7da3bac1a41cbfbbdb30c"><div class="ttname"><a href="a01500.xhtml#a8609e7b321e7da3bac1a41cbfbbdb30c">Safir::Dob::Typesystem::ObjectContainerImpl::IsNull</a></div><div class="ttdeci">bool IsNull() const override</div><div class="ttdoc">Is the container set to null?</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:303</div></div>
<div class="ttc" id="aa01500_xhtml_a986be1bfb24cc8b4cfbaf5b0453dd238"><div class="ttname"><a href="a01500.xhtml#a986be1bfb24cc8b4cfbaf5b0453dd238">Safir::Dob::Typesystem::ObjectContainerImpl::GetObjectPointer</a></div><div class="ttdeci">const ObjectPtr GetObjectPointer() const override</div><div class="ttdoc">Get a smart pointer to the contained object.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:355</div></div>
<div class="ttc" id="aa01500_xhtml_aa05a3e9e763dacdfd8ea28d8b07df49c"><div class="ttname"><a href="a01500.xhtml#aa05a3e9e763dacdfd8ea28d8b07df49c">Safir::Dob::Typesystem::ObjectContainerImpl::operator=</a></div><div class="ttdeci">ObjectContainerImpl &amp; operator=(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy assignment operator.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:231</div></div>
<div class="ttc" id="aa01500_xhtml_aa124d8919bfe8beec076c3a284298e96"><div class="ttname"><a href="a01500.xhtml#aa124d8919bfe8beec076c3a284298e96">Safir::Dob::Typesystem::ObjectContainerImpl::GetPtr</a></div><div class="ttdeci">const T_Ptr &amp; GetPtr() const</div><div class="ttdoc">Get the smart pointer from the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:283</div></div>
<div class="ttc" id="aa01500_xhtml_aa1a41513c8e6025dea48344ad6fcfefa"><div class="ttname"><a href="a01500.xhtml#aa1a41513c8e6025dea48344ad6fcfefa">Safir::Dob::Typesystem::ObjectContainerImpl::GetMember</a></div><div class="ttdeci">const ContainerBase &amp; GetMember(const int member, const int index) const override</div><div class="ttdoc">Get a const reference to a member container from an object.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:335</div></div>
<div class="ttc" id="aa01500_xhtml_ab0fef9741dc912277dbf4f992cb0c0a1"><div class="ttname"><a href="a01500.xhtml#ab0fef9741dc912277dbf4f992cb0c0a1">Safir::Dob::Typesystem::ObjectContainerImpl::operator-&gt;</a></div><div class="ttdeci">T * operator-&gt;() const</div><div class="ttdoc">Dereference the smart pointer in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:295</div></div>
<div class="ttc" id="aa01500_xhtml_ab5261580ea8999538af6f7beb1678970"><div class="ttname"><a href="a01500.xhtml#ab5261580ea8999538af6f7beb1678970">Safir::Dob::Typesystem::ObjectContainerImpl::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy constructor.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:211</div></div>
<div class="ttc" id="aa01500_xhtml_aba6743de949e6d546bb922c4ae85efea"><div class="ttname"><a href="a01500.xhtml#aba6743de949e6d546bb922c4ae85efea">Safir::Dob::Typesystem::ObjectContainerImpl::Copy</a></div><div class="ttdeci">void Copy(const ContainerBase &amp;that) override</div><div class="ttdoc">Virtual assignment.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:311</div></div>
<div class="ttc" id="aa01500_xhtml_abc54c705e8c4449d0a1f6939e1a8c8e5"><div class="ttname"><a href="a01500.xhtml#abc54c705e8c4449d0a1f6939e1a8c8e5">Safir::Dob::Typesystem::ObjectContainerImpl::IsChanged</a></div><div class="ttdeci">bool IsChanged() const override</div><div class="ttdoc">Is the change flag set on the container?</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:301</div></div>
<div class="ttc" id="aa01500_xhtml_ad33ca18b67ea15ab60197f6bc72bc929"><div class="ttname"><a href="a01500.xhtml#ad33ca18b67ea15ab60197f6bc72bc929">Safir::Dob::Typesystem::ObjectContainerImpl::SetNull</a></div><div class="ttdeci">void SetNull() override</div><div class="ttdoc">Set the container to null.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:305</div></div>
<div class="ttc" id="aa01500_xhtml_adf0067e984e8f0a89d046ef9031ffcea"><div class="ttname"><a href="a01500.xhtml#adf0067e984e8f0a89d046ef9031ffcea">Safir::Dob::Typesystem::ObjectContainerImpl::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:201</div></div>
<div class="ttc" id="aa01500_xhtml_af1684f33ee44bbb999b1b8e78bf1fb3a"><div class="ttname"><a href="a01500.xhtml#af1684f33ee44bbb999b1b8e78bf1fb3a">Safir::Dob::Typesystem::ObjectContainerImpl::T_Ptr</a></div><div class="ttdeci">std::shared_ptr&lt; T &gt; T_Ptr</div><div class="ttdoc">Typedef for the contained smart pointer.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:193</div></div>
<div class="ttc" id="aa01500_xhtml_afd45c79b07275d5f5dab8508de967692"><div class="ttname"><a href="a01500.xhtml#afd45c79b07275d5f5dab8508de967692">Safir::Dob::Typesystem::ObjectContainerImpl::SetPtr</a></div><div class="ttdeci">void SetPtr(const T_Ptr &amp;ptr)</div><div class="ttdoc">Set the smart pointer in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:258</div></div>
<div class="ttc" id="aa01504_xhtml_a1654c48a9ef1dd8afab0f4a371ca43cd"><div class="ttname"><a href="a01504.xhtml#a1654c48a9ef1dd8afab0f4a371ca43cd">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::operator=</a></div><div class="ttdeci">ObjectContainerImpl &amp; operator=(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy assignment operator.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:417</div></div>
<div class="ttc" id="aa01504_xhtml_a168e26b6b3bc8c0d17ab184ca5bd301c"><div class="ttname"><a href="a01504.xhtml#a168e26b6b3bc8c0d17ab184ca5bd301c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetPtr</a></div><div class="ttdeci">const T_Ptr &amp; GetPtr() const</div><div class="ttdoc">Get the smart pointer from the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:447</div></div>
<div class="ttc" id="aa01504_xhtml_a2656ffba20c135bced33949412e68f6e"><div class="ttname"><a href="a01504.xhtml#a2656ffba20c135bced33949412e68f6e">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::operator-&gt;</a></div><div class="ttdeci">Object * operator-&gt;() const</div><div class="ttdoc">Dereference the smart pointer in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:465</div></div>
<div class="ttc" id="aa01504_xhtml_a366a64ce88ea6ded162194371d9d6c02"><div class="ttname"><a href="a01504.xhtml#a366a64ce88ea6ded162194371d9d6c02">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetChanged</a></div><div class="ttdeci">void SetChanged(const bool changed) override</div><div class="ttdoc">Set the containers change flag.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:474</div></div>
<div class="ttc" id="aa01504_xhtml_a395e1983612a0cc79403e9b3f9d88953"><div class="ttname"><a href="a01504.xhtml#a395e1983612a0cc79403e9b3f9d88953">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetMember</a></div><div class="ttdeci">ContainerBase &amp; GetMember(const int member, const int index) override</div><div class="ttdoc">Get a reference to a member container from an object.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:515</div></div>
<div class="ttc" id="aa01504_xhtml_a3ca4fdf1173e0743e19bdcd8ff31d939"><div class="ttname"><a href="a01504.xhtml#a3ca4fdf1173e0743e19bdcd8ff31d939">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetPtr</a></div><div class="ttdeci">void SetPtr(const ObjectPtr &amp;ptr) override</div><div class="ttdoc">Set the smart pointer in the container.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:432</div></div>
<div class="ttc" id="aa01504_xhtml_a5d3589e562ccc500fd90f8982a7dd66b"><div class="ttname"><a href="a01504.xhtml#a5d3589e562ccc500fd90f8982a7dd66b">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:392</div></div>
<div class="ttc" id="aa01504_xhtml_a997523b99ee184c06c792a2ce4dd5be6"><div class="ttname"><a href="a01504.xhtml#a997523b99ee184c06c792a2ce4dd5be6">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ContainedType</a></div><div class="ttdeci">T_Ptr ContainedType</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:385</div></div>
<div class="ttc" id="aa01504_xhtml_aa333803662ae43e8e5f9f79eb4e1254c"><div class="ttname"><a href="a01504.xhtml#aa333803662ae43e8e5f9f79eb4e1254c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::IsChanged</a></div><div class="ttdeci">bool IsChanged() const override</div><div class="ttdoc">Is the change flag set on the container?</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:483</div></div>
<div class="ttc" id="aa01504_xhtml_aab5e12a7d597d9440b0ee4a3bb1ce95c"><div class="ttname"><a href="a01504.xhtml#aab5e12a7d597d9440b0ee4a3bb1ce95c">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::IsNull</a></div><div class="ttdeci">bool IsNull() const override</div><div class="ttdoc">Is the container set to null?</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:485</div></div>
<div class="ttc" id="aa01504_xhtml_ac782e96a6ab6c6b98b8cbee654ac7e23"><div class="ttname"><a href="a01504.xhtml#ac782e96a6ab6c6b98b8cbee654ac7e23">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::Copy</a></div><div class="ttdeci">void Copy(const ContainerBase &amp;that) override</div><div class="ttdoc">Virtual assignment.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:493</div></div>
<div class="ttc" id="aa01504_xhtml_ace171a14f310a1b399b585a34ec5b0a1"><div class="ttname"><a href="a01504.xhtml#ace171a14f310a1b399b585a34ec5b0a1">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::T_Ptr</a></div><div class="ttdeci">std::shared_ptr&lt; Object &gt; T_Ptr</div><div class="ttdoc">Typedef for the contained smart pointer.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:384</div></div>
<div class="ttc" id="aa01504_xhtml_ad81005d58a3035d1b569f7942b05cf2d"><div class="ttname"><a href="a01504.xhtml#ad81005d58a3035d1b569f7942b05cf2d">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy constructor.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:402</div></div>
<div class="ttc" id="aa01504_xhtml_af0d98aa70f8eae274bc44f001d5d86db"><div class="ttname"><a href="a01504.xhtml#af0d98aa70f8eae274bc44f001d5d86db">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetNull</a></div><div class="ttdeci">void SetNull() override</div><div class="ttdoc">Set the container to null.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:487</div></div>
<div class="ttc" id="aa01504_xhtml_afbb0dd70185b969a2fbc61096fbca361"><div class="ttname"><a href="a01504.xhtml#afbb0dd70185b969a2fbc61096fbca361">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetMember</a></div><div class="ttdeci">const ContainerBase &amp; GetMember(const int member, const int index) const override</div><div class="ttdoc">Get a const reference to a member container from an object.</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:517</div></div>
<div class="ttc" id="aa02586_xhtml"><div class="ttname"><a href="a02586.xhtml">Defs.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_be44bbfa9c04953461a45f411f73eeb6.xhtml">Safir</a></li><li class="navelem"><a class="el" href="dir_a252b385f5a773561b8bf986f2e4be11.xhtml">Dob</a></li><li class="navelem"><a class="el" href="dir_b56be55d11b18fdc9b2421311b2494a8.xhtml">Typesystem</a></li><li class="navelem"><a class="el" href="a00113.xhtml">ObjectContainer.h</a></li>
    <li class="footer">Generated on Fri Mar 3 2023 14:01:18 for Safir SDK Core by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
  </ul>
</div>
</body>
</html>
