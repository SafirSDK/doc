<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Safir SDK Core: /home/lars/safir-sdk-core/include/Safir/Dob/Typesystem/ObjectContainer.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a00226_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ObjectContainer.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00226.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/******************************************************************************</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">* Copyright Saab AB, 2006-2013 (http://safirsdkcore.com)</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">* Created by: Lars Hagstr√∂m / stlrha</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">*******************************************************************************</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">* This file is part of Safir SDK Core.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">* Safir SDK Core is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">* it under the terms of version 3 of the GNU General Public License as</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">* published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">* Safir SDK Core is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">* GNU General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">* You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">* along with Safir SDK Core.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">******************************************************************************/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __DOTS_OBJECT_CONTAINER_H__</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __DOTS_OBJECT_CONTAINER_H__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00188.xhtml">Safir/Dob/Typesystem/Defs.h</a>&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00215.xhtml">Safir/Dob/Typesystem/ContainerBase.h</a>&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00225.xhtml">Safir/Dob/Typesystem/Object.h</a>&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00220.xhtml">Safir/Dob/Typesystem/Exceptions.h</a>&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="a00315.xhtml">Safir</a></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>Dob</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>Typesystem</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="a00109.xhtml">   44</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00109.xhtml">ObjectContainerBase</a>: <span class="keyword">public</span> <a class="code" href="a00031.xhtml">ContainerBase</a></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="a00109.xhtml#abc5fe23aedb525d8f000252ea5d0509d">   48</a></span>&#160;        <a class="code" href="a00109.xhtml#abc5fe23aedb525d8f000252ea5d0509d">ObjectContainerBase</a>():<a class="code" href="a00031.xhtml">ContainerBase</a>() {}</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00109.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">SetPtr</a>(<span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> &amp; ptr) = 0;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="a00109.xhtml#ac125fa873f378eb4a7ab262e6436359e">   69</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00109.xhtml#ac125fa873f378eb4a7ab262e6436359e">IsChangedHere</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a>;}</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="a00109.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">   78</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00109.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">SetChangedHere</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> changed) {<a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = changed;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">virtual</span>       <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; <a class="code" href="a00109.xhtml#a506e37a681f1fad522d34e1f5df2c331">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)       = 0;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; <a class="code" href="a00109.xhtml#a506e37a681f1fad522d34e1f5df2c331">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> <a class="code" href="a00109.xhtml#a3f66a95c8f5767f38ad5cfe335158c59">GetObjectPointer</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00109.xhtml#aff8609b609d6b921d80468886cb641c0">SetObjectPointer</a>(<span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> ptr) = 0;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00109.xhtml#a6d83f3e64d6e7e4ab5bc95ce25ed677a">ResetObjectPointer</a>() = 0;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="a00109.xhtml#a822ad29b4a74d37a0127679ff6cd550c">  160</a></span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="a00109.xhtml#a822ad29b4a74d37a0127679ff6cd550c">Safir::Dob::Typesystem::Internal::BlobOperations</a>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="a00109.xhtml#a47111cc7ff14bea90714f225e3bd2739">  168</a></span>&#160;        <a class="code" href="a00109.xhtml">ObjectContainerBase</a> &amp; <a class="code" href="a00109.xhtml#a47111cc7ff14bea90714f225e3bd2739">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00109.xhtml">ObjectContainerBase</a> &amp; other)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {<a class="code" href="a00031.xhtml#a8c85f18095c92aeaa5283c18bac44d83">ContainerBase::operator =</a>(other); <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    };</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="a00110.xhtml">  185</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00110.xhtml">ObjectContainerImpl</a> : <span class="keyword">public</span> <a class="code" href="a00109.xhtml">ObjectContainerBase</a></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="a00110.xhtml#aad8d4cf8ce538be8bd5f36a16c3ba438">  189</a></span>&#160;        <span class="keyword">typedef</span> boost::shared_ptr&lt;T&gt; <a class="code" href="a00110.xhtml#aad8d4cf8ce538be8bd5f36a16c3ba438">T_Ptr</a>;</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="a00110.xhtml#a81f1c0c27592786b855ce876c318a4d2">  190</a></span>&#160;        <span class="keyword">typedef</span> T_Ptr <a class="code" href="a00110.xhtml#a81f1c0c27592786b855ce876c318a4d2">ContainedType</a>;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="a00110.xhtml#adf0067e984e8f0a89d046ef9031ffcea">  197</a></span>&#160;        <a class="code" href="a00110.xhtml#adf0067e984e8f0a89d046ef9031ffcea">ObjectContainerImpl</a>():<a class="code" href="a00109.xhtml">ObjectContainerBase</a>() {}</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="a00110.xhtml#ab5261580ea8999538af6f7beb1678970">  207</a></span>&#160;        <a class="code" href="a00110.xhtml#ab5261580ea8999538af6f7beb1678970">ObjectContainerImpl</a>(<span class="keyword">const</span> <a class="code" href="a00110.xhtml">ObjectContainerImpl</a> &amp; other):</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="a00109.xhtml">ObjectContainerBase</a>(other) <span class="comment">//make sure we use copy constructor of parent</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">if</span> (!other.<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>())</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                m_pObject = boost::dynamic_pointer_cast&lt;T&gt;(other.m_pObject-&gt;Clone());</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">if</span> (m_pObject == NULL)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="a00085.xhtml">IncompatibleTypesException</a>(L<span class="stringliteral">&quot;The types are not compatible!&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="a00110.xhtml#a93875105c679ecb30b1c278feea141f6">  227</a></span>&#160;        <a class="code" href="a00110.xhtml">ObjectContainerImpl</a> &amp; <a class="code" href="a00110.xhtml#a93875105c679ecb30b1c278feea141f6">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00110.xhtml">ObjectContainerImpl</a> &amp; other)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <a class="code" href="a00109.xhtml#a47111cc7ff14bea90714f225e3bd2739">ObjectContainerBase::operator=</a>(other);<span class="comment">//make sure we use copy assignment of parent</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keywordflow">if</span> (other.<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>())</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                m_pObject.reset();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                m_pObject = boost::dynamic_pointer_cast&lt;T&gt;(other.m_pObject-&gt;Clone());</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">if</span> (m_pObject == NULL)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="a00085.xhtml">IncompatibleTypesException</a>(L<span class="stringliteral">&quot;The types are not compatible!&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="a00110.xhtml#afd45c79b07275d5f5dab8508de967692">  254</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#afd45c79b07275d5f5dab8508de967692">SetPtr</a>(<span class="keyword">const</span> T_Ptr &amp; ptr)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            m_pObject = ptr;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="comment">//implementation of pure virtual method.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="a00110.xhtml#a39563758166803303556d507e32c3dda">  261</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#a39563758166803303556d507e32c3dda">SetPtr</a>(<span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> &amp; ptr)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            m_pObject = boost::dynamic_pointer_cast&lt;T&gt;(ptr);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">if</span> (m_pObject == NULL)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="a00085.xhtml">IncompatibleTypesException</a>(L<span class="stringliteral">&quot;The types are not compatible!&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="a00110.xhtml#a74480b865ae4259b1532f702b8548f97">  280</a></span>&#160;        <span class="keyword">const</span> T_Ptr &amp; <a class="code" href="a00110.xhtml#a74480b865ae4259b1532f702b8548f97">GetPtr</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject;}</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="a00110.xhtml#a03c7257ac481f9c7d8eca8679e40bdc5">  291</a></span>&#160;        T * <span class="keyword">const</span> <a class="code" href="a00110.xhtml#a03c7257ac481f9c7d8eca8679e40bdc5">operator-&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject.operator-&gt;(); }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="comment">//Override of inherited method. Parent comment describes this behaviour too..</span></div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="a00110.xhtml#a23ad6693cb6de72f3fe5dc05ef27d7a4">  296</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#a23ad6693cb6de72f3fe5dc05ef27d7a4">SetChanged</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> changed) {<a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = changed; <span class="keywordflow">if</span> (!<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) m_pObject-&gt;SetChanged(changed);}</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="comment">//Override of inherited method. Parent comment describes this behaviour too..</span></div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="a00110.xhtml#a169d4278d40fabfcc42bf30741e5bbb8">  299</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00110.xhtml#a169d4278d40fabfcc42bf30741e5bbb8">IsChanged</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> || (!<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>() &amp;&amp; m_pObject-&gt;IsChanged());}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="comment">//override of pure virtual method</span></div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">  302</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_pObject == NULL;}</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">//override of pure virtual method</span></div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="a00110.xhtml#a2955d6921aabba4a1b463c8e5ea1ffb9">  305</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#a2955d6921aabba4a1b463c8e5ea1ffb9">SetNull</a>()</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            m_pObject.reset();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="comment">//implementation of pure virtual in ContainerBase.</span></div>
<div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="a00110.xhtml#a62bb04202644e3b55eb671c586fd89e9">  312</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#a62bb04202644e3b55eb671c586fd89e9">Copy</a>(<span class="keyword">const</span> <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; that)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;that)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">if</span> (<span class="keyword">typeid</span>(*<span class="keyword">this</span>) != <span class="keyword">typeid</span>(that))</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="a00157.xhtml">SoftwareViolationException</a>(L<span class="stringliteral">&quot;Invalid call to Copy, containers are not of same type&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <span class="keyword">const</span> <a class="code" href="a00110.xhtml">ObjectContainerImpl&lt;T&gt;</a> &amp; castedThat = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="a00110.xhtml">ObjectContainerImpl&lt;T&gt;</a> &amp;<span class="keyword">&gt;</span>(that);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = castedThat.<a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a>;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <span class="keywordflow">if</span> (that.<a class="code" href="a00031.xhtml#a417592013345028fad091a293d1aaf7d">IsNull</a>())</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    m_pObject.reset();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                }</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    <a class="code" href="a00110.xhtml#a6d2f43049928659c8421225462cd476a">SetObjectPointer</a>(castedThat.m_pObject-&gt;Clone());</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="comment">//Reflection part (Don&#39;t use unless you really know what you&#39;re doing!!)</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment">//Comments are in ObjectContainerBase.</span></div>
<div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="a00110.xhtml#a3cac7cb91b4900dfcde94c71db6eae99">  334</a></span>&#160;        <span class="keyword">virtual</span>       <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; <a class="code" href="a00110.xhtml#a3cac7cb91b4900dfcde94c71db6eae99">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        {<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="a00110.xhtml#a15563eacff78ded9fb663b279fca7457">  336</a></span>&#160;        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; <a class="code" href="a00110.xhtml#a15563eacff78ded9fb663b279fca7457">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)<span class="keyword"> const</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno"><a class="line" href="a00110.xhtml#a364bae87116f17ec89891f65e0465766">  352</a></span>&#160;        <a class="code" href="a00322.xhtml#a77c8a9fabe66e72ccbc66c729540b9b6">Int32</a> <a class="code" href="a00110.xhtml#a364bae87116f17ec89891f65e0465766">CalculateBlobSize</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">return</span> 0; <span class="keywordflow">else</span> <span class="keywordflow">return</span> m_pObject-&gt;CalculateBlobSize();}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="a00110.xhtml#a610f726c46766bfb7d2b23c3c9a70643">  356</a></span>&#160;        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> <a class="code" href="a00110.xhtml#a610f726c46766bfb7d2b23c3c9a70643">GetObjectPointer</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> boost::static_pointer_cast&lt;<a class="code" href="a00108.xhtml">Object</a>&gt;(m_pObject);}</div>
<div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="a00110.xhtml#a6d2f43049928659c8421225462cd476a">  357</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#a6d2f43049928659c8421225462cd476a">SetObjectPointer</a>(<span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> ptr)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            m_pObject = boost::dynamic_pointer_cast&lt;T&gt;(ptr);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">if</span>(m_pObject == NULL)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="a00157.xhtml">SoftwareViolationException</a>(L<span class="stringliteral">&quot;Failed to cast object pointer to expected type&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            }</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            m_pObject = boost::static_pointer_cast&lt;T&gt;(ptr);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        }</div>
<div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="a00110.xhtml#ac385937b91c157d06687b7eade9754ce">  369</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#ac385937b91c157d06687b7eade9754ce">ResetObjectPointer</a>(){m_pObject.reset();}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        T_Ptr m_pObject;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    };</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="a00111.xhtml">  381</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00110.xhtml">ObjectContainerImpl</a>&lt;<a class="code" href="a00108.xhtml">Object</a>&gt; : <span class="keyword">public</span> <a class="code" href="a00109.xhtml">ObjectContainerBase</a></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="a00111.xhtml#a19170de5b90d489fc11062585b0aca55">  385</a></span>&#160;        <span class="keyword">typedef</span> boost::shared_ptr&lt;Object&gt; <a class="code" href="a00111.xhtml#a19170de5b90d489fc11062585b0aca55">T_Ptr</a>;</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="a00111.xhtml#a997523b99ee184c06c792a2ce4dd5be6">  386</a></span>&#160;        <span class="keyword">typedef</span> T_Ptr <a class="code" href="a00111.xhtml#a997523b99ee184c06c792a2ce4dd5be6">ContainedType</a>;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="a00111.xhtml#a5d3589e562ccc500fd90f8982a7dd66b">  393</a></span>&#160;        <a class="code" href="a00111.xhtml#a5d3589e562ccc500fd90f8982a7dd66b">ObjectContainerImpl</a>():<a class="code" href="a00109.xhtml">ObjectContainerBase</a>() {}</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="a00111.xhtml#ad81005d58a3035d1b569f7942b05cf2d">  403</a></span>&#160;        <a class="code" href="a00111.xhtml#ad81005d58a3035d1b569f7942b05cf2d">ObjectContainerImpl</a>(<span class="keyword">const</span> <a class="code" href="a00110.xhtml">ObjectContainerImpl</a> &amp; other):</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <a class="code" href="a00109.xhtml">ObjectContainerBase</a>(other) <span class="comment">//make sure we use copy constructor of parent</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        {</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">if</span> (!other.<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>())</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                m_pObject = other.m_pObject-&gt;Clone();</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="a00111.xhtml#a04954179f422105585f1e91c10050754">  418</a></span>&#160;        <a class="code" href="a00110.xhtml">ObjectContainerImpl</a> &amp; <a class="code" href="a00111.xhtml#a04954179f422105585f1e91c10050754">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00110.xhtml">ObjectContainerImpl</a> &amp; other)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        {</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <a class="code" href="a00109.xhtml#a47111cc7ff14bea90714f225e3bd2739">ObjectContainerBase::operator =</a>(other);<span class="comment">//make sure we use copy assignment of parent</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keywordflow">if</span> (other.<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>())</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                m_pObject.reset();</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            }</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                m_pObject = other.m_pObject-&gt;Clone();</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            }</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="comment">//implementation of pure virtual method.</span></div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="a00111.xhtml#a75bc814f7dc84ca4d349eccd3851cbe8">  434</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00111.xhtml#a75bc814f7dc84ca4d349eccd3851cbe8">SetPtr</a>(<span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> &amp; ptr)</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            m_pObject = ptr;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="a00111.xhtml#a43629d666e9985379fcfc2ac078e467a">  449</a></span>&#160;        <span class="keyword">const</span> T_Ptr &amp; <a class="code" href="a00111.xhtml#a43629d666e9985379fcfc2ac078e467a">GetPtr</a>()<span class="keyword"> const </span>{<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject;}</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="a00111.xhtml#a2b3c102dc8842ec0fb01d74401eb13f1">  460</a></span>&#160;        <a class="code" href="a00108.xhtml">Object</a> * <span class="keyword">const</span> <a class="code" href="a00111.xhtml#a2b3c102dc8842ec0fb01d74401eb13f1">operator-&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject.operator-&gt;();</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="comment">//Override of inherited method. Parent comment describes this behaviour too..</span></div>
<div class="line"><a name="l00466"></a><span class="lineno"><a class="line" href="a00111.xhtml#a5c947048a907e0ad3cea321a65e8458b">  466</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00111.xhtml#a5c947048a907e0ad3cea321a65e8458b">SetChanged</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> changed) {<a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = changed; <span class="keywordflow">if</span> (!<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) m_pObject-&gt;SetChanged(changed);}</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="comment">//Override of inherited method. Parent comment describes this behaviour too..</span></div>
<div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="a00111.xhtml#af59f6e551aa17ab74d6ff5911c342d09">  469</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00111.xhtml#af59f6e551aa17ab74d6ff5911c342d09">IsChanged</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> || (!<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>() &amp;&amp; m_pObject-&gt;IsChanged());}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="comment">//override of pure virtual method</span></div>
<div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="a00111.xhtml#a396e349f1c0206e77e33e989a6945013">  472</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00111.xhtml#a396e349f1c0206e77e33e989a6945013">IsNull</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_pObject == NULL;}</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="comment">//override of pure virtual method</span></div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="a00111.xhtml#a72bb44130e4e766b0903b6870f5b9839">  475</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00111.xhtml#a72bb44130e4e766b0903b6870f5b9839">SetNull</a>()</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            m_pObject.reset();</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="comment">//implementation of pure virtual in ContainerBase.</span></div>
<div class="line"><a name="l00482"></a><span class="lineno"><a class="line" href="a00111.xhtml#a6e4713f8c60ed0270f5a02bb231a5434">  482</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00111.xhtml#a6e4713f8c60ed0270f5a02bb231a5434">Copy</a>(<span class="keyword">const</span> <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; that)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;that)</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            {</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="keywordflow">if</span> (<span class="keyword">typeid</span>(*<span class="keyword">this</span>) != <span class="keyword">typeid</span>(that))</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="a00157.xhtml">SoftwareViolationException</a>(L<span class="stringliteral">&quot;Invalid call to Copy, containers are not of same type&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                <span class="keyword">const</span> <a class="code" href="a00111.xhtml">ObjectContainerImpl&lt;Object&gt;</a> &amp; castedThat = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="a00111.xhtml">ObjectContainerImpl&lt;Object&gt;</a> &amp;<span class="keyword">&gt;</span>(that);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                <a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a> = castedThat.<a class="code" href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">m_bIsChanged</a>;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <span class="keywordflow">if</span> (that.<a class="code" href="a00031.xhtml#a417592013345028fad091a293d1aaf7d">IsNull</a>())</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    m_pObject.reset();</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                {</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                    <a class="code" href="a00110.xhtml#a6d2f43049928659c8421225462cd476a">SetObjectPointer</a>(castedThat.m_pObject-&gt;Clone());</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            }</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="comment">//Reflection part (Don&#39;t use unless you really know what you&#39;re doing!!)</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="comment">//Comments are in ObjectContainerBase.</span></div>
<div class="line"><a name="l00505"></a><span class="lineno"><a class="line" href="a00111.xhtml#ad193042f968e3ae523eb85a5e33dabcf">  505</a></span>&#160;        <span class="keyword">virtual</span>       <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; <a class="code" href="a00111.xhtml#ad193042f968e3ae523eb85a5e33dabcf">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        {<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a name="l00507"></a><span class="lineno"><a class="line" href="a00111.xhtml#ace48302078af1fe7d7c68ee7ebf4e091">  507</a></span>&#160;        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="a00031.xhtml">ContainerBase</a> &amp; <a class="code" href="a00111.xhtml#ace48302078af1fe7d7c68ee7ebf4e091">GetMember</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> member, <span class="keyword">const</span> <span class="keywordtype">int</span> index)<span class="keyword"> const</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="keyword">        </span>{<span class="keywordflow">if</span> (<a class="code" href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">IsNull</a>()) <span class="keywordflow">throw</span> <a class="code" href="a00107.xhtml">NullException</a>(L<span class="stringliteral">&quot;Object is null&quot;</span>,<a class="code" href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a>,__LINE__); <span class="keywordflow">return</span> m_pObject-&gt;GetMember(member,index);}</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> <a class="code" href="a00110.xhtml#a610f726c46766bfb7d2b23c3c9a70643">GetObjectPointer</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> boost::static_pointer_cast&lt;<a class="code" href="a00108.xhtml">Object</a>&gt;(m_pObject);}</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#a6d2f43049928659c8421225462cd476a">SetObjectPointer</a>(<span class="keyword">const</span> <a class="code" href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">ObjectPtr</a> ptr)</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            m_pObject = ptr;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00110.xhtml#ac385937b91c157d06687b7eade9754ce">ResetObjectPointer</a>(){m_pObject.reset();}</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        T_Ptr m_pObject;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    };</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="a00322.xhtml#a803dfc314ceb691cd835264e2ae1b943">  530</a></span>&#160;    <span class="keyword">typedef</span> <a class="code" href="a00111.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl&lt;Object&gt;</a> <a class="code" href="a00322.xhtml#a803dfc314ceb691cd835264e2ae1b943">ObjectContainer</a>;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;}</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;}</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;}</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="ttc" id="a00110_xhtml_a15563eacff78ded9fb663b279fca7457"><div class="ttname"><a href="a00110.xhtml#a15563eacff78ded9fb663b279fca7457">Safir::Dob::Typesystem::ObjectContainerImpl::GetMember</a></div><div class="ttdeci">virtual const ContainerBase &amp; GetMember(const int member, const int index) const </div><div class="ttdoc">Get a const reference to a member container from an object. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:336</div></div>
<div class="ttc" id="a00111_xhtml_a2b3c102dc8842ec0fb01d74401eb13f1"><div class="ttname"><a href="a00111.xhtml#a2b3c102dc8842ec0fb01d74401eb13f1">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::operator-&gt;</a></div><div class="ttdeci">Object *const operator-&gt;() const </div><div class="ttdoc">Dereference the smart pointer in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:460</div></div>
<div class="ttc" id="a00110_xhtml_a3cac7cb91b4900dfcde94c71db6eae99"><div class="ttname"><a href="a00110.xhtml#a3cac7cb91b4900dfcde94c71db6eae99">Safir::Dob::Typesystem::ObjectContainerImpl::GetMember</a></div><div class="ttdeci">virtual ContainerBase &amp; GetMember(const int member, const int index)</div><div class="ttdoc">Get a reference to a member container from an object. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:334</div></div>
<div class="ttc" id="a00085_xhtml"><div class="ttname"><a href="a00085.xhtml">Safir::Dob::Typesystem::IncompatibleTypesException</a></div><div class="ttdoc">This exception is thrown if a class cannot be cast to the expected type. </div><div class="ttdef"><b>Definition:</b> Exceptions.h:289</div></div>
<div class="ttc" id="a00107_xhtml"><div class="ttname"><a href="a00107.xhtml">Safir::Dob::Typesystem::NullException</a></div><div class="ttdoc">Thrown when an application attempts to get the value of a member that is null. </div><div class="ttdef"><b>Definition:</b> Exceptions.h:394</div></div>
<div class="ttc" id="a00111_xhtml_a396e349f1c0206e77e33e989a6945013"><div class="ttname"><a href="a00111.xhtml#a396e349f1c0206e77e33e989a6945013">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::IsNull</a></div><div class="ttdeci">virtual bool IsNull() const </div><div class="ttdoc">Is the container set to null? </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:472</div></div>
<div class="ttc" id="a00157_xhtml"><div class="ttname"><a href="a00157.xhtml">Safir::Dob::Typesystem::SoftwareViolationException</a></div><div class="ttdoc">Meant to be used when something goes very wrong. </div><div class="ttdef"><b>Definition:</b> Exceptions.h:360</div></div>
<div class="ttc" id="a00110_xhtml_a364bae87116f17ec89891f65e0465766"><div class="ttname"><a href="a00110.xhtml#a364bae87116f17ec89891f65e0465766">Safir::Dob::Typesystem::ObjectContainerImpl::CalculateBlobSize</a></div><div class="ttdeci">Int32 CalculateBlobSize() const </div><div class="ttdoc">Calculate the size of the blob-serialized form of the contained object. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:352</div></div>
<div class="ttc" id="a00110_xhtml_a23ad6693cb6de72f3fe5dc05ef27d7a4"><div class="ttname"><a href="a00110.xhtml#a23ad6693cb6de72f3fe5dc05ef27d7a4">Safir::Dob::Typesystem::ObjectContainerImpl::SetChanged</a></div><div class="ttdeci">virtual void SetChanged(const bool changed)</div><div class="ttdoc">Set the containers change flag. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:296</div></div>
<div class="ttc" id="a00109_xhtml_adaf4f8923a5b2ed23b84ddfd5109b487"><div class="ttname"><a href="a00109.xhtml#adaf4f8923a5b2ed23b84ddfd5109b487">Safir::Dob::Typesystem::ObjectContainerBase::SetPtr</a></div><div class="ttdeci">virtual void SetPtr(const ObjectPtr &amp;ptr)=0</div><div class="ttdoc">Set the smart pointer in the container. </div></div>
<div class="ttc" id="a00220_xhtml_aa50218d805518247edfff3d9328be684"><div class="ttname"><a href="a00220.xhtml#aa50218d805518247edfff3d9328be684">__WFILE__</a></div><div class="ttdeci">#define __WFILE__</div><div class="ttdef"><b>Definition:</b> Exceptions.h:31</div></div>
<div class="ttc" id="a00031_xhtml_a4257d6efb8b17e914896bf4ee9b1d7b8"><div class="ttname"><a href="a00031.xhtml#a4257d6efb8b17e914896bf4ee9b1d7b8">Safir::Dob::Typesystem::ContainerBase::m_bIsChanged</a></div><div class="ttdeci">bool m_bIsChanged</div><div class="ttdoc">The variable containing the change flag. </div><div class="ttdef"><b>Definition:</b> ContainerBase.h:122</div></div>
<div class="ttc" id="a00315_xhtml"><div class="ttname"><a href="a00315.xhtml">Safir</a></div><div class="ttdoc">This namespace contains all the functionality and definitions of the SAFIR SDK. </div><div class="ttdef"><b>Definition:</b> Backdoor.h:30</div></div>
<div class="ttc" id="a00111_xhtml_a6e4713f8c60ed0270f5a02bb231a5434"><div class="ttname"><a href="a00111.xhtml#a6e4713f8c60ed0270f5a02bb231a5434">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::Copy</a></div><div class="ttdeci">virtual void Copy(const ContainerBase &amp;that)</div><div class="ttdoc">Virtual assignment. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:482</div></div>
<div class="ttc" id="a00111_xhtml_a19170de5b90d489fc11062585b0aca55"><div class="ttname"><a href="a00111.xhtml#a19170de5b90d489fc11062585b0aca55">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::T_Ptr</a></div><div class="ttdeci">boost::shared_ptr&lt; Object &gt; T_Ptr</div><div class="ttdoc">Typedef for the contained smart pointer. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:385</div></div>
<div class="ttc" id="a00225_xhtml"><div class="ttname"><a href="a00225.xhtml">Object.h</a></div></div>
<div class="ttc" id="a00215_xhtml"><div class="ttname"><a href="a00215.xhtml">ContainerBase.h</a></div></div>
<div class="ttc" id="a00110_xhtml_a169d4278d40fabfcc42bf30741e5bbb8"><div class="ttname"><a href="a00110.xhtml#a169d4278d40fabfcc42bf30741e5bbb8">Safir::Dob::Typesystem::ObjectContainerImpl::IsChanged</a></div><div class="ttdeci">virtual bool IsChanged() const </div><div class="ttdoc">Is the change flag set on the container? The change flag gets updated every time the contained value ...</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:299</div></div>
<div class="ttc" id="a00031_xhtml_a417592013345028fad091a293d1aaf7d"><div class="ttname"><a href="a00031.xhtml#a417592013345028fad091a293d1aaf7d">Safir::Dob::Typesystem::ContainerBase::IsNull</a></div><div class="ttdeci">virtual bool IsNull() const  =0</div><div class="ttdoc">Is the container set to null? </div></div>
<div class="ttc" id="a00110_xhtml"><div class="ttname"><a href="a00110.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl</a></div><div class="ttdoc">Template class for all containers of automatically generated DOB objects. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:185</div></div>
<div class="ttc" id="a00220_xhtml"><div class="ttname"><a href="a00220.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="a00322_xhtml_ae11ede843efcf067a9327a9ef8b90b86"><div class="ttname"><a href="a00322.xhtml#ae11ede843efcf067a9327a9ef8b90b86">Safir::Dob::Typesystem::ObjectPtr</a></div><div class="ttdeci">boost::shared_ptr&lt; Object &gt; ObjectPtr</div><div class="ttdoc">A smart pointer to an Object. </div><div class="ttdef"><b>Definition:</b> Object.h:41</div></div>
<div class="ttc" id="a00110_xhtml_a39563758166803303556d507e32c3dda"><div class="ttname"><a href="a00110.xhtml#a39563758166803303556d507e32c3dda">Safir::Dob::Typesystem::ObjectContainerImpl::SetPtr</a></div><div class="ttdeci">virtual void SetPtr(const ObjectPtr &amp;ptr)</div><div class="ttdoc">Set the smart pointer in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:261</div></div>
<div class="ttc" id="a00109_xhtml_aff8609b609d6b921d80468886cb641c0"><div class="ttname"><a href="a00109.xhtml#aff8609b609d6b921d80468886cb641c0">Safir::Dob::Typesystem::ObjectContainerBase::SetObjectPointer</a></div><div class="ttdeci">virtual void SetObjectPointer(const ObjectPtr ptr)=0</div><div class="ttdoc">Set the smart pointer in the container. </div></div>
<div class="ttc" id="a00109_xhtml_abc5fe23aedb525d8f000252ea5d0509d"><div class="ttname"><a href="a00109.xhtml#abc5fe23aedb525d8f000252ea5d0509d">Safir::Dob::Typesystem::ObjectContainerBase::ObjectContainerBase</a></div><div class="ttdeci">ObjectContainerBase()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:48</div></div>
<div class="ttc" id="a00110_xhtml_a2955d6921aabba4a1b463c8e5ea1ffb9"><div class="ttname"><a href="a00110.xhtml#a2955d6921aabba4a1b463c8e5ea1ffb9">Safir::Dob::Typesystem::ObjectContainerImpl::SetNull</a></div><div class="ttdeci">virtual void SetNull()</div><div class="ttdoc">Set the container to null. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:305</div></div>
<div class="ttc" id="a00111_xhtml_a72bb44130e4e766b0903b6870f5b9839"><div class="ttname"><a href="a00111.xhtml#a72bb44130e4e766b0903b6870f5b9839">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetNull</a></div><div class="ttdeci">virtual void SetNull()</div><div class="ttdoc">Set the container to null. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:475</div></div>
<div class="ttc" id="a00110_xhtml_ac385937b91c157d06687b7eade9754ce"><div class="ttname"><a href="a00110.xhtml#ac385937b91c157d06687b7eade9754ce">Safir::Dob::Typesystem::ObjectContainerImpl::ResetObjectPointer</a></div><div class="ttdeci">virtual void ResetObjectPointer()</div><div class="ttdoc">Reset (ie set to null) the contained pointer. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:369</div></div>
<div class="ttc" id="a00111_xhtml_a5c947048a907e0ad3cea321a65e8458b"><div class="ttname"><a href="a00111.xhtml#a5c947048a907e0ad3cea321a65e8458b">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetChanged</a></div><div class="ttdeci">virtual void SetChanged(const bool changed)</div><div class="ttdoc">Set the containers change flag. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:466</div></div>
<div class="ttc" id="a00322_xhtml_a803dfc314ceb691cd835264e2ae1b943"><div class="ttname"><a href="a00322.xhtml#a803dfc314ceb691cd835264e2ae1b943">Safir::Dob::Typesystem::ObjectContainer</a></div><div class="ttdeci">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt; ObjectContainer</div><div class="ttdoc">Container for DOB Objects. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:530</div></div>
<div class="ttc" id="a00109_xhtml_a3f66a95c8f5767f38ad5cfe335158c59"><div class="ttname"><a href="a00109.xhtml#a3f66a95c8f5767f38ad5cfe335158c59">Safir::Dob::Typesystem::ObjectContainerBase::GetObjectPointer</a></div><div class="ttdeci">virtual const ObjectPtr GetObjectPointer() const  =0</div><div class="ttdoc">Get a smart pointer to the contained object. </div></div>
<div class="ttc" id="a00110_xhtml_a6d2f43049928659c8421225462cd476a"><div class="ttname"><a href="a00110.xhtml#a6d2f43049928659c8421225462cd476a">Safir::Dob::Typesystem::ObjectContainerImpl::SetObjectPointer</a></div><div class="ttdeci">virtual void SetObjectPointer(const ObjectPtr ptr)</div><div class="ttdoc">Set the smart pointer in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:357</div></div>
<div class="ttc" id="a00031_xhtml"><div class="ttname"><a href="a00031.xhtml">Safir::Dob::Typesystem::ContainerBase</a></div><div class="ttdoc">Base class for all Containers. </div><div class="ttdef"><b>Definition:</b> ContainerBase.h:43</div></div>
<div class="ttc" id="a00110_xhtml_a62bb04202644e3b55eb671c586fd89e9"><div class="ttname"><a href="a00110.xhtml#a62bb04202644e3b55eb671c586fd89e9">Safir::Dob::Typesystem::ObjectContainerImpl::Copy</a></div><div class="ttdeci">virtual void Copy(const ContainerBase &amp;that)</div><div class="ttdoc">Virtual assignment. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:312</div></div>
<div class="ttc" id="a00110_xhtml_a74480b865ae4259b1532f702b8548f97"><div class="ttname"><a href="a00110.xhtml#a74480b865ae4259b1532f702b8548f97">Safir::Dob::Typesystem::ObjectContainerImpl::GetPtr</a></div><div class="ttdeci">const T_Ptr &amp; GetPtr() const </div><div class="ttdoc">Get the smart pointer from the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:280</div></div>
<div class="ttc" id="a00110_xhtml_a0021c75cc458ffdf4ae4cc31881ef032"><div class="ttname"><a href="a00110.xhtml#a0021c75cc458ffdf4ae4cc31881ef032">Safir::Dob::Typesystem::ObjectContainerImpl::IsNull</a></div><div class="ttdeci">virtual bool IsNull() const </div><div class="ttdoc">Is the container set to null? </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:302</div></div>
<div class="ttc" id="a00111_xhtml_a75bc814f7dc84ca4d349eccd3851cbe8"><div class="ttname"><a href="a00111.xhtml#a75bc814f7dc84ca4d349eccd3851cbe8">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::SetPtr</a></div><div class="ttdeci">virtual void SetPtr(const ObjectPtr &amp;ptr)</div><div class="ttdoc">Set the smart pointer in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:434</div></div>
<div class="ttc" id="a00111_xhtml_a04954179f422105585f1e91c10050754"><div class="ttname"><a href="a00111.xhtml#a04954179f422105585f1e91c10050754">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::operator=</a></div><div class="ttdeci">ObjectContainerImpl &amp; operator=(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy assignment operator. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:418</div></div>
<div class="ttc" id="a00111_xhtml"><div class="ttname"><a href="a00111.xhtml">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;</a></div><div class="ttdoc">This is a specialization of the ObjectContainerImpl template for the case where the template argument...</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:381</div></div>
<div class="ttc" id="a00110_xhtml_a610f726c46766bfb7d2b23c3c9a70643"><div class="ttname"><a href="a00110.xhtml#a610f726c46766bfb7d2b23c3c9a70643">Safir::Dob::Typesystem::ObjectContainerImpl::GetObjectPointer</a></div><div class="ttdeci">virtual const ObjectPtr GetObjectPointer() const </div><div class="ttdoc">Get a smart pointer to the contained object. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:356</div></div>
<div class="ttc" id="a00108_xhtml"><div class="ttname"><a href="a00108.xhtml">Safir::Dob::Typesystem::Object</a></div><div class="ttdoc">The base class for all DOB objects. </div><div class="ttdef"><b>Definition:</b> Object.h:54</div></div>
<div class="ttc" id="a00188_xhtml"><div class="ttname"><a href="a00188.xhtml">Defs.h</a></div></div>
<div class="ttc" id="a00322_xhtml_a77c8a9fabe66e72ccbc66c729540b9b6"><div class="ttname"><a href="a00322.xhtml#a77c8a9fabe66e72ccbc66c729540b9b6">Safir::Dob::Typesystem::Int32</a></div><div class="ttdeci">DotsC_Int32 Int32</div><div class="ttdoc">32 bit integer type. </div><div class="ttdef"><b>Definition:</b> Defs.h:66</div></div>
<div class="ttc" id="a00110_xhtml_ab5261580ea8999538af6f7beb1678970"><div class="ttname"><a href="a00110.xhtml#ab5261580ea8999538af6f7beb1678970">Safir::Dob::Typesystem::ObjectContainerImpl::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy constructor. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:207</div></div>
<div class="ttc" id="a00110_xhtml_a93875105c679ecb30b1c278feea141f6"><div class="ttname"><a href="a00110.xhtml#a93875105c679ecb30b1c278feea141f6">Safir::Dob::Typesystem::ObjectContainerImpl::operator=</a></div><div class="ttdeci">ObjectContainerImpl &amp; operator=(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy assignment operator. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:227</div></div>
<div class="ttc" id="a00111_xhtml_ace48302078af1fe7d7c68ee7ebf4e091"><div class="ttname"><a href="a00111.xhtml#ace48302078af1fe7d7c68ee7ebf4e091">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetMember</a></div><div class="ttdeci">virtual const ContainerBase &amp; GetMember(const int member, const int index) const </div><div class="ttdoc">Get a const reference to a member container from an object. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:507</div></div>
<div class="ttc" id="a00109_xhtml_ac125fa873f378eb4a7ab262e6436359e"><div class="ttname"><a href="a00109.xhtml#ac125fa873f378eb4a7ab262e6436359e">Safir::Dob::Typesystem::ObjectContainerBase::IsChangedHere</a></div><div class="ttdeci">bool IsChangedHere() const </div><div class="ttdoc">Is the change flag in the container set? </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:69</div></div>
<div class="ttc" id="a00110_xhtml_afd45c79b07275d5f5dab8508de967692"><div class="ttname"><a href="a00110.xhtml#afd45c79b07275d5f5dab8508de967692">Safir::Dob::Typesystem::ObjectContainerImpl::SetPtr</a></div><div class="ttdeci">void SetPtr(const T_Ptr &amp;ptr)</div><div class="ttdoc">Set the smart pointer in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:254</div></div>
<div class="ttc" id="a00109_xhtml_a822ad29b4a74d37a0127679ff6cd550c"><div class="ttname"><a href="a00109.xhtml#a822ad29b4a74d37a0127679ff6cd550c">Safir::Dob::Typesystem::ObjectContainerBase::BlobOperations</a></div><div class="ttdeci">friend class Safir::Dob::Typesystem::Internal::BlobOperations</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:160</div></div>
<div class="ttc" id="a00110_xhtml_adf0067e984e8f0a89d046ef9031ffcea"><div class="ttname"><a href="a00110.xhtml#adf0067e984e8f0a89d046ef9031ffcea">Safir::Dob::Typesystem::ObjectContainerImpl::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:197</div></div>
<div class="ttc" id="a00031_xhtml_a8c85f18095c92aeaa5283c18bac44d83"><div class="ttname"><a href="a00031.xhtml#a8c85f18095c92aeaa5283c18bac44d83">Safir::Dob::Typesystem::ContainerBase::operator=</a></div><div class="ttdeci">ContainerBase &amp; operator=(const ContainerBase &amp;other)</div><div class="ttdoc">Copy assignment operator. </div><div class="ttdef"><b>Definition:</b> ContainerBase.h:116</div></div>
<div class="ttc" id="a00110_xhtml_a03c7257ac481f9c7d8eca8679e40bdc5"><div class="ttname"><a href="a00110.xhtml#a03c7257ac481f9c7d8eca8679e40bdc5">Safir::Dob::Typesystem::ObjectContainerImpl::operator-&gt;</a></div><div class="ttdeci">T *const operator-&gt;() const </div><div class="ttdoc">Dereference the smart pointer in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:291</div></div>
<div class="ttc" id="a00111_xhtml_ad81005d58a3035d1b569f7942b05cf2d"><div class="ttname"><a href="a00111.xhtml#ad81005d58a3035d1b569f7942b05cf2d">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl(const ObjectContainerImpl &amp;other)</div><div class="ttdoc">Copy constructor. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:403</div></div>
<div class="ttc" id="a00109_xhtml_a47111cc7ff14bea90714f225e3bd2739"><div class="ttname"><a href="a00109.xhtml#a47111cc7ff14bea90714f225e3bd2739">Safir::Dob::Typesystem::ObjectContainerBase::operator=</a></div><div class="ttdeci">ObjectContainerBase &amp; operator=(const ObjectContainerBase &amp;other)</div><div class="ttdoc">Copy assignment operator. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:168</div></div>
<div class="ttc" id="a00110_xhtml_aad8d4cf8ce538be8bd5f36a16c3ba438"><div class="ttname"><a href="a00110.xhtml#aad8d4cf8ce538be8bd5f36a16c3ba438">Safir::Dob::Typesystem::ObjectContainerImpl::T_Ptr</a></div><div class="ttdeci">boost::shared_ptr&lt; T &gt; T_Ptr</div><div class="ttdoc">Typedef for the contained smart pointer. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:189</div></div>
<div class="ttc" id="a00109_xhtml_a0074de7f0f6b89d6f8806d33a9792b4b"><div class="ttname"><a href="a00109.xhtml#a0074de7f0f6b89d6f8806d33a9792b4b">Safir::Dob::Typesystem::ObjectContainerBase::SetChangedHere</a></div><div class="ttdeci">void SetChangedHere(const bool changed)</div><div class="ttdoc">Set the change flag in the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:78</div></div>
<div class="ttc" id="a00111_xhtml_a5d3589e562ccc500fd90f8982a7dd66b"><div class="ttname"><a href="a00111.xhtml#a5d3589e562ccc500fd90f8982a7dd66b">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ObjectContainerImpl</a></div><div class="ttdeci">ObjectContainerImpl()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:393</div></div>
<div class="ttc" id="a00111_xhtml_a43629d666e9985379fcfc2ac078e467a"><div class="ttname"><a href="a00111.xhtml#a43629d666e9985379fcfc2ac078e467a">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetPtr</a></div><div class="ttdeci">const T_Ptr &amp; GetPtr() const </div><div class="ttdoc">Get the smart pointer from the container. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:449</div></div>
<div class="ttc" id="a00109_xhtml_a6d83f3e64d6e7e4ab5bc95ce25ed677a"><div class="ttname"><a href="a00109.xhtml#a6d83f3e64d6e7e4ab5bc95ce25ed677a">Safir::Dob::Typesystem::ObjectContainerBase::ResetObjectPointer</a></div><div class="ttdeci">virtual void ResetObjectPointer()=0</div><div class="ttdoc">Reset (ie set to null) the contained pointer. </div></div>
<div class="ttc" id="a00110_xhtml_a81f1c0c27592786b855ce876c318a4d2"><div class="ttname"><a href="a00110.xhtml#a81f1c0c27592786b855ce876c318a4d2">Safir::Dob::Typesystem::ObjectContainerImpl::ContainedType</a></div><div class="ttdeci">T_Ptr ContainedType</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:190</div></div>
<div class="ttc" id="a00111_xhtml_af59f6e551aa17ab74d6ff5911c342d09"><div class="ttname"><a href="a00111.xhtml#af59f6e551aa17ab74d6ff5911c342d09">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::IsChanged</a></div><div class="ttdeci">virtual bool IsChanged() const </div><div class="ttdoc">Is the change flag set on the container? The change flag gets updated every time the contained value ...</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:469</div></div>
<div class="ttc" id="a00111_xhtml_a997523b99ee184c06c792a2ce4dd5be6"><div class="ttname"><a href="a00111.xhtml#a997523b99ee184c06c792a2ce4dd5be6">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::ContainedType</a></div><div class="ttdeci">T_Ptr ContainedType</div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:386</div></div>
<div class="ttc" id="a00109_xhtml"><div class="ttname"><a href="a00109.xhtml">Safir::Dob::Typesystem::ObjectContainerBase</a></div><div class="ttdoc">Base class for all object containers. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:44</div></div>
<div class="ttc" id="a00109_xhtml_a506e37a681f1fad522d34e1f5df2c331"><div class="ttname"><a href="a00109.xhtml#a506e37a681f1fad522d34e1f5df2c331">Safir::Dob::Typesystem::ObjectContainerBase::GetMember</a></div><div class="ttdeci">virtual ContainerBase &amp; GetMember(const int member, const int index)=0</div><div class="ttdoc">Get a reference to a member container from an object. </div></div>
<div class="ttc" id="a00111_xhtml_ad193042f968e3ae523eb85a5e33dabcf"><div class="ttname"><a href="a00111.xhtml#ad193042f968e3ae523eb85a5e33dabcf">Safir::Dob::Typesystem::ObjectContainerImpl&lt; Object &gt;::GetMember</a></div><div class="ttdeci">virtual ContainerBase &amp; GetMember(const int member, const int index)</div><div class="ttdoc">Get a reference to a member container from an object. </div><div class="ttdef"><b>Definition:</b> ObjectContainer.h:505</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_875ab07fb1cd25b3d31af1761d81b996.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_28e0791bf104ac510bdaad4cfcc2d792.xhtml">Safir</a></li><li class="navelem"><a class="el" href="dir_965bcf24b847a0d04e19ed0e967b330b.xhtml">Dob</a></li><li class="navelem"><a class="el" href="dir_38f82b5b5f11e1b78c24b84f6d996dec.xhtml">Typesystem</a></li><li class="navelem"><a class="el" href="a00226.xhtml">ObjectContainer.h</a></li>
    <li class="footer">Generated on Tue Nov 10 2015 09:34:34 for Safir SDK Core by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
