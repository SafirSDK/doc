<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Safir SDK Core: Safir::Dob::Typesystem::ToolSupport Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a00329.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Safir::Dob::Typesystem::ToolSupport Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:a00330"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00330.xhtml">TypeUtilities</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00010.xhtml">BlobReader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is used to unpack and read blobs created by the <a class="el" href="a00011.xhtml" title="This class is used to create blobs by writing member values and the finally calling the CopyRawBlob-m...">BlobWriter</a> class.  <a href="a00010.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00011.xhtml">BlobWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is used to create blobs by writing member values and the finally calling the CopyRawBlob-method.  <a href="a00011.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00016.xhtml">ClassDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a class type.  <a href="a00016.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00041.xhtml">CreateRoutineDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a create routine.  <a href="a00041.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00063.xhtml">EnumDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of an enumeration type.  <a href="a00063.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00078.xhtml">ExceptionDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of an exception type.  <a href="a00078.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00096.xhtml">MemberDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a member.  <a href="a00096.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00097.xhtml">MemberMappingDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a property member mapping.  <a href="a00097.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00115.xhtml">ParameterDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a parameter.  <a href="a00115.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00118.xhtml">ParseError</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="a00077.xhtml" title="This is the base class of all (non-Fundamental) Exceptions. ">Exception</a> used to report errors in dou- and dom- files.  <a href="a00118.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00130.xhtml">PropertyDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a property type.  <a href="a00130.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00131.xhtml">PropertyMappingDescription</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Description of a property mapping.  <a href="a00131.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00172.xhtml">TypeRepository</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="a00172.xhtml" title="The TypeRepository class is the baseclass of any TypeRepository implementation. ">TypeRepository</a> class is the baseclass of any <a class="el" href="a00172.xhtml" title="The TypeRepository class is the baseclass of any TypeRepository implementation. ">TypeRepository</a> implementation.  <a href="a00172.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00173.xhtml">TypeRepositoryTraits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00174.xhtml">TypeRepositoryTraits&lt; TypeRepository &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">TypeTraits used to deduce specific types when <a class="el" href="a00172.xhtml" title="The TypeRepository class is the baseclass of any TypeRepository implementation. ">TypeRepository</a> is used in template code.  <a href="a00174.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a9bfa630132cfa4bce70346113a1ca561"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00329.xhtml#a9bfa630132cfa4bce70346113a1ca561">BinaryToBase64</a> (const char *binary, size_t size, std::ostringstream &amp;base64)</td></tr>
<tr class="memdesc:a9bfa630132cfa4bce70346113a1ca561"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes binary data to base64.  <a href="#a9bfa630132cfa4bce70346113a1ca561">More...</a><br /></td></tr>
<tr class="separator:a9bfa630132cfa4bce70346113a1ca561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d7c14eb4dceb07d107a38e31292290"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00329.xhtml#a79d7c14eb4dceb07d107a38e31292290">Base64ToBinary</a> (const std::string &amp;base64Str, std::vector&lt; char &gt; &amp;binary)</td></tr>
<tr class="memdesc:a79d7c14eb4dceb07d107a38e31292290"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes base64 data into binary data.  <a href="#a79d7c14eb4dceb07d107a38e31292290">More...</a><br /></td></tr>
<tr class="separator:a79d7c14eb4dceb07d107a38e31292290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf1df2b6d65e30cf8d4719ff87f17a4f"><td class="memTemplParams" colspan="2">template&lt;class RepositoryT &gt; </td></tr>
<tr class="memitem:abf1df2b6d65e30cf8d4719ff87f17a4f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00329.xhtml#abf1df2b6d65e30cf8d4719ff87f17a4f">BinaryToXml</a> (const RepositoryT *repository, const char *blob, std::ostringstream &amp;xml)</td></tr>
<tr class="memdesc:abf1df2b6d65e30cf8d4719ff87f17a4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serializes binary representation of an object to xml.  <a href="#abf1df2b6d65e30cf8d4719ff87f17a4f">More...</a><br /></td></tr>
<tr class="separator:abf1df2b6d65e30cf8d4719ff87f17a4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab81d76172716f4bc19cca72fe2409bcb"><td class="memTemplParams" colspan="2">template&lt;class RepositoryT &gt; </td></tr>
<tr class="memitem:ab81d76172716f4bc19cca72fe2409bcb"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00329.xhtml#ab81d76172716f4bc19cca72fe2409bcb">XmlToBinary</a> (const RepositoryT *repository, const char *xml, std::vector&lt; char &gt; &amp;binary)</td></tr>
<tr class="memdesc:ab81d76172716f4bc19cca72fe2409bcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a xml representation of an object to binary form.  <a href="#ab81d76172716f4bc19cca72fe2409bcb">More...</a><br /></td></tr>
<tr class="separator:ab81d76172716f4bc19cca72fe2409bcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a855912b5f64793958d826a076bb0efe1"><td class="memTemplParams" colspan="2">template&lt;class RepositoryT &gt; </td></tr>
<tr class="memitem:a855912b5f64793958d826a076bb0efe1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00329.xhtml#a855912b5f64793958d826a076bb0efe1">BinaryToJson</a> (const RepositoryT *repository, const char *blob, std::ostringstream &amp;json)</td></tr>
<tr class="memdesc:a855912b5f64793958d826a076bb0efe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serializes binary representation of an object to json.  <a href="#a855912b5f64793958d826a076bb0efe1">More...</a><br /></td></tr>
<tr class="separator:a855912b5f64793958d826a076bb0efe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af68e48f98f82b13e2e0a8bbab40c62e5"><td class="memTemplParams" colspan="2">template&lt;class RepositoryT &gt; </td></tr>
<tr class="memitem:af68e48f98f82b13e2e0a8bbab40c62e5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00329.xhtml#af68e48f98f82b13e2e0a8bbab40c62e5">JsonToBinary</a> (const RepositoryT *repository, const char *json, std::vector&lt; char &gt; &amp;binary)</td></tr>
<tr class="memdesc:af68e48f98f82b13e2e0a8bbab40c62e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a json representation of an object to binary form.  <a href="#af68e48f98f82b13e2e0a8bbab40c62e5">More...</a><br /></td></tr>
<tr class="separator:af68e48f98f82b13e2e0a8bbab40c62e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81c09ce71c19d83bf6fcc57560750971"><td class="memTemplParams" colspan="2">template&lt;class RepositoryT &gt; </td></tr>
<tr class="memitem:a81c09ce71c19d83bf6fcc57560750971"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00329.xhtml#a81c09ce71c19d83bf6fcc57560750971">RepositoryToString</a> (const RepositoryT *repository, bool includeCreateRoutines, std::ostream &amp;os)</td></tr>
<tr class="memdesc:a81c09ce71c19d83bf6fcc57560750971"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a complete text description of a type repository and all of its content.  <a href="#a81c09ce71c19d83bf6fcc57560750971">More...</a><br /></td></tr>
<tr class="separator:a81c09ce71c19d83bf6fcc57560750971"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae95a99850bc3937b6ba054d2ca4fa73e"><td class="memTemplParams" colspan="2">template&lt;class RepositoryT &gt; </td></tr>
<tr class="memitem:ae95a99850bc3937b6ba054d2ca4fa73e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00329.xhtml#ae95a99850bc3937b6ba054d2ca4fa73e">TypeToString</a> (const RepositoryT *repository, DotsC_TypeId typeId, std::ostream &amp;os)</td></tr>
<tr class="memdesc:ae95a99850bc3937b6ba054d2ca4fa73e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a complete text description of a type.  <a href="#ae95a99850bc3937b6ba054d2ca4fa73e">More...</a><br /></td></tr>
<tr class="separator:ae95a99850bc3937b6ba054d2ca4fa73e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdc7b8990806a92bb433c1c148c83086"><td class="memItemLeft" align="right" valign="top">DOTS_INTERNAL_API boost::shared_ptr&lt; const <a class="el" href="a00172.xhtml">TypeRepository</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00329.xhtml#abdc7b8990806a92bb433c1c148c83086">ParseTypeDefinitions</a> (const boost::filesystem::path &amp;root)</td></tr>
<tr class="memdesc:abdc7b8990806a92bb433c1c148c83086"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will validate and parse a complete set of dou- and dom-files from If no error occurs, the result is returned.  <a href="#abdc7b8990806a92bb433c1c148c83086">More...</a><br /></td></tr>
<tr class="separator:abdc7b8990806a92bb433c1c148c83086"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a982b1a86e56b472c488d5bf6c2e29a22"><td class="memItemLeft" align="right" valign="top">DOTS_INTERNAL_API boost::shared_ptr&lt; const <a class="el" href="a00172.xhtml">TypeRepository</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00329.xhtml#a982b1a86e56b472c488d5bf6c2e29a22">ParseTypeDefinitions</a> (const std::vector&lt; boost::filesystem::path &gt; &amp;roots)</td></tr>
<tr class="memdesc:a982b1a86e56b472c488d5bf6c2e29a22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will validate and parse a complete set of dou- and dom-files.  <a href="#a982b1a86e56b472c488d5bf6c2e29a22">More...</a><br /></td></tr>
<tr class="separator:a982b1a86e56b472c488d5bf6c2e29a22"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a79d7c14eb4dceb07d107a38e31292290"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::Base64ToBinary </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>base64Str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; char &gt; &amp;&#160;</td>
          <td class="paramname"><em>binary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Decodes base64 data into binary data. </p>
<p>Converts data in Base64 format into binary data format.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">base64Str</td><td>[in] - String containing a valid base64 string. </td></tr>
    <tr><td class="paramname">binary</td><td>[out] - Binary result of conversion. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>if anything goes wrong. For example if base64Str is not well-formed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9bfa630132cfa4bce70346113a1ca561"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::BinaryToBase64 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>binary</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostringstream &amp;&#160;</td>
          <td class="paramname"><em>base64</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Encodes binary data to base64. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">binary</td><td>[in] - Pointer to binary data to be encoded. </td></tr>
    <tr><td class="paramname">size</td><td>[in] - Size of binary data in bytes. </td></tr>
    <tr><td class="paramname">base64</td><td>[out] - Base64 encoded result. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>if anything goes wrong. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a855912b5f64793958d826a076bb0efe1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RepositoryT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::BinaryToJson </td>
          <td>(</td>
          <td class="paramtype">const RepositoryT *&#160;</td>
          <td class="paramname"><em>repository</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>blob</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostringstream &amp;&#160;</td>
          <td class="paramname"><em>json</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Serializes binary representation of an object to json. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">repository</td><td>[in] - Type repository containing needed type information. </td></tr>
    <tr><td class="paramname">blob</td><td>[in] - Binary data to be converted. </td></tr>
    <tr><td class="paramname">json</td><td>[out] - Json result of conversion. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>if binary can't be serialized to json. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abf1df2b6d65e30cf8d4719ff87f17a4f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RepositoryT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::BinaryToXml </td>
          <td>(</td>
          <td class="paramtype">const RepositoryT *&#160;</td>
          <td class="paramname"><em>repository</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>blob</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostringstream &amp;&#160;</td>
          <td class="paramname"><em>xml</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Serializes binary representation of an object to xml. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">repository</td><td>[in] - Type repository containing needed type information. </td></tr>
    <tr><td class="paramname">blob</td><td>[in] - Binary data to be converted. </td></tr>
    <tr><td class="paramname">xml</td><td>[out] - Xml result of conversion. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>if binary can't be serialized to xml. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af68e48f98f82b13e2e0a8bbab40c62e5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RepositoryT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::JsonToBinary </td>
          <td>(</td>
          <td class="paramtype">const RepositoryT *&#160;</td>
          <td class="paramname"><em>repository</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>json</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; char &gt; &amp;&#160;</td>
          <td class="paramname"><em>binary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a json representation of an object to binary form. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">repository</td><td>[in] - Type repository containing needed type information. </td></tr>
    <tr><td class="paramname">json</td><td>[in] - Json serialized object. </td></tr>
    <tr><td class="paramname">binary</td><td>[out] - Resulting binary data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>if json can't be serialized to a binary. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abdc7b8990806a92bb433c1c148c83086"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DOTS_INTERNAL_API boost::shared_ptr&lt;const <a class="el" href="a00172.xhtml">TypeRepository</a>&gt; Safir::Dob::Typesystem::ToolSupport::ParseTypeDefinitions </td>
          <td>(</td>
          <td class="paramtype">const boost::filesystem::path &amp;&#160;</td>
          <td class="paramname"><em>root</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Will validate and parse a complete set of dou- and dom-files from If no error occurs, the result is returned. </p>
<p>The root path will be parsed recursively, i.e any subfolders will be parsed too.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">root</td><td>[in] - Root directory path to location of dou- and dom-files that shall be parsed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="a00172.xhtml" title="The TypeRepository class is the baseclass of any TypeRepository implementation. ">TypeRepository</a> containing all types, i.e classes, exceptions, enums, properties and property mappings. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>The dou- or dom- files at the specified path contains errors. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a982b1a86e56b472c488d5bf6c2e29a22"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">DOTS_INTERNAL_API boost::shared_ptr&lt;const <a class="el" href="a00172.xhtml">TypeRepository</a>&gt; Safir::Dob::Typesystem::ToolSupport::ParseTypeDefinitions </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; boost::filesystem::path &gt; &amp;&#160;</td>
          <td class="paramname"><em>roots</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Will validate and parse a complete set of dou- and dom-files. </p>
<p>If no error occurs, the result is returned. This version takes a vector of paths and each path is traversed recursively includeing subfolders. If the same dou-/dom- file exists at many paths the latest found will override the previous ones. I.e files found at paths closer to the end of the vector will override files closer to the beginning of the vector.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">roots</td><td>[in] - A vector of root directories containing dou- and dom-files that shall be parsed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="a00172.xhtml" title="The TypeRepository class is the baseclass of any TypeRepository implementation. ">TypeRepository</a> containing all types, i.e classes, exceptions, enums, properties and property mappings. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>The dou- or dom- files at the specified path contains errors. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a81c09ce71c19d83bf6fcc57560750971"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RepositoryT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::RepositoryToString </td>
          <td>(</td>
          <td class="paramtype">const RepositoryT *&#160;</td>
          <td class="paramname"><em>repository</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>includeCreateRoutines</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a complete text description of a type repository and all of its content. </p>
<p>This function is primarily intended for debugging. It can be used to compare if two repositiories are identical.</p>
<p>Since CreateRoutines are only used for code generation and not needed for a repository to be fully functional the caller must choose if CreateRoutins are to be included in the output. The reason is that it shall be possible to compare outputs from two repositories where only one of them contains CreateRoutine information.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">repository</td><td>[in] - Type repository to convert to text. </td></tr>
    <tr><td class="paramname">includeCreateRoutines</td><td>[in] - If true CreateRoutines will also be written to the output. </td></tr>
    <tr><td class="paramname">os</td><td>[out] - Output stream. For example a ostringstream or cout. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae95a99850bc3937b6ba054d2ca4fa73e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RepositoryT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::TypeToString </td>
          <td>(</td>
          <td class="paramtype">const RepositoryT *&#160;</td>
          <td class="paramname"><em>repository</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DotsC_TypeId&#160;</td>
          <td class="paramname"><em>typeId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a complete text description of a type. </p>
<p>If typeId refers to a class, CreateRoutines will be omitted.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">repository</td><td>[in] - Type repository containing all type information. </td></tr>
    <tr><td class="paramname">typeId</td><td>[in] - The type to convert to text. </td></tr>
    <tr><td class="paramname">os</td><td>[out] - Output stream. For example a ostringstream or cout. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab81d76172716f4bc19cca72fe2409bcb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class RepositoryT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Safir::Dob::Typesystem::ToolSupport::XmlToBinary </td>
          <td>(</td>
          <td class="paramtype">const RepositoryT *&#160;</td>
          <td class="paramname"><em>repository</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>xml</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; char &gt; &amp;&#160;</td>
          <td class="paramname"><em>binary</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a xml representation of an object to binary form. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">repository</td><td>[in] - Type repository containing needed type information. </td></tr>
    <tr><td class="paramname">xml</td><td>[in] - Xml serialized object. </td></tr>
    <tr><td class="paramname">binary</td><td>[out] - Resulting binary data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">Safir::Dob::Typesystem::Parser:ParseError</td><td>if xml can't be serialized to a binary. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00315.xhtml">Safir</a></li><li class="navelem"><a class="el" href="a00320.xhtml">Dob</a></li><li class="navelem"><a class="el" href="a00322.xhtml">Typesystem</a></li><li class="navelem"><a class="el" href="a00329.xhtml">ToolSupport</a></li>
    <li class="footer">Generated on Tue Nov 10 2015 09:34:36 for Safir SDK Core by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.10 </li>
  </ul>
</div>
</body>
</html>
