<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Safir SDK Core: /home/lars/safir/safir-sdk-core/include/Safir/Dob/Typesystem/ToolSupport/BlobWriter.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="iconic_logotype.64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Safir SDK Core
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a00158_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BlobWriter.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00158.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/******************************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">* Copyright Saab AB, 2004-2015 (http://safirsdkcore.com)</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">* Created by: Joel Ottosson / joot</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">*******************************************************************************</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">* This file is part of Safir SDK Core.</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">* Safir SDK Core is free software: you can redistribute it and/or modify</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">* it under the terms of version 3 of the GNU General Public License as</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">* published by the Free Software Foundation.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">* Safir SDK Core is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">* GNU General Public License for more Internals.</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">* You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">* along with Safir SDK Core.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">*</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">******************************************************************************/</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __DOTS_INTERNAL_BLOB_WRITER_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __DOTS_INTERNAL_BLOB_WRITER_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00155.xhtml">Safir/Dob/Typesystem/ToolSupport/BlobReader.h</a>&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00170.xhtml">Safir/Dob/Typesystem/ToolSupport/TypeUtilities.h</a>&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="a00406.xhtml">Safir</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>Dob</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>Typesystem</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>ToolSupport</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> RepositoryT, <span class="keyword">class</span> Traits=Safir::Dob::Typesystem::ToolSupport::TypeRepositoryTraits&lt;RepositoryT&gt; &gt;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="a01325.xhtml">   62</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a01325.xhtml">BlobWriter</a> : <span class="keyword">private</span> boost::noncopyable</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="a01325.xhtml#afba7f069feb9a3f504561d19168c06ce">   65</a></span>&#160;        <span class="keyword">typedef</span> <a class="code" href="a01325.xhtml">BlobWriter&lt;RepositoryT, Traits&gt;</a> <a class="code" href="a01325.xhtml#afba7f069feb9a3f504561d19168c06ce">BlobWriterType</a>;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">   66</a></span>&#160;        <span class="keyword">typedef</span> <a class="code" href="a01321.xhtml">BlobReader&lt;RepositoryT, Traits&gt;</a> <a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="a01325.xhtml#a410272fb77c1073eec3ffa0206271577">   67</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::RepositoryType <a class="code" href="a01325.xhtml#a410272fb77c1073eec3ffa0206271577">RepositoryType</a>;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="a01325.xhtml#a5286f98248b9b8307fb6fb4eeb5a790c">   68</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::ClassDescriptionType <a class="code" href="a01325.xhtml#a5286f98248b9b8307fb6fb4eeb5a790c">ClassDescriptionType</a>;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="a01325.xhtml#ac0a07ef22858c94f1c57588f2094c7ae">   69</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::MemberDescriptionType <a class="code" href="a01325.xhtml#ac0a07ef22858c94f1c57588f2094c7ae">MemberDescriptionType</a>;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="a01325.xhtml#a2f449b1b54470c5fb148108832c8db04">   70</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::PropertyDescriptionType <a class="code" href="a01325.xhtml#a2f449b1b54470c5fb148108832c8db04">PropertyDescriptionType</a>;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="a01325.xhtml#acf3b5a9df3b26397fedff3615fbdf168">   71</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::ExceptionDescriptionType <a class="code" href="a01325.xhtml#acf3b5a9df3b26397fedff3615fbdf168">ExceptionDescriptionType</a>;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="a01325.xhtml#a651ce64edbf5b282e3ee7c4d7fac9798">   72</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::ParameterDescriptionType <a class="code" href="a01325.xhtml#a651ce64edbf5b282e3ee7c4d7fac9798">ParameterDescriptionType</a>;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="a01325.xhtml#a3221acaabac1d1562c42a8de4ed27422">   73</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::EnumDescriptionType <a class="code" href="a01325.xhtml#a3221acaabac1d1562c42a8de4ed27422">EnumDescriptionType</a>;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="a01325.xhtml#aec573fdac7e4f003cec8ee4ea3600d6b">   74</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::MemberMappingDescriptionType <a class="code" href="a01325.xhtml#aec573fdac7e4f003cec8ee4ea3600d6b">MemberMappingDescriptionType</a>;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="a01325.xhtml#a8aacbd97c02153c57d10d501314c121e">   75</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::PropertyMappingDescriptionType <a class="code" href="a01325.xhtml#a8aacbd97c02153c57d10d501314c121e">PropertyMappingDescriptionType</a>;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="a01325.xhtml#ac995304e65ff5dc3d4435d583e8b4907">   76</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Traits::CreateRoutineDescriptionType <a class="code" href="a01325.xhtml#ac995304e65ff5dc3d4435d583e8b4907">CreateRoutineDescriptionType</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="a01325.xhtml#a50bb968547033e055e8c1d69fbae8fd5">   83</a></span>&#160;        <a class="code" href="a01325.xhtml#a50bb968547033e055e8c1d69fbae8fd5">BlobWriter</a>(<span class="keyword">const</span> RepositoryT* rep, DotsC_TypeId typeId)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            :m_repository(rep)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            ,m_classDescription(m_repository-&gt;GetClass(typeId))</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            ,m_memberDescription(NULL)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            ,m_memberIndex(-1)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            ,m_valueIndex(-1)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            ,m_blob(typeId, m_classDescription-&gt;<a class="code" href="a00416.xhtml#aa5eee7bf2cca9bbe6c339bb362f3b74b">GetNumberOfMembers</a>())</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            Init();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="a01325.xhtml#aeb2f1609f120fbbabebb799cb1fe1b10">   94</a></span>&#160;        <a class="code" href="a01325.xhtml#aeb2f1609f120fbbabebb799cb1fe1b10">BlobWriter</a>(<span class="keyword">const</span> BlobReaderType&amp; reader)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            :m_repository(Internal::BlobUtils::BlobAccess::GetRepository&lt;<a class="code" href="a01321.xhtml">BlobReader</a>&lt;RepositoryT, Traits&gt; &gt;(reader))</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            ,m_classDescription(m_repository-&gt;GetClass(reader.<a class="code" href="a00412.xhtml#add598341f70c143ad35a701a65884214">TypeId</a>()))</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            ,m_memberDescription(NULL)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            ,m_memberIndex(-1)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            ,m_valueIndex(-1)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            ,m_blob(Internal::BlobUtils::BlobAccess::GetBlob&lt;<a class="code" href="a01321.xhtml">BlobReader</a>&lt;RepositoryT, Traits&gt; &gt;(reader))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="a01325.xhtml#a251beb25ec1231c7eeb46b0770f25ae6">  108</a></span>&#160;        DotsC_TypeId <a class="code" href="a01325.xhtml#a251beb25ec1231c7eeb46b0770f25ae6">TypeId</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_blob.TypeId();}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="a01325.xhtml#a73cdeb45c2cbe32d025f9502dd5b2bb3">  114</a></span>&#160;        DotsC_Int32 <a class="code" href="a01325.xhtml#a73cdeb45c2cbe32d025f9502dd5b2bb3">CalculateBlobSize</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_blob.CalculateBlobSize();}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="a01325.xhtml#a465e51fa7bfa4d1afef2db48ad0560ea">  121</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a465e51fa7bfa4d1afef2db48ad0560ea">CopyRawBlob</a>(<span class="keywordtype">char</span>* destBlob)<span class="keyword"> const </span>{m_blob.Serialize(destBlob);}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="a01325.xhtml#a52749ae61feab81bfa3d9affba8919c9">  129</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a52749ae61feab81bfa3d9affba8919c9">SetChangedTopLevel</a>(DotsC_MemberIndex member, <span class="keywordtype">bool</span> isChanged)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">const</span> MemberDescriptionType* md=m_classDescription-&gt;GetMember(member);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            DotsC_CollectionType collectionType=md-&gt;GetCollectionType();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">if</span> (collectionType==SequenceCollectionType || collectionType==DictionaryCollectionType)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                m_blob.SetChangedTopLevel(member, isChanged);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="a01325.xhtml#adea909185ddcc9eaf8b12f92360af77d">  146</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#adea909185ddcc9eaf8b12f92360af77d">SetChangedHere</a>(DotsC_MemberIndex member,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            DotsC_Int32 valueIndex,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            <span class="keywordtype">bool</span> isChanged)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {m_blob.SetChangedHere(member, valueIndex, isChanged);}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> Key&gt;</div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">  163</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(DotsC_MemberIndex member, <span class="keyword">const</span> Key&amp; key)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            MoveToMember(member);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">if</span> (m_memberDescription-&gt;GetCollectionType()==DictionaryCollectionType)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                m_valueIndex=m_blob.AddValue(m_memberIndex, <span class="keyword">false</span>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(key);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">throw</span> std::logic_error(<span class="stringliteral">&quot;WriteKey was called on member thats not a dictionary.&quot;</span>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> Val&gt;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">  192</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(DotsC_MemberIndex member, DotsC_Int32 index, <span class="keyword">const</span> Val&amp; val, <span class="keywordtype">bool</span> isNull, <span class="keywordtype">bool</span> isChanged)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            MoveToMember(member);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">switch</span> (m_memberDescription-&gt;GetCollectionType())</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">case</span> SingleValueCollectionType:</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    m_valueIndex=0;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    m_blob.SetChangedHere(m_memberIndex, m_valueIndex, isChanged);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">case</span> ArrayCollectionType:</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    m_valueIndex=index;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    m_blob.SetChangedHere(m_memberIndex, m_valueIndex, isChanged);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">case</span> SequenceCollectionType:</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    m_valueIndex=m_blob.AddValue(m_memberIndex, isChanged);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">case</span> DictionaryCollectionType:</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    m_blob.SetChangedHere(m_memberIndex, m_valueIndex, isChanged);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">if</span> (!isNull)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(val);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">  231</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">SetChangedRecursive</a>(<span class="keywordtype">bool</span> isChanged)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordtype">bool</span> dummy=<span class="keyword">false</span>, isNull=<span class="keyword">false</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> memIx=0; memIx&lt;m_classDescription-&gt;GetNumberOfMembers(); ++memIx)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keyword">const</span> MemberDescriptionType* md=m_classDescription-&gt;GetMember(memIx);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">switch</span> (md-&gt;GetCollectionType())</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keywordflow">case</span> SingleValueCollectionType:</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        m_blob.SetChangedHere(memIx, 0, isChanged);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        <span class="keywordflow">if</span> (md-&gt;GetMemberType()==ObjectMemberType)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                            m_blob.ValueStatus(memIx, 0, isNull, dummy);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            <span class="keywordflow">if</span> (!isNull)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                            {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                std::pair&lt;const char*, DotsC_Int32&gt; obj=m_blob.GetValueBinary(memIx, 0);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                BlobWriterType inner(<a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>(m_repository, obj.first));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                inner.<a class="code" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">SetChangedRecursive</a>(isChanged);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(memIx, 0, inner, isNull, isChanged);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                            }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">case</span> ArrayCollectionType:</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                        <span class="keywordflow">if</span> (md-&gt;GetMemberType()==ObjectMemberType)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                        {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> valIx=0; valIx&lt;m_blob.NumberOfValues(memIx); ++valIx)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                            {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                m_blob.ValueStatus(memIx, valIx, isNull, dummy);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                <span class="keywordflow">if</span> (isNull)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                    m_blob.SetChangedHere(memIx, valIx, isChanged);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                <span class="keywordflow">else</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                    std::pair&lt;const char*, DotsC_Int32&gt; obj=m_blob.GetValueBinary(memIx, valIx);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                    BlobWriterType inner(<a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>(m_repository, obj.first));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                    inner.<a class="code" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">SetChangedRecursive</a>(isChanged);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                    <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(memIx, valIx, inner, isNull, isChanged);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                            }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        <span class="keywordflow">else</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> valIx=0; valIx&lt;m_blob.NumberOfValues(memIx); ++valIx)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                m_blob.SetChangedHere(memIx, valIx, isChanged);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                            }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">case</span> SequenceCollectionType:</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        m_blob.SetChangedTopLevel(memIx, isChanged);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        <span class="keywordflow">if</span> (md-&gt;GetMemberType()==ObjectMemberType)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                            MoveToMember(memIx);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> valIx=0; valIx&lt;m_blob.NumberOfValues(memIx); ++valIx)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                m_blob.ValueStatus(memIx, valIx, isNull, dummy);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                <span class="keywordflow">if</span> (!isNull)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                    std::pair&lt;const char*, DotsC_Int32&gt; obj=m_blob.GetValueBinary(memIx, valIx);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                    BlobWriterType inner(<a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>(m_repository, obj.first));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                    inner.<a class="code" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">SetChangedRecursive</a>(isChanged);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                    m_valueIndex=valIx;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                    <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(inner);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                            }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                <span class="keywordflow">case</span> DictionaryCollectionType:</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        m_blob.SetChangedTopLevel(memIx, isChanged);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        MoveToMember(memIx);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> valIx=0; valIx&lt;m_blob.NumberOfValues(memIx); ++valIx)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                            m_blob.SetChangedHere(memIx, valIx, isChanged);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                            <span class="keywordflow">if</span> (md-&gt;GetMemberType()==ObjectMemberType)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                            {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                m_blob.ValueStatus(memIx, valIx, isNull, dummy);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                <span class="keywordflow">if</span> (!isNull)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                    std::pair&lt;const char*, DotsC_Int32&gt; obj=m_blob.GetValueBinary(memIx, valIx);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                    BlobWriterType inner(<a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>(m_repository, obj.first));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                    inner.<a class="code" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">SetChangedRecursive</a>(isChanged);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                    m_valueIndex=valIx;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                    <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(inner);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                            }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="a01325.xhtml#a0fab0b48dddbaa344fe4ee6d1d1bb152">  339</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a01325.xhtml#a0fab0b48dddbaa344fe4ee6d1d1bb152">MarkChanges</a>(<span class="keyword">const</span> BlobReaderType&amp; reader)</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="a01325.xhtml#a251beb25ec1231c7eeb46b0770f25ae6">TypeId</a>()!=reader.<a class="code" href="a01321.xhtml#a23b4e5d85abb2b18f99ba914217dc8c4">TypeId</a>())</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordtype">bool</span> diff=<span class="keyword">false</span>;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keyword">const</span> Internal::Blob&amp; other=Internal::BlobUtils::BlobAccess::GetBlob(reader);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> memIx=0; memIx&lt;m_classDescription-&gt;GetNumberOfMembers(); ++memIx)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                <span class="keyword">const</span> MemberDescriptionType* md=m_classDescription-&gt;GetMember(memIx);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <span class="keywordflow">switch</span> (md-&gt;GetCollectionType())</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                {</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">case</span> SingleValueCollectionType:</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                        <span class="keywordflow">if</span> (Diff(other, md, memIx, 0, 0))</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                        {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            m_blob.SetChangedHere(memIx, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                            diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                        }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keywordflow">case</span> ArrayCollectionType:</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> valIx=0; valIx&lt;md-&gt;GetArraySize(); ++valIx)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            <span class="keywordflow">if</span> (Diff(other, md, memIx, valIx, valIx))</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                            {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                m_blob.SetChangedHere(memIx, valIx, <span class="keyword">true</span>);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                            }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keywordflow">case</span> SequenceCollectionType:</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                        <span class="keywordflow">if</span> (m_blob.NumberOfValues(memIx)!=other.NumberOfValues(memIx))</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                        {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                            diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                            m_blob.SetChangedTopLevel(memIx, <span class="keyword">true</span>);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                        }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> valIx=0; valIx&lt;m_blob.NumberOfValues(memIx); ++valIx)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                            <span class="keywordflow">if</span> (Diff(other, md, memIx, valIx, valIx))</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                            {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                m_blob.SetChangedTopLevel(memIx, <span class="keyword">true</span>);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                <span class="keywordflow">if</span> (md-&gt;GetMemberType()==ObjectMemberType)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                    m_blob.SetChangedHere(memIx, valIx, <span class="keyword">true</span>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                }</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                            }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="keywordflow">case</span> DictionaryCollectionType:</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="comment">//Different count, or something in this that is not in other -&gt; topLevel</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        <span class="comment">//different size, i.e top level changed</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        <span class="keywordflow">if</span> (m_blob.NumberOfValues(memIx)!=other.NumberOfValues(memIx))</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                        {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                            m_blob.SetChangedTopLevel(memIx, <span class="keyword">true</span>);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                            diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                        }</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                        <span class="keyword">typedef</span> std::map&lt;DotsC_Int64, int&gt; Uki;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                        Uki myUki, otherUki;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                        UniversalKeyToIndex(m_blob, md, memIx, myUki);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        UniversalKeyToIndex(other, md, memIx, otherUki);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                        <span class="keywordflow">for</span> (Uki::const_iterator myIt=myUki.begin(); myIt!=myUki.end(); ++myIt)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                            Uki::const_iterator otherIt=otherUki.find(myIt-&gt;first);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                            <span class="keywordflow">if</span> (otherIt==otherUki.end())</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                            {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                <span class="comment">//not found, we have something that is new</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                m_blob.SetChangedTopLevel(memIx, <span class="keyword">true</span>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                m_blob.SetChangedHere(memIx, myIt-&gt;second, <span class="keyword">true</span>);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                            }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Diff(other, md, memIx, myIt-&gt;second, otherIt-&gt;second))</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                m_blob.SetChangedHere(memIx, myIt-&gt;second, <span class="keyword">true</span>);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                diff=<span class="keyword">true</span>;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                            }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                        }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                    }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="keywordflow">return</span> diff;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">const</span> RepositoryType* m_repository;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keyword">const</span> ClassDescriptionType* m_classDescription;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keyword">const</span> MemberDescriptionType* m_memberDescription;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        DotsC_MemberIndex m_memberIndex;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        DotsC_Int32 m_valueIndex;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keyword">mutable</span> Safir::Dob::Typesystem::ToolSupport::Internal::Blob m_blob;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> Init()</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        {</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="comment">//Add values to single value members and arrays since they are not allowed to be empty.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="comment">//Other collections (sequence, dictionary) are allowed to be empty.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordflow">for</span> (DotsC_MemberIndex memberIndex=0; memberIndex&lt;m_classDescription-&gt;GetNumberOfMembers(); ++memberIndex)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                <span class="keyword">const</span> MemberDescriptionType* member=m_classDescription-&gt;GetMember(memberIndex);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                <span class="keywordflow">switch</span> (member-&gt;GetCollectionType())</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                <span class="keywordflow">case</span> SingleValueCollectionType:</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        m_blob.AddValue(memberIndex, <span class="keyword">false</span>);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    }</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                <span class="keywordflow">case</span> ArrayCollectionType:</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> arrayIndex=0; arrayIndex&lt;member-&gt;GetArraySize(); ++arrayIndex)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                            m_blob.AddValue(memberIndex, <span class="keyword">false</span>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                }</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> MoveToMember(DotsC_MemberIndex member)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">if</span> (m_memberIndex!=member)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            {</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                m_memberDescription=m_classDescription-&gt;GetMember(member);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                m_memberIndex=member;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> ThrowWrongMemberType()<span class="keyword"> const</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            std::ostringstream os;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            os&lt;&lt;<span class="stringliteral">&quot;Trying to write data of wrong memberType to a blob for member &#39;&quot;</span>&lt;&lt;m_memberDescription-&gt;GetName()&lt;&lt;<span class="stringliteral">&quot;&#39; in class &#39;&quot;</span>&lt;&lt;m_classDescription-&gt;GetName()&lt;&lt;<span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keywordflow">throw</span> std::logic_error(os.str());</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> ThrowWrongCollectionType()<span class="keyword"> const</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            std::ostringstream os;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            os&lt;&lt;<span class="stringliteral">&quot;Trying to write data of wrong collectionType to a blob for member &#39;&quot;</span>&lt;&lt;m_memberDescription-&gt;GetName()&lt;&lt;<span class="stringliteral">&quot;&#39; in class &#39;&quot;</span>&lt;&lt;m_classDescription-&gt;GetName()&lt;&lt;<span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="keywordflow">throw</span> std::logic_error(os.str());</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="comment">//-----------------------</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="comment">// write keys</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="comment">//-----------------------</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(DotsC_Int32 key)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            m_blob.SetKeyInt32(m_memberIndex, m_valueIndex, key);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(DotsC_Int64 key)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            m_blob.SetKeyInt64(m_memberIndex, m_valueIndex, key);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* key)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            m_blob.SetKeyString(m_memberIndex, m_valueIndex, key);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(<span class="keyword">const</span> std::pair&lt;DotsC_Int64, const char *&gt;&amp; key)</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            m_blob.SetKeyHash(m_memberIndex, m_valueIndex, key.first);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="keywordflow">if</span> (key.second)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            {</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                m_blob.SetKeyString(m_memberIndex, m_valueIndex, key.second);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            }</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        }</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(<span class="keyword">const</span> std::pair&lt;DotsC_EntityId, const char*&gt;&amp; key)</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            m_blob.SetKeyInt64(m_memberIndex, m_valueIndex, key.first.typeId);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            <a class="code" href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">WriteKey</a>(std::pair&lt;DotsC_Int64, const char *&gt;(key.first.instanceId, key.second));</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        }</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="comment">//-----------------------</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="comment">// write values</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="comment">//-----------------------</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(DotsC_Int32 val)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==Int32MemberType || m_memberDescription-&gt;GetMemberType()==EnumerationMemberType);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            m_blob.SetValueInt32(m_memberIndex, m_valueIndex, val);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(DotsC_Int64 val)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==Int64MemberType || m_memberDescription-&gt;GetMemberType()==TypeIdMemberType);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            m_blob.SetValueInt64(m_memberIndex, m_valueIndex, val);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        }</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(DotsC_Float32 val)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <span class="comment">//assert(m_memberDescription-&gt;GetMemberType()==Float32MemberType);</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            m_blob.SetValueFloat32(m_memberIndex, m_valueIndex, val);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(DotsC_Float64 val)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="comment">//assert(m_memberDescription-&gt;GetMemberType()==Float64MemberType);</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            m_blob.SetValueFloat64(m_memberIndex, m_valueIndex, val);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keywordtype">bool</span> val)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        {</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==BooleanMemberType);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            m_blob.SetValueBool(m_memberIndex, m_valueIndex, val);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        }</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* val)</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==StringMemberType);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            m_blob.SetValueString(m_memberIndex, m_valueIndex, val);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keyword">const</span> std::pair&lt;DotsC_Int64, const char *&gt;&amp; val) <span class="comment">//hashed val</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==InstanceIdMemberType || m_memberDescription-&gt;GetMemberType()==ChannelIdMemberType || m_memberDescription-&gt;GetMemberType()==HandlerIdMemberType);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            m_blob.SetValueHash(m_memberIndex, m_valueIndex, val.first);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordflow">if</span> (val.second)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            {</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                m_blob.SetValueString(m_memberIndex, m_valueIndex, val.second);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keyword">const</span> std::pair&lt;DotsC_EntityId, const char*&gt;&amp; val) <span class="comment">//entityId with optional instance string</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==EntityIdMemberType);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            m_blob.SetValueInt64(m_memberIndex, m_valueIndex, val.first.typeId);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            m_blob.SetValueHash(m_memberIndex, m_valueIndex, val.first.instanceId);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="keywordflow">if</span> (val.second)</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            {</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                m_blob.SetValueString(m_memberIndex, m_valueIndex, val.second);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keyword">const</span> std::pair&lt;const char*, DotsC_Int32&gt;&amp; val) <span class="comment">//binary data or object</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        {</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==BinaryMemberType || m_memberDescription-&gt;GetMemberType()==ObjectMemberType);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            m_blob.SetValueBinary(m_memberIndex, m_valueIndex, val.first, val.second);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        }</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keyword">const</span> std::pair&lt;char*, DotsC_Int32&gt;&amp; val) <span class="comment">//binary data or object</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==BinaryMemberType || m_memberDescription-&gt;GetMemberType()==ObjectMemberType);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            m_blob.SetValueBinary(m_memberIndex, m_valueIndex, val.first, val.second);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        }</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(<span class="keyword">const</span> BlobWriterType&amp; val) <span class="comment">//object</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            assert(m_memberDescription-&gt;GetMemberType()==ObjectMemberType);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            std::vector&lt;char&gt; bin(static_cast&lt;size_t&gt;(val.<a class="code" href="a01325.xhtml#a73cdeb45c2cbe32d025f9502dd5b2bb3">CalculateBlobSize</a>()));</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            val.<a class="code" href="a01325.xhtml#a465e51fa7bfa4d1afef2db48ad0560ea">CopyRawBlob</a>(&amp;bin[0]);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            m_blob.SetValueBinary(m_memberIndex, m_valueIndex, &amp;bin[0], static_cast&lt;boost::int32_t&gt;(bin.size()));</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keywordtype">bool</span> Diff(<span class="keyword">const</span> Internal::Blob&amp; other, <span class="keyword">const</span> MemberDescriptionType* md, <span class="keywordtype">int</span> memberIndex, <span class="keywordtype">int</span> myValueIndex, <span class="keywordtype">int</span> otherValueIndex)</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        {</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keywordtype">bool</span> meIsNull=<span class="keyword">false</span>, meIsChanged=<span class="keyword">false</span>;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            <span class="keywordtype">bool</span> otherIsNull=<span class="keyword">false</span>, otherIsChanged=<span class="keyword">false</span>;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            m_blob.ValueStatus(memberIndex, myValueIndex, meIsNull, meIsChanged);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            other.ValueStatus(memberIndex, otherValueIndex, otherIsNull, otherIsChanged);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <span class="keywordflow">if</span> (meIsNull!=otherIsNull)</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            {</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                <span class="keywordflow">if</span> (!meIsNull &amp;&amp; md-&gt;GetMemberType()==ObjectMemberType)</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                {</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                    std::pair&lt;const char*, DotsC_Int32&gt; obj=m_blob.GetValueBinary(memberIndex, myValueIndex);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                    BlobWriterType inner(<a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>(m_repository, obj.first));</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                    inner.<a class="code" href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">SetChangedRecursive</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                    MoveToMember(memberIndex);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                    m_valueIndex=myValueIndex;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                    <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(inner);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                }</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            }</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!meIsNull)</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            {</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                <span class="keywordflow">switch</span>(md-&gt;GetMemberType())</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                <span class="keywordflow">case</span> BooleanMemberType:</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                    <span class="keywordflow">return</span> m_blob.GetValueBool(memberIndex, myValueIndex)!=other.GetValueBool(memberIndex, otherValueIndex);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                <span class="keywordflow">case</span> Int32MemberType:</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                <span class="keywordflow">case</span> EnumerationMemberType:</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                    <span class="keywordflow">return</span> m_blob.GetValueInt32(memberIndex, myValueIndex)!=other.GetValueInt32(memberIndex, otherValueIndex);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="keywordflow">case</span> Int64MemberType:</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                <span class="keywordflow">case</span> TypeIdMemberType:</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <span class="keywordflow">return</span> m_blob.GetValueInt64(memberIndex, myValueIndex)!=other.GetValueInt64(memberIndex, otherValueIndex);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                <span class="keywordflow">case</span> InstanceIdMemberType:</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                <span class="keywordflow">case</span> ChannelIdMemberType:</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                <span class="keywordflow">case</span> HandlerIdMemberType:</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                    <span class="keywordflow">return</span> m_blob.GetValueHash(memberIndex, myValueIndex)!=other.GetValueHash(memberIndex, otherValueIndex);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                <span class="keywordflow">case</span> EntityIdMemberType:</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    <span class="keywordflow">return</span> (m_blob.GetValueInt64(memberIndex, myValueIndex)!=other.GetValueInt64(memberIndex, otherValueIndex)) ||</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                        (m_blob.GetValueHash(memberIndex, myValueIndex)!=other.GetValueHash(memberIndex, otherValueIndex));</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                <span class="keywordflow">case</span> StringMemberType:</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    <span class="keywordflow">return</span> strcmp(m_blob.GetValueString(memberIndex, myValueIndex), other.GetValueString(memberIndex, otherValueIndex))!=0;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                <span class="keywordflow">case</span> ObjectMemberType:</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                        std::pair&lt;const char*, boost::int32_t&gt; meInner=m_blob.GetValueBinary(memberIndex, myValueIndex);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                        std::pair&lt;const char*, boost::int32_t&gt; otherInner=other.GetValueBinary(memberIndex, otherValueIndex);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                        <span class="keywordflow">if</span> (meInner.second!=otherInner.second || memcmp(meInner.first, otherInner.first, static_cast&lt;size_t&gt;(meInner.second))!=0)</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                        {</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                            <span class="comment">//not binary equal, something is probably different</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                            BlobWriterType inner(<a class="code" href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">BlobReaderType</a>(m_repository, meInner.first));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                            BlobReaderType otherReader(m_repository, otherInner.first);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                            <span class="keywordtype">bool</span> diff=inner.<a class="code" href="a01325.xhtml#a0fab0b48dddbaa344fe4ee6d1d1bb152">MarkChanges</a>(otherReader);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                            <span class="keywordflow">if</span> (diff)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                            {</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                                MoveToMember(memberIndex);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                                m_valueIndex=myValueIndex;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                                <a class="code" href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">WriteValue</a>(inner);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                            }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                        }</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                    }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                <span class="keywordflow">case</span> BinaryMemberType:</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    {</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                        std::pair&lt;const char*, boost::int32_t&gt; a=m_blob.GetValueBinary(memberIndex, myValueIndex);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                        std::pair&lt;const char*, boost::int32_t&gt; b=other.GetValueBinary(memberIndex, otherValueIndex);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                        <span class="keywordflow">return</span> a.second!=b.second || memcmp(a.first, b.first, static_cast&lt;size_t&gt;(a.second))!=0;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    }</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                <span class="keywordflow">case</span> Float32MemberType:</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                <span class="keywordflow">case</span> Ampere32MemberType:</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="keywordflow">case</span> CubicMeter32MemberType:</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="keywordflow">case</span> Hertz32MemberType:</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                <span class="keywordflow">case</span> Joule32MemberType:</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                <span class="keywordflow">case</span> Kelvin32MemberType:</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                <span class="keywordflow">case</span> Kilogram32MemberType:</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                <span class="keywordflow">case</span> Meter32MemberType:</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                <span class="keywordflow">case</span> MeterPerSecond32MemberType:</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                <span class="keywordflow">case</span> MeterPerSecondSquared32MemberType:</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                <span class="keywordflow">case</span> Newton32MemberType:</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                <span class="keywordflow">case</span> Pascal32MemberType:</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                <span class="keywordflow">case</span> Radian32MemberType:</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                <span class="keywordflow">case</span> RadianPerSecond32MemberType:</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                <span class="keywordflow">case</span> RadianPerSecondSquared32MemberType:</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                <span class="keywordflow">case</span> Second32MemberType:</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                <span class="keywordflow">case</span> SquareMeter32MemberType:</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                <span class="keywordflow">case</span> Steradian32MemberType:</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="keywordflow">case</span> Volt32MemberType:</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                <span class="keywordflow">case</span> Watt32MemberType:</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    <span class="keywordflow">return</span> m_blob.GetValueFloat32(memberIndex, myValueIndex)!=other.GetValueFloat32(memberIndex, otherValueIndex);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                <span class="keywordflow">case</span> Float64MemberType:</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                <span class="keywordflow">case</span> Ampere64MemberType:</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                <span class="keywordflow">case</span> CubicMeter64MemberType:</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                <span class="keywordflow">case</span> Hertz64MemberType:</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                <span class="keywordflow">case</span> Joule64MemberType:</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                <span class="keywordflow">case</span> Kelvin64MemberType:</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                <span class="keywordflow">case</span> Kilogram64MemberType:</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                <span class="keywordflow">case</span> Meter64MemberType:</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                <span class="keywordflow">case</span> MeterPerSecond64MemberType:</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                <span class="keywordflow">case</span> MeterPerSecondSquared64MemberType:</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                <span class="keywordflow">case</span> Newton64MemberType:</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                <span class="keywordflow">case</span> Pascal64MemberType:</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                <span class="keywordflow">case</span> Radian64MemberType:</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <span class="keywordflow">case</span> RadianPerSecond64MemberType:</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                <span class="keywordflow">case</span> RadianPerSecondSquared64MemberType:</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                <span class="keywordflow">case</span> Second64MemberType:</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                <span class="keywordflow">case</span> SquareMeter64MemberType:</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                <span class="keywordflow">case</span> Steradian64MemberType:</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                <span class="keywordflow">case</span> Volt64MemberType:</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                <span class="keywordflow">case</span> Watt64MemberType:</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                    <span class="keywordflow">return</span> m_blob.GetValueFloat64(memberIndex, myValueIndex)!=other.GetValueFloat64(memberIndex, otherValueIndex);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                } <span class="comment">//end switch-statement</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            }</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">//both values are null, i.e not changed</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        }</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> UniversalKeyToIndex(<span class="keyword">const</span> Internal::Blob&amp; blob,</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                                        <span class="keyword">const</span> MemberDescriptionType* md,</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                                        <span class="keywordtype">int</span> memberIndex,</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                                        std::map&lt;DotsC_Int64, int&gt;&amp; keyToIndex)</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        {</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            <span class="comment">//, InstanceId, HandlerId, ChannelId, EntityId.</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            <span class="keywordflow">switch</span> (md-&gt;GetKeyType())</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            {</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            <span class="keywordflow">case</span> Int32MemberType:</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordflow">case</span> EnumerationMemberType:</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;blob.NumberOfValues(memberIndex); ++i)</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                    {</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                        keyToIndex.insert(std::make_pair(<a class="code" href="a00420.xhtml#a516cda465896d2c7ca80f86d86e60416">TypeUtilities::ToUnifiedDictionaryKey</a>(blob.GetKeyInt32(memberIndex, i)), i));</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                    }</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                }</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">case</span> Int64MemberType:</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="keywordflow">case</span> TypeIdMemberType:</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;blob.NumberOfValues(memberIndex); ++i)</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                    {</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                        keyToIndex.insert(std::make_pair(<a class="code" href="a00420.xhtml#a516cda465896d2c7ca80f86d86e60416">TypeUtilities::ToUnifiedDictionaryKey</a>(blob.GetKeyInt64(memberIndex, i)), i));</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                    }</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="keywordflow">case</span> StringMemberType:</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                {</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;blob.NumberOfValues(memberIndex); ++i)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                    {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                        keyToIndex.insert(std::make_pair(<a class="code" href="a00420.xhtml#a516cda465896d2c7ca80f86d86e60416">TypeUtilities::ToUnifiedDictionaryKey</a>(blob.GetKeyString(memberIndex, i)), i));</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                    }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                }</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            <span class="keywordflow">case</span> InstanceIdMemberType:</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <span class="keywordflow">case</span> HandlerIdMemberType:</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <span class="keywordflow">case</span> ChannelIdMemberType:</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                {</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;blob.NumberOfValues(memberIndex); ++i)</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                    {</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                        keyToIndex.insert(std::make_pair(<a class="code" href="a00420.xhtml#a516cda465896d2c7ca80f86d86e60416">TypeUtilities::ToUnifiedDictionaryKey</a>(blob.GetKeyHash(memberIndex, i)), i));</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                    }</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                }</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keywordflow">case</span> EntityIdMemberType:</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                {</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;blob.NumberOfValues(memberIndex); ++i)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                    {</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                        DotsC_EntityId eid={blob.GetKeyInt64(memberIndex, i), blob.GetKeyHash(memberIndex, i)};</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                        keyToIndex.insert(std::make_pair(<a class="code" href="a00420.xhtml#a516cda465896d2c7ca80f86d86e60416">TypeUtilities::ToUnifiedDictionaryKey</a>(eid), i));</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                    }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            }</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        }</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    };</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;}</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;}</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;} <span class="comment">//end namespace Safir::Dob::Typesystem::ToolSupport</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="a01325_xhtml_aec573fdac7e4f003cec8ee4ea3600d6b"><div class="ttname"><a href="a01325.xhtml#aec573fdac7e4f003cec8ee4ea3600d6b">Safir::Dob::Typesystem::ToolSupport::BlobWriter::MemberMappingDescriptionType</a></div><div class="ttdeci">Traits::MemberMappingDescriptionType MemberMappingDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:74</div></div>
<div class="ttc" id="a01325_xhtml_a50bb968547033e055e8c1d69fbae8fd5"><div class="ttname"><a href="a01325.xhtml#a50bb968547033e055e8c1d69fbae8fd5">Safir::Dob::Typesystem::ToolSupport::BlobWriter::BlobWriter</a></div><div class="ttdeci">BlobWriter(const RepositoryT *rep, DotsC_TypeId typeId)</div><div class="ttdoc">Constructor - Creates a new writeable blob of specified type. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:83</div></div>
<div class="ttc" id="a01321_xhtml"><div class="ttname"><a href="a01321.xhtml">Safir::Dob::Typesystem::ToolSupport::BlobReader</a></div><div class="ttdoc">This class is used to unpack and read blobs created by the BlobWriter class. </div><div class="ttdef"><b>Definition:</b> BlobReader.h:64</div></div>
<div class="ttc" id="a01325_xhtml_ac0a07ef22858c94f1c57588f2094c7ae"><div class="ttname"><a href="a01325.xhtml#ac0a07ef22858c94f1c57588f2094c7ae">Safir::Dob::Typesystem::ToolSupport::BlobWriter::MemberDescriptionType</a></div><div class="ttdeci">Traits::MemberDescriptionType MemberDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:69</div></div>
<div class="ttc" id="a00155_xhtml"><div class="ttname"><a href="a00155.xhtml">BlobReader.h</a></div></div>
<div class="ttc" id="a00170_xhtml"><div class="ttname"><a href="a00170.xhtml">TypeUtilities.h</a></div></div>
<div class="ttc" id="a01325_xhtml_a251beb25ec1231c7eeb46b0770f25ae6"><div class="ttname"><a href="a01325.xhtml#a251beb25ec1231c7eeb46b0770f25ae6">Safir::Dob::Typesystem::ToolSupport::BlobWriter::TypeId</a></div><div class="ttdeci">DotsC_TypeId TypeId() const</div><div class="ttdoc">Get the type id of this BlobWriter. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:108</div></div>
<div class="ttc" id="a01325_xhtml_a15d11fabbfdb9c125cee0abc7bfb8d36"><div class="ttname"><a href="a01325.xhtml#a15d11fabbfdb9c125cee0abc7bfb8d36">Safir::Dob::Typesystem::ToolSupport::BlobWriter::SetChangedRecursive</a></div><div class="ttdeci">void SetChangedRecursive(bool isChanged)</div><div class="ttdoc">SetChangedRecursive - Recursively set all change flags to specified value. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:231</div></div>
<div class="ttc" id="a01325_xhtml_acf3b5a9df3b26397fedff3615fbdf168"><div class="ttname"><a href="a01325.xhtml#acf3b5a9df3b26397fedff3615fbdf168">Safir::Dob::Typesystem::ToolSupport::BlobWriter::ExceptionDescriptionType</a></div><div class="ttdeci">Traits::ExceptionDescriptionType ExceptionDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:71</div></div>
<div class="ttc" id="a00412_xhtml_add598341f70c143ad35a701a65884214"><div class="ttname"><a href="a00412.xhtml#add598341f70c143ad35a701a65884214">Safir::Dob::Typesystem::TypeId</a></div><div class="ttdeci">DotsC_TypeId TypeId</div><div class="ttdoc">A unique type identifier. </div><div class="ttdef"><b>Definition:</b> Defs.h:218</div></div>
<div class="ttc" id="a01325_xhtml_a2f449b1b54470c5fb148108832c8db04"><div class="ttname"><a href="a01325.xhtml#a2f449b1b54470c5fb148108832c8db04">Safir::Dob::Typesystem::ToolSupport::BlobWriter::PropertyDescriptionType</a></div><div class="ttdeci">Traits::PropertyDescriptionType PropertyDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:70</div></div>
<div class="ttc" id="a01325_xhtml_a73cdeb45c2cbe32d025f9502dd5b2bb3"><div class="ttname"><a href="a01325.xhtml#a73cdeb45c2cbe32d025f9502dd5b2bb3">Safir::Dob::Typesystem::ToolSupport::BlobWriter::CalculateBlobSize</a></div><div class="ttdeci">DotsC_Int32 CalculateBlobSize() const</div><div class="ttdoc">Calculate the size of the blob in bytes. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:114</div></div>
<div class="ttc" id="a01325_xhtml_acb7787a9520ee9dba93e9956cc50c9f4"><div class="ttname"><a href="a01325.xhtml#acb7787a9520ee9dba93e9956cc50c9f4">Safir::Dob::Typesystem::ToolSupport::BlobWriter::WriteKey</a></div><div class="ttdeci">void WriteKey(DotsC_MemberIndex member, const Key &amp;key)</div><div class="ttdoc">Write member key to the a blob. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:163</div></div>
<div class="ttc" id="a01325_xhtml_a3221acaabac1d1562c42a8de4ed27422"><div class="ttname"><a href="a01325.xhtml#a3221acaabac1d1562c42a8de4ed27422">Safir::Dob::Typesystem::ToolSupport::BlobWriter::EnumDescriptionType</a></div><div class="ttdeci">Traits::EnumDescriptionType EnumDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:73</div></div>
<div class="ttc" id="a01325_xhtml_aeb2f1609f120fbbabebb799cb1fe1b10"><div class="ttname"><a href="a01325.xhtml#aeb2f1609f120fbbabebb799cb1fe1b10">Safir::Dob::Typesystem::ToolSupport::BlobWriter::BlobWriter</a></div><div class="ttdeci">BlobWriter(const BlobReaderType &amp;reader)</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:94</div></div>
<div class="ttc" id="a01321_xhtml_a23b4e5d85abb2b18f99ba914217dc8c4"><div class="ttname"><a href="a01321.xhtml#a23b4e5d85abb2b18f99ba914217dc8c4">Safir::Dob::Typesystem::ToolSupport::BlobReader::TypeId</a></div><div class="ttdeci">DotsC_TypeId TypeId() const</div><div class="ttdoc">Get the type id of the blob. </div><div class="ttdef"><b>Definition:</b> BlobReader.h:116</div></div>
<div class="ttc" id="a01325_xhtml_a0fab0b48dddbaa344fe4ee6d1d1bb152"><div class="ttname"><a href="a01325.xhtml#a0fab0b48dddbaa344fe4ee6d1d1bb152">Safir::Dob::Typesystem::ToolSupport::BlobWriter::MarkChanges</a></div><div class="ttdeci">bool MarkChanges(const BlobReaderType &amp;reader)</div><div class="ttdoc">MarkChanges - Set change flag for all members that differs between this blob and the reader blob...</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:339</div></div>
<div class="ttc" id="a01325_xhtml_a8aacbd97c02153c57d10d501314c121e"><div class="ttname"><a href="a01325.xhtml#a8aacbd97c02153c57d10d501314c121e">Safir::Dob::Typesystem::ToolSupport::BlobWriter::PropertyMappingDescriptionType</a></div><div class="ttdeci">Traits::PropertyMappingDescriptionType PropertyMappingDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:75</div></div>
<div class="ttc" id="a00406_xhtml"><div class="ttname"><a href="a00406.xhtml">Safir</a></div><div class="ttdoc">This namespace contains all the functionality and definitions of the SAFIR SDK. </div><div class="ttdef"><b>Definition:</b> Backdoor.h:30</div></div>
<div class="ttc" id="a01325_xhtml_a465e51fa7bfa4d1afef2db48ad0560ea"><div class="ttname"><a href="a01325.xhtml#a465e51fa7bfa4d1afef2db48ad0560ea">Safir::Dob::Typesystem::ToolSupport::BlobWriter::CopyRawBlob</a></div><div class="ttdeci">void CopyRawBlob(char *destBlob) const</div><div class="ttdoc">Copy the binarey blob into a destination buffer. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:121</div></div>
<div class="ttc" id="a01325_xhtml"><div class="ttname"><a href="a01325.xhtml">Safir::Dob::Typesystem::ToolSupport::BlobWriter</a></div><div class="ttdoc">This class is used to create blobs by writing member values and the finally calling the CopyRawBlob-m...</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:62</div></div>
<div class="ttc" id="a01325_xhtml_a5286f98248b9b8307fb6fb4eeb5a790c"><div class="ttname"><a href="a01325.xhtml#a5286f98248b9b8307fb6fb4eeb5a790c">Safir::Dob::Typesystem::ToolSupport::BlobWriter::ClassDescriptionType</a></div><div class="ttdeci">Traits::ClassDescriptionType ClassDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:68</div></div>
<div class="ttc" id="a01325_xhtml_afba7f069feb9a3f504561d19168c06ce"><div class="ttname"><a href="a01325.xhtml#afba7f069feb9a3f504561d19168c06ce">Safir::Dob::Typesystem::ToolSupport::BlobWriter::BlobWriterType</a></div><div class="ttdeci">BlobWriter&lt; RepositoryT, Traits &gt; BlobWriterType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:65</div></div>
<div class="ttc" id="a01325_xhtml_ac995304e65ff5dc3d4435d583e8b4907"><div class="ttname"><a href="a01325.xhtml#ac995304e65ff5dc3d4435d583e8b4907">Safir::Dob::Typesystem::ToolSupport::BlobWriter::CreateRoutineDescriptionType</a></div><div class="ttdeci">Traits::CreateRoutineDescriptionType CreateRoutineDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:76</div></div>
<div class="ttc" id="a01325_xhtml_adea909185ddcc9eaf8b12f92360af77d"><div class="ttname"><a href="a01325.xhtml#adea909185ddcc9eaf8b12f92360af77d">Safir::Dob::Typesystem::ToolSupport::BlobWriter::SetChangedHere</a></div><div class="ttdeci">void SetChangedHere(DotsC_MemberIndex member, DotsC_Int32 valueIndex, bool isChanged)</div><div class="ttdoc">Set the change flag for a member value. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:146</div></div>
<div class="ttc" id="a01325_xhtml_a651ce64edbf5b282e3ee7c4d7fac9798"><div class="ttname"><a href="a01325.xhtml#a651ce64edbf5b282e3ee7c4d7fac9798">Safir::Dob::Typesystem::ToolSupport::BlobWriter::ParameterDescriptionType</a></div><div class="ttdeci">Traits::ParameterDescriptionType ParameterDescriptionType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:72</div></div>
<div class="ttc" id="a00420_xhtml_a516cda465896d2c7ca80f86d86e60416"><div class="ttname"><a href="a00420.xhtml#a516cda465896d2c7ca80f86d86e60416">Safir::Dob::Typesystem::ToolSupport::TypeUtilities::ToUnifiedDictionaryKey</a></div><div class="ttdeci">DotsC_Int64 ToUnifiedDictionaryKey(DotsC_Int64 key)</div><div class="ttdoc">ToUnifiedDictionaryKey - Convert all keys to an int64 that is the internal key format. </div><div class="ttdef"><b>Definition:</b> TypeUtilities.h:246</div></div>
<div class="ttc" id="a01325_xhtml_a7ab60c554c18675d15fb524ad2e8afd2"><div class="ttname"><a href="a01325.xhtml#a7ab60c554c18675d15fb524ad2e8afd2">Safir::Dob::Typesystem::ToolSupport::BlobWriter::WriteValue</a></div><div class="ttdeci">void WriteValue(DotsC_MemberIndex member, DotsC_Int32 index, const Val &amp;val, bool isNull, bool isChanged)</div><div class="ttdoc">Write member value to the a blob. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:192</div></div>
<div class="ttc" id="a01325_xhtml_a410272fb77c1073eec3ffa0206271577"><div class="ttname"><a href="a01325.xhtml#a410272fb77c1073eec3ffa0206271577">Safir::Dob::Typesystem::ToolSupport::BlobWriter::RepositoryType</a></div><div class="ttdeci">Traits::RepositoryType RepositoryType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:67</div></div>
<div class="ttc" id="a01325_xhtml_a52749ae61feab81bfa3d9affba8919c9"><div class="ttname"><a href="a01325.xhtml#a52749ae61feab81bfa3d9affba8919c9">Safir::Dob::Typesystem::ToolSupport::BlobWriter::SetChangedTopLevel</a></div><div class="ttdeci">void SetChangedTopLevel(DotsC_MemberIndex member, bool isChanged)</div><div class="ttdoc">Set the top level isChanged flag. </div><div class="ttdef"><b>Definition:</b> BlobWriter.h:129</div></div>
<div class="ttc" id="a01325_xhtml_a55ed5cec26670560863f26f2ea197b4c"><div class="ttname"><a href="a01325.xhtml#a55ed5cec26670560863f26f2ea197b4c">Safir::Dob::Typesystem::ToolSupport::BlobWriter::BlobReaderType</a></div><div class="ttdeci">BlobReader&lt; RepositoryT, Traits &gt; BlobReaderType</div><div class="ttdef"><b>Definition:</b> BlobWriter.h:66</div></div>
<div class="ttc" id="a00416_xhtml_aa5eee7bf2cca9bbe6c339bb362f3b74b"><div class="ttname"><a href="a00416.xhtml#aa5eee7bf2cca9bbe6c339bb362f3b74b">Safir::Dob::Typesystem::Members::GetNumberOfMembers</a></div><div class="ttdeci">DOTS_CPP_API Dob::Typesystem::Int32 GetNumberOfMembers(const Dob::Typesystem::TypeId typeId)</div><div class="ttdoc">Get the number of members for a class or property. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_be44bbfa9c04953461a45f411f73eeb6.xhtml">Safir</a></li><li class="navelem"><a class="el" href="dir_a252b385f5a773561b8bf986f2e4be11.xhtml">Dob</a></li><li class="navelem"><a class="el" href="dir_b56be55d11b18fdc9b2421311b2494a8.xhtml">Typesystem</a></li><li class="navelem"><a class="el" href="dir_c1e123044e1c88c7836b2cb3c74b5ad2.xhtml">ToolSupport</a></li><li class="navelem"><a class="el" href="a00158.xhtml">BlobWriter.h</a></li>
    <li class="footer">Generated on Tue Nov 1 2016 11:04:26 for Safir SDK Core by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.12 </li>
  </ul>
</div>
</body>
</html>
